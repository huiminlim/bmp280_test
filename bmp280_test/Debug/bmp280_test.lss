
bmp280_test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000d0  00800100  00001084  00001118  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001084  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000076  008001d0  008001d0  000011e8  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000011e8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001244  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000140  00000000  00000000  00001284  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000241a  00000000  00000000  000013c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000ee5  00000000  00000000  000037de  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001f1f  00000000  00000000  000046c3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000394  00000000  00000000  000065e4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000120ac  00000000  00000000  00006978  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001085  00000000  00000000  00018a24  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000f0  00000000  00000000  00019aa9  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0000139d  00000000  00000000  00019b99  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	33 c0       	rjmp	.+102    	; 0x68 <__ctors_end>
       2:	00 00       	nop
       4:	4c c0       	rjmp	.+152    	; 0x9e <__bad_interrupt>
       6:	00 00       	nop
       8:	4a c0       	rjmp	.+148    	; 0x9e <__bad_interrupt>
       a:	00 00       	nop
       c:	48 c0       	rjmp	.+144    	; 0x9e <__bad_interrupt>
       e:	00 00       	nop
      10:	46 c0       	rjmp	.+140    	; 0x9e <__bad_interrupt>
      12:	00 00       	nop
      14:	44 c0       	rjmp	.+136    	; 0x9e <__bad_interrupt>
      16:	00 00       	nop
      18:	42 c0       	rjmp	.+132    	; 0x9e <__bad_interrupt>
      1a:	00 00       	nop
      1c:	40 c0       	rjmp	.+128    	; 0x9e <__bad_interrupt>
      1e:	00 00       	nop
      20:	3e c0       	rjmp	.+124    	; 0x9e <__bad_interrupt>
      22:	00 00       	nop
      24:	3c c0       	rjmp	.+120    	; 0x9e <__bad_interrupt>
      26:	00 00       	nop
      28:	3a c0       	rjmp	.+116    	; 0x9e <__bad_interrupt>
      2a:	00 00       	nop
      2c:	38 c0       	rjmp	.+112    	; 0x9e <__bad_interrupt>
      2e:	00 00       	nop
      30:	36 c0       	rjmp	.+108    	; 0x9e <__bad_interrupt>
      32:	00 00       	nop
      34:	34 c0       	rjmp	.+104    	; 0x9e <__bad_interrupt>
      36:	00 00       	nop
      38:	32 c0       	rjmp	.+100    	; 0x9e <__bad_interrupt>
      3a:	00 00       	nop
      3c:	30 c0       	rjmp	.+96     	; 0x9e <__bad_interrupt>
      3e:	00 00       	nop
      40:	2e c0       	rjmp	.+92     	; 0x9e <__bad_interrupt>
      42:	00 00       	nop
      44:	2c c0       	rjmp	.+88     	; 0x9e <__bad_interrupt>
      46:	00 00       	nop
      48:	2a c0       	rjmp	.+84     	; 0x9e <__bad_interrupt>
      4a:	00 00       	nop
      4c:	28 c0       	rjmp	.+80     	; 0x9e <__bad_interrupt>
      4e:	00 00       	nop
      50:	26 c0       	rjmp	.+76     	; 0x9e <__bad_interrupt>
      52:	00 00       	nop
      54:	24 c0       	rjmp	.+72     	; 0x9e <__bad_interrupt>
      56:	00 00       	nop
      58:	22 c0       	rjmp	.+68     	; 0x9e <__bad_interrupt>
      5a:	00 00       	nop
      5c:	20 c0       	rjmp	.+64     	; 0x9e <__bad_interrupt>
      5e:	00 00       	nop
      60:	1e c0       	rjmp	.+60     	; 0x9e <__bad_interrupt>
      62:	00 00       	nop
      64:	1c c0       	rjmp	.+56     	; 0x9e <__bad_interrupt>
	...

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d8 e0       	ldi	r29, 0x08	; 8
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
      74:	11 e0       	ldi	r17, 0x01	; 1
      76:	a0 e0       	ldi	r26, 0x00	; 0
      78:	b1 e0       	ldi	r27, 0x01	; 1
      7a:	e4 e8       	ldi	r30, 0x84	; 132
      7c:	f0 e1       	ldi	r31, 0x10	; 16
      7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
      80:	05 90       	lpm	r0, Z+
      82:	0d 92       	st	X+, r0
      84:	a0 3d       	cpi	r26, 0xD0	; 208
      86:	b1 07       	cpc	r27, r17
      88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
      8a:	22 e0       	ldi	r18, 0x02	; 2
      8c:	a0 ed       	ldi	r26, 0xD0	; 208
      8e:	b1 e0       	ldi	r27, 0x01	; 1
      90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
      92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
      94:	a6 34       	cpi	r26, 0x46	; 70
      96:	b2 07       	cpc	r27, r18
      98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
      9a:	02 d4       	rcall	.+2052   	; 0x8a0 <main>
      9c:	f1 c7       	rjmp	.+4066   	; 0x1080 <_exit>

0000009e <__bad_interrupt>:
      9e:	b0 cf       	rjmp	.-160    	; 0x0 <__vectors>

000000a0 <__portable_avr_delay_cycles>:
     @param reg the register address to read from
     @returns the 16 bit data value read from the device
*/
int16_t readS16(uint8_t reg) {
    return (int16_t)read16(reg);
}
      a0:	04 c0       	rjmp	.+8      	; 0xaa <__portable_avr_delay_cycles+0xa>
      a2:	61 50       	subi	r22, 0x01	; 1
      a4:	71 09       	sbc	r23, r1
      a6:	81 09       	sbc	r24, r1
      a8:	91 09       	sbc	r25, r1
      aa:	61 15       	cp	r22, r1
      ac:	71 05       	cpc	r23, r1
      ae:	81 05       	cpc	r24, r1
      b0:	91 05       	cpc	r25, r1
      b2:	b9 f7       	brne	.-18     	; 0xa2 <__portable_avr_delay_cycles+0x2>
      b4:	08 95       	ret

000000b6 <spixfer>:
      b6:	8e bd       	out	0x2e, r24	; 46
      b8:	00 00       	nop
      ba:	0d b4       	in	r0, 0x2d	; 45
      bc:	07 fe       	sbrs	r0, 7
      be:	fd cf       	rjmp	.-6      	; 0xba <spixfer+0x4>
      c0:	8e b5       	in	r24, 0x2e	; 46
      c2:	08 95       	ret

000000c4 <read8>:
      c4:	cf 93       	push	r28
      c6:	c8 2f       	mov	r28, r24
      c8:	20 e0       	ldi	r18, 0x00	; 0
      ca:	41 e0       	ldi	r20, 0x01	; 1
      cc:	60 e2       	ldi	r22, 0x20	; 32
      ce:	71 ea       	ldi	r23, 0xA1	; 161
      d0:	87 e0       	ldi	r24, 0x07	; 7
      d2:	90 e0       	ldi	r25, 0x00	; 0
      d4:	10 d2       	rcall	.+1056   	; 0x4f6 <spi_begin_txn>
      d6:	2a 98       	cbi	0x05, 2	; 5
      d8:	8c 2f       	mov	r24, r28
      da:	80 68       	ori	r24, 0x80	; 128
      dc:	ec df       	rcall	.-40     	; 0xb6 <spixfer>
      de:	80 e0       	ldi	r24, 0x00	; 0
      e0:	ea df       	rcall	.-44     	; 0xb6 <spixfer>
      e2:	c8 2f       	mov	r28, r24
      e4:	2a 9a       	sbi	0x05, 2	; 5
      e6:	e9 d1       	rcall	.+978    	; 0x4ba <spi_end_txn>
      e8:	8c 2f       	mov	r24, r28
      ea:	cf 91       	pop	r28
      ec:	08 95       	ret

000000ee <write8>:
      ee:	cf 93       	push	r28
      f0:	df 93       	push	r29
      f2:	d8 2f       	mov	r29, r24
      f4:	c6 2f       	mov	r28, r22
      f6:	20 e0       	ldi	r18, 0x00	; 0
      f8:	41 e0       	ldi	r20, 0x01	; 1
      fa:	60 e2       	ldi	r22, 0x20	; 32
      fc:	71 ea       	ldi	r23, 0xA1	; 161
      fe:	87 e0       	ldi	r24, 0x07	; 7
     100:	90 e0       	ldi	r25, 0x00	; 0
     102:	f9 d1       	rcall	.+1010   	; 0x4f6 <spi_begin_txn>
     104:	2a 98       	cbi	0x05, 2	; 5
     106:	8d 2f       	mov	r24, r29
     108:	8f 77       	andi	r24, 0x7F	; 127
     10a:	d5 df       	rcall	.-86     	; 0xb6 <spixfer>
     10c:	8c 2f       	mov	r24, r28
     10e:	d3 df       	rcall	.-90     	; 0xb6 <spixfer>
     110:	2a 9a       	sbi	0x05, 2	; 5
     112:	d3 d1       	rcall	.+934    	; 0x4ba <spi_end_txn>
     114:	df 91       	pop	r29
     116:	cf 91       	pop	r28
     118:	08 95       	ret

0000011a <set_sampling>:
     11a:	0f 93       	push	r16
     11c:	1f 93       	push	r17
     11e:	cf 93       	push	r28
     120:	df 93       	push	r29
     122:	c0 e0       	ldi	r28, 0x00	; 0
     124:	d1 e0       	ldi	r29, 0x01	; 1
     126:	90 e0       	ldi	r25, 0x00	; 0
     128:	9d 83       	std	Y+5, r25	; 0x05
     12a:	8c 83       	std	Y+4, r24	; 0x04
     12c:	70 e0       	ldi	r23, 0x00	; 0
     12e:	79 83       	std	Y+1, r23	; 0x01
     130:	68 83       	st	Y, r22
     132:	50 e0       	ldi	r21, 0x00	; 0
     134:	5b 83       	std	Y+3, r21	; 0x03
     136:	4a 83       	std	Y+2, r20	; 0x02
     138:	30 e0       	ldi	r19, 0x00	; 0
     13a:	e6 e0       	ldi	r30, 0x06	; 6
     13c:	f1 e0       	ldi	r31, 0x01	; 1
     13e:	33 83       	std	Z+3, r19	; 0x03
     140:	22 83       	std	Z+2, r18	; 0x02
     142:	60 2f       	mov	r22, r16
     144:	70 e0       	ldi	r23, 0x00	; 0
     146:	71 83       	std	Z+1, r23	; 0x01
     148:	60 83       	st	Z, r22
     14a:	66 0f       	add	r22, r22
     14c:	77 1f       	adc	r23, r23
     14e:	62 95       	swap	r22
     150:	72 95       	swap	r23
     152:	70 7f       	andi	r23, 0xF0	; 240
     154:	76 27       	eor	r23, r22
     156:	60 7f       	andi	r22, 0xF0	; 240
     158:	76 27       	eor	r23, r22
     15a:	06 81       	ldd	r16, Z+6	; 0x06
     15c:	17 81       	ldd	r17, Z+7	; 0x07
     15e:	60 2b       	or	r22, r16
     160:	71 2b       	or	r23, r17
     162:	22 0f       	add	r18, r18
     164:	33 1f       	adc	r19, r19
     166:	22 0f       	add	r18, r18
     168:	33 1f       	adc	r19, r19
     16a:	62 2b       	or	r22, r18
     16c:	73 2b       	or	r23, r19
     16e:	85 ef       	ldi	r24, 0xF5	; 245
     170:	be df       	rcall	.-132    	; 0xee <write8>
     172:	68 81       	ld	r22, Y
     174:	79 81       	ldd	r23, Y+1	; 0x01
     176:	66 0f       	add	r22, r22
     178:	77 1f       	adc	r23, r23
     17a:	62 95       	swap	r22
     17c:	72 95       	swap	r23
     17e:	70 7f       	andi	r23, 0xF0	; 240
     180:	76 27       	eor	r23, r22
     182:	60 7f       	andi	r22, 0xF0	; 240
     184:	76 27       	eor	r23, r22
     186:	8a 81       	ldd	r24, Y+2	; 0x02
     188:	9b 81       	ldd	r25, Y+3	; 0x03
     18a:	88 0f       	add	r24, r24
     18c:	99 1f       	adc	r25, r25
     18e:	88 0f       	add	r24, r24
     190:	99 1f       	adc	r25, r25
     192:	68 2b       	or	r22, r24
     194:	79 2b       	or	r23, r25
     196:	8c 81       	ldd	r24, Y+4	; 0x04
     198:	9d 81       	ldd	r25, Y+5	; 0x05
     19a:	68 2b       	or	r22, r24
     19c:	79 2b       	or	r23, r25
     19e:	84 ef       	ldi	r24, 0xF4	; 244
     1a0:	a6 df       	rcall	.-180    	; 0xee <write8>
     1a2:	df 91       	pop	r29
     1a4:	cf 91       	pop	r28
     1a6:	1f 91       	pop	r17
     1a8:	0f 91       	pop	r16
     1aa:	08 95       	ret

000001ac <read16>:
     1ac:	cf 93       	push	r28
     1ae:	df 93       	push	r29
     1b0:	c8 2f       	mov	r28, r24
     1b2:	20 e0       	ldi	r18, 0x00	; 0
     1b4:	41 e0       	ldi	r20, 0x01	; 1
     1b6:	60 e2       	ldi	r22, 0x20	; 32
     1b8:	71 ea       	ldi	r23, 0xA1	; 161
     1ba:	87 e0       	ldi	r24, 0x07	; 7
     1bc:	90 e0       	ldi	r25, 0x00	; 0
     1be:	9b d1       	rcall	.+822    	; 0x4f6 <spi_begin_txn>
     1c0:	2a 98       	cbi	0x05, 2	; 5
     1c2:	8c 2f       	mov	r24, r28
     1c4:	80 68       	ori	r24, 0x80	; 128
     1c6:	77 df       	rcall	.-274    	; 0xb6 <spixfer>
     1c8:	80 e0       	ldi	r24, 0x00	; 0
     1ca:	75 df       	rcall	.-278    	; 0xb6 <spixfer>
     1cc:	d8 2f       	mov	r29, r24
     1ce:	80 e0       	ldi	r24, 0x00	; 0
     1d0:	72 df       	rcall	.-284    	; 0xb6 <spixfer>
     1d2:	c8 2f       	mov	r28, r24
     1d4:	2a 9a       	sbi	0x05, 2	; 5
     1d6:	71 d1       	rcall	.+738    	; 0x4ba <spi_end_txn>
     1d8:	8c 2f       	mov	r24, r28
     1da:	90 e0       	ldi	r25, 0x00	; 0
     1dc:	9d 2b       	or	r25, r29
     1de:	df 91       	pop	r29
     1e0:	cf 91       	pop	r28
     1e2:	08 95       	ret

000001e4 <read16_LE>:
     1e4:	e3 df       	rcall	.-58     	; 0x1ac <read16>
     1e6:	98 27       	eor	r25, r24
     1e8:	89 27       	eor	r24, r25
     1ea:	98 27       	eor	r25, r24
     1ec:	08 95       	ret

000001ee <read_coefficients>:
     1ee:	cf 93       	push	r28
     1f0:	df 93       	push	r29
     1f2:	88 e8       	ldi	r24, 0x88	; 136
     1f4:	f7 df       	rcall	.-18     	; 0x1e4 <read16_LE>
     1f6:	c8 e2       	ldi	r28, 0x28	; 40
     1f8:	d2 e0       	ldi	r29, 0x02	; 2
     1fa:	99 83       	std	Y+1, r25	; 0x01
     1fc:	88 83       	st	Y, r24
     1fe:	8a e8       	ldi	r24, 0x8A	; 138
     200:	f1 df       	rcall	.-30     	; 0x1e4 <read16_LE>
     202:	9b 83       	std	Y+3, r25	; 0x03
     204:	8a 83       	std	Y+2, r24	; 0x02
     206:	8c e8       	ldi	r24, 0x8C	; 140
     208:	ed df       	rcall	.-38     	; 0x1e4 <read16_LE>
     20a:	9d 83       	std	Y+5, r25	; 0x05
     20c:	8c 83       	std	Y+4, r24	; 0x04
     20e:	8e e8       	ldi	r24, 0x8E	; 142
     210:	e9 df       	rcall	.-46     	; 0x1e4 <read16_LE>
     212:	9f 83       	std	Y+7, r25	; 0x07
     214:	8e 83       	std	Y+6, r24	; 0x06
     216:	80 e9       	ldi	r24, 0x90	; 144
     218:	e5 df       	rcall	.-54     	; 0x1e4 <read16_LE>
     21a:	99 87       	std	Y+9, r25	; 0x09
     21c:	88 87       	std	Y+8, r24	; 0x08
     21e:	82 e9       	ldi	r24, 0x92	; 146
     220:	e1 df       	rcall	.-62     	; 0x1e4 <read16_LE>
     222:	9b 87       	std	Y+11, r25	; 0x0b
     224:	8a 87       	std	Y+10, r24	; 0x0a
     226:	84 e9       	ldi	r24, 0x94	; 148
     228:	dd df       	rcall	.-70     	; 0x1e4 <read16_LE>
     22a:	9d 87       	std	Y+13, r25	; 0x0d
     22c:	8c 87       	std	Y+12, r24	; 0x0c
     22e:	86 e9       	ldi	r24, 0x96	; 150
     230:	d9 df       	rcall	.-78     	; 0x1e4 <read16_LE>
     232:	9f 87       	std	Y+15, r25	; 0x0f
     234:	8e 87       	std	Y+14, r24	; 0x0e
     236:	88 e9       	ldi	r24, 0x98	; 152
     238:	d5 df       	rcall	.-86     	; 0x1e4 <read16_LE>
     23a:	99 8b       	std	Y+17, r25	; 0x11
     23c:	88 8b       	std	Y+16, r24	; 0x10
     23e:	8a e9       	ldi	r24, 0x9A	; 154
     240:	d1 df       	rcall	.-94     	; 0x1e4 <read16_LE>
     242:	9b 8b       	std	Y+19, r25	; 0x13
     244:	8a 8b       	std	Y+18, r24	; 0x12
     246:	8c e9       	ldi	r24, 0x9C	; 156
     248:	cd df       	rcall	.-102    	; 0x1e4 <read16_LE>
     24a:	9d 8b       	std	Y+21, r25	; 0x15
     24c:	8c 8b       	std	Y+20, r24	; 0x14
     24e:	8e e9       	ldi	r24, 0x9E	; 158
     250:	c9 df       	rcall	.-110    	; 0x1e4 <read16_LE>
     252:	9f 8b       	std	Y+23, r25	; 0x17
     254:	8e 8b       	std	Y+22, r24	; 0x16
     256:	df 91       	pop	r29
     258:	cf 91       	pop	r28
     25a:	08 95       	ret

0000025c <bmp280_init>:
     25c:	0f 93       	push	r16
     25e:	cf 93       	push	r28
     260:	80 ed       	ldi	r24, 0xD0	; 208
     262:	30 df       	rcall	.-416    	; 0xc4 <read8>
     264:	c8 2f       	mov	r28, r24
     266:	1f 92       	push	r1
     268:	8f 93       	push	r24
     26a:	8c e1       	ldi	r24, 0x1C	; 28
     26c:	91 e0       	ldi	r25, 0x01	; 1
     26e:	9f 93       	push	r25
     270:	8f 93       	push	r24
     272:	dd d3       	rcall	.+1978   	; 0xa2e <printf>
     274:	0f 90       	pop	r0
     276:	0f 90       	pop	r0
     278:	0f 90       	pop	r0
     27a:	0f 90       	pop	r0
     27c:	c8 35       	cpi	r28, 0x58	; 88
     27e:	79 f4       	brne	.+30     	; 0x29e <bmp280_init+0x42>
     280:	b6 df       	rcall	.-148    	; 0x1ee <read_coefficients>
     282:	04 e0       	ldi	r16, 0x04	; 4
     284:	24 e0       	ldi	r18, 0x04	; 4
     286:	45 e0       	ldi	r20, 0x05	; 5
     288:	62 e0       	ldi	r22, 0x02	; 2
     28a:	83 e0       	ldi	r24, 0x03	; 3
     28c:	46 df       	rcall	.-372    	; 0x11a <set_sampling>
     28e:	66 e3       	ldi	r22, 0x36	; 54
     290:	72 e8       	ldi	r23, 0x82	; 130
     292:	80 e0       	ldi	r24, 0x00	; 0
     294:	90 e0       	ldi	r25, 0x00	; 0
     296:	04 df       	rcall	.-504    	; 0xa0 <__portable_avr_delay_cycles>
     298:	81 e0       	ldi	r24, 0x01	; 1
     29a:	90 e0       	ldi	r25, 0x00	; 0
     29c:	02 c0       	rjmp	.+4      	; 0x2a2 <bmp280_init+0x46>
     29e:	80 e0       	ldi	r24, 0x00	; 0
     2a0:	90 e0       	ldi	r25, 0x00	; 0
     2a2:	cf 91       	pop	r28
     2a4:	0f 91       	pop	r16
     2a6:	08 95       	ret

000002a8 <read24>:
/*!
     @brief  Reads a 24 bit value
     @param reg the register address to read from
     @returns the 24 bit data value read from the device
*/
uint32_t read24(uint8_t reg) {
     2a8:	cf 92       	push	r12
     2aa:	df 92       	push	r13
     2ac:	ef 92       	push	r14
     2ae:	ff 92       	push	r15
     2b0:	cf 93       	push	r28
     2b2:	c8 2f       	mov	r28, r24
    uint32_t value;
    spi_begin_txn(500000, MSBFIRST, SPI_MODE0);
     2b4:	20 e0       	ldi	r18, 0x00	; 0
     2b6:	41 e0       	ldi	r20, 0x01	; 1
     2b8:	60 e2       	ldi	r22, 0x20	; 32
     2ba:	71 ea       	ldi	r23, 0xA1	; 161
     2bc:	87 e0       	ldi	r24, 0x07	; 7
     2be:	90 e0       	ldi	r25, 0x00	; 0
     2c0:	1a d1       	rcall	.+564    	; 0x4f6 <spi_begin_txn>
		base_add->PORTDATA
			= (base_add->PORTDATA  | arch_ioport_pin_to_mask
					(pin));
	} else {
		base_add->PORTDATA
			= (base_add->PORTDATA  & (~arch_ioport_pin_to_mask
     2c2:	2a 98       	cbi	0x05, 2	; 5

    // SS set to low - select slave
    ioport_set_pin_low(SPI_HARDWARE_SS);

    // read, bit 7 high
    spixfer(reg | 0x80);
     2c4:	8c 2f       	mov	r24, r28
     2c6:	80 68       	ori	r24, 0x80	; 128
     2c8:	f6 de       	rcall	.-532    	; 0xb6 <spixfer>
    value = spixfer(0);
     2ca:	80 e0       	ldi	r24, 0x00	; 0
     2cc:	f4 de       	rcall	.-536    	; 0xb6 <spixfer>
     2ce:	c8 2e       	mov	r12, r24
     2d0:	d1 2c       	mov	r13, r1
     2d2:	e1 2c       	mov	r14, r1
     2d4:	f1 2c       	mov	r15, r1
     2d6:	fe 2c       	mov	r15, r14
    value = (value << 8);
     2d8:	ed 2c       	mov	r14, r13
     2da:	dc 2c       	mov	r13, r12
     2dc:	cc 24       	eor	r12, r12
    value |= spixfer(0);
     2de:	80 e0       	ldi	r24, 0x00	; 0
     2e0:	ea de       	rcall	.-556    	; 0xb6 <spixfer>
     2e2:	c8 2a       	or	r12, r24
     2e4:	fe 2c       	mov	r15, r14
    value = (value << 8);
     2e6:	ed 2c       	mov	r14, r13
     2e8:	dc 2c       	mov	r13, r12
     2ea:	cc 24       	eor	r12, r12
    value |= spixfer(0);
     2ec:	80 e0       	ldi	r24, 0x00	; 0
     2ee:	e3 de       	rcall	.-570    	; 0xb6 <spixfer>
     2f0:	c8 2a       	or	r12, r24
{
	PORT_t *base_add = arch_ioport_port_to_base(pin >> 3);

	if (level) {
		base_add->PORTDATA
			= (base_add->PORTDATA  | arch_ioport_pin_to_mask
     2f2:	2a 9a       	sbi	0x05, 2	; 5

    // SS set to high - de-select slave
    ioport_set_pin_high(SPI_HARDWARE_SS);
    spi_end_txn();
     2f4:	e2 d0       	rcall	.+452    	; 0x4ba <spi_end_txn>
     2f6:	c7 01       	movw	r24, r14

    return value;
}
     2f8:	b6 01       	movw	r22, r12
     2fa:	cf 91       	pop	r28
     2fc:	ff 90       	pop	r15
     2fe:	ef 90       	pop	r14
     300:	df 90       	pop	r13
     302:	cf 90       	pop	r12
     304:	08 95       	ret

00000306 <bmp280_read_temperature>:
     306:	4f 92       	push	r4

/*!
     @brief  Returns the temperature from the sensor
     @returns the temperature read from the device in 4 digits (XX.YY = XXYY)
*/
int32_t bmp280_read_temperature(void) {
     308:	5f 92       	push	r5
     30a:	6f 92       	push	r6
     30c:	7f 92       	push	r7
     30e:	8f 92       	push	r8
     310:	9f 92       	push	r9
     312:	af 92       	push	r10
     314:	bf 92       	push	r11
     316:	cf 92       	push	r12
     318:	df 92       	push	r13
     31a:	ef 92       	push	r14
     31c:	ff 92       	push	r15
    int32_t var1, var2;
    int32_t adc_T = read24(BMP280_REGISTER_TEMPDATA);
     31e:	8a ef       	ldi	r24, 0xFA	; 250
     320:	c3 df       	rcall	.-122    	; 0x2a8 <read24>
     322:	6b 01       	movw	r12, r22
     324:	7c 01       	movw	r14, r24
    adc_T = (adc_T >> 4);

    //printf("adc: %ld\r\n", adc_T);

    // Calibrate the temperature sensor data
    var1 = ((((adc_T >> 3) - ((int32_t)bmp280_calib_data_read.dig_T1 << 1))) *
     326:	e8 e2       	ldi	r30, 0x28	; 40
     328:	f2 e0       	ldi	r31, 0x02	; 2
     32a:	40 80       	ld	r4, Z
     32c:	51 80       	ldd	r5, Z+1	; 0x01
     32e:	61 2c       	mov	r6, r1
     330:	71 2c       	mov	r7, r1
     332:	ab 01       	movw	r20, r22
     334:	bc 01       	movw	r22, r24
     336:	68 94       	set
     338:	16 f8       	bld	r1, 6
     33a:	75 95       	asr	r23
     33c:	67 95       	ror	r22
     33e:	57 95       	ror	r21
     340:	47 95       	ror	r20
     342:	16 94       	lsr	r1
     344:	d1 f7       	brne	.-12     	; 0x33a <bmp280_read_temperature+0x34>
     346:	d3 01       	movw	r26, r6
     348:	c2 01       	movw	r24, r4
     34a:	88 0f       	add	r24, r24
     34c:	99 1f       	adc	r25, r25
     34e:	aa 1f       	adc	r26, r26
     350:	bb 1f       	adc	r27, r27
     352:	9a 01       	movw	r18, r20
     354:	ab 01       	movw	r20, r22
     356:	28 1b       	sub	r18, r24
     358:	39 0b       	sbc	r19, r25
     35a:	4a 0b       	sbc	r20, r26
     35c:	5b 0b       	sbc	r21, r27
     35e:	a2 81       	ldd	r26, Z+2	; 0x02
     360:	b3 81       	ldd	r27, Z+3	; 0x03
     362:	fc d2       	rcall	.+1528   	; 0x95c <__mulshisi3>
     364:	4b 01       	movw	r8, r22
     366:	5c 01       	movw	r10, r24
     368:	07 2e       	mov	r0, r23
     36a:	7b e0       	ldi	r23, 0x0B	; 11
     36c:	b5 94       	asr	r11
     36e:	a7 94       	ror	r10
     370:	97 94       	ror	r9
     372:	87 94       	ror	r8
     374:	7a 95       	dec	r23
     376:	d1 f7       	brne	.-12     	; 0x36c <bmp280_read_temperature+0x66>
     378:	70 2d       	mov	r23, r0
            ((int32_t)bmp280_calib_data_read.dig_T2)) >> 11;

    var2 = (((((adc_T >> 4) - ((int32_t)bmp280_calib_data_read.dig_T1)) * ((adc_T >> 4) - ((
     37a:	bb 27       	eor	r27, r27
     37c:	f7 fc       	sbrc	r15, 7
     37e:	ba 95       	dec	r27
     380:	af 2d       	mov	r26, r15
     382:	9e 2d       	mov	r25, r14
     384:	8d 2d       	mov	r24, r13
     386:	bc 01       	movw	r22, r24
     388:	cd 01       	movw	r24, r26
     38a:	64 19       	sub	r22, r4
     38c:	75 09       	sbc	r23, r5
     38e:	86 09       	sbc	r24, r6
     390:	97 09       	sbc	r25, r7
     392:	9b 01       	movw	r18, r22
     394:	ac 01       	movw	r20, r24
     396:	ad d2       	rcall	.+1370   	; 0x8f2 <__mulsi3>
     398:	9b 01       	movw	r18, r22
     39a:	ac 01       	movw	r20, r24
     39c:	01 2e       	mov	r0, r17
     39e:	1c e0       	ldi	r17, 0x0C	; 12
     3a0:	55 95       	asr	r21
     3a2:	47 95       	ror	r20
     3a4:	37 95       	ror	r19
     3a6:	27 95       	ror	r18
     3a8:	1a 95       	dec	r17
     3aa:	d1 f7       	brne	.-12     	; 0x3a0 <bmp280_read_temperature+0x9a>
     3ac:	10 2d       	mov	r17, r0
     3ae:	a4 81       	ldd	r26, Z+4	; 0x04
     3b0:	b5 81       	ldd	r27, Z+5	; 0x05
     3b2:	d4 d2       	rcall	.+1448   	; 0x95c <__mulshisi3>
     3b4:	6b 01       	movw	r12, r22
     3b6:	7c 01       	movw	r14, r24
     3b8:	0b 2e       	mov	r0, r27
     3ba:	be e0       	ldi	r27, 0x0E	; 14
     3bc:	f5 94       	asr	r15
     3be:	e7 94       	ror	r14
     3c0:	d7 94       	ror	r13
     3c2:	c7 94       	ror	r12
     3c4:	ba 95       	dec	r27
     3c6:	d1 f7       	brne	.-12     	; 0x3bc <bmp280_read_temperature+0xb6>
     3c8:	b0 2d       	mov	r27, r0
                  int32_t)bmp280_calib_data_read.dig_T1))) >>
             12) * ((int32_t)bmp280_calib_data_read.dig_T3)) >> 14;

    printf("Prev t_fine: %ld\r\n", t_fine);
     3ca:	80 91 d3 01 	lds	r24, 0x01D3	; 0x8001d3 <__data_end+0x3>
     3ce:	8f 93       	push	r24
     3d0:	80 91 d2 01 	lds	r24, 0x01D2	; 0x8001d2 <__data_end+0x2>
     3d4:	8f 93       	push	r24
     3d6:	80 91 d1 01 	lds	r24, 0x01D1	; 0x8001d1 <__data_end+0x1>
     3da:	8f 93       	push	r24
     3dc:	80 91 d0 01 	lds	r24, 0x01D0	; 0x8001d0 <__data_end>
     3e0:	8f 93       	push	r24
     3e2:	8e e2       	ldi	r24, 0x2E	; 46
     3e4:	91 e0       	ldi	r25, 0x01	; 1
     3e6:	9f 93       	push	r25
     3e8:	8f 93       	push	r24
     3ea:	21 d3       	rcall	.+1602   	; 0xa2e <printf>
    t_fine = var1 + var2;
     3ec:	d5 01       	movw	r26, r10
     3ee:	c4 01       	movw	r24, r8
     3f0:	8c 0d       	add	r24, r12
     3f2:	9d 1d       	adc	r25, r13
     3f4:	ae 1d       	adc	r26, r14
     3f6:	bf 1d       	adc	r27, r15
     3f8:	80 93 d0 01 	sts	0x01D0, r24	; 0x8001d0 <__data_end>
     3fc:	90 93 d1 01 	sts	0x01D1, r25	; 0x8001d1 <__data_end+0x1>
     400:	a0 93 d2 01 	sts	0x01D2, r26	; 0x8001d2 <__data_end+0x2>
     404:	b0 93 d3 01 	sts	0x01D3, r27	; 0x8001d3 <__data_end+0x3>
    printf("Curr t_fine: %ld\r\n", t_fine);
     408:	bf 93       	push	r27
     40a:	af 93       	push	r26
     40c:	9f 93       	push	r25
     40e:	8f 93       	push	r24
     410:	81 e4       	ldi	r24, 0x41	; 65
     412:	91 e0       	ldi	r25, 0x01	; 1
     414:	9f 93       	push	r25
     416:	8f 93       	push	r24
     418:	0a d3       	rcall	.+1556   	; 0xa2e <printf>
    int32_t T = (t_fine * 5 + 128) >> 8;
     41a:	c0 90 d0 01 	lds	r12, 0x01D0	; 0x8001d0 <__data_end>
     41e:	d0 90 d1 01 	lds	r13, 0x01D1	; 0x8001d1 <__data_end+0x1>
     422:	e0 90 d2 01 	lds	r14, 0x01D2	; 0x8001d2 <__data_end+0x2>
     426:	f0 90 d3 01 	lds	r15, 0x01D3	; 0x8001d3 <__data_end+0x3>
     42a:	d7 01       	movw	r26, r14
     42c:	c6 01       	movw	r24, r12
     42e:	88 0f       	add	r24, r24
     430:	99 1f       	adc	r25, r25
     432:	aa 1f       	adc	r26, r26
     434:	bb 1f       	adc	r27, r27
     436:	88 0f       	add	r24, r24
     438:	99 1f       	adc	r25, r25
     43a:	aa 1f       	adc	r26, r26
     43c:	bb 1f       	adc	r27, r27
     43e:	c8 0e       	add	r12, r24
     440:	d9 1e       	adc	r13, r25
     442:	ea 1e       	adc	r14, r26
     444:	fb 1e       	adc	r15, r27
     446:	80 e8       	ldi	r24, 0x80	; 128
     448:	c8 0e       	add	r12, r24
     44a:	d1 1c       	adc	r13, r1
     44c:	e1 1c       	adc	r14, r1
     44e:	f1 1c       	adc	r15, r1
     450:	cd 2c       	mov	r12, r13
     452:	de 2c       	mov	r13, r14
     454:	ef 2c       	mov	r14, r15
     456:	ff 24       	eor	r15, r15
     458:	e7 fc       	sbrc	r14, 7
     45a:	fa 94       	dec	r15

    printf("T: %ld\r\n", T);
     45c:	ff 92       	push	r15
     45e:	ef 92       	push	r14
     460:	df 92       	push	r13
     462:	cf 92       	push	r12
     464:	84 e5       	ldi	r24, 0x54	; 84
     466:	91 e0       	ldi	r25, 0x01	; 1
     468:	9f 93       	push	r25
     46a:	8f 93       	push	r24
     46c:	e0 d2       	rcall	.+1472   	; 0xa2e <printf>
    return T;
     46e:	8d b7       	in	r24, 0x3d	; 61
     470:	9e b7       	in	r25, 0x3e	; 62
     472:	42 96       	adiw	r24, 0x12	; 18
     474:	0f b6       	in	r0, 0x3f	; 63
     476:	f8 94       	cli
     478:	9e bf       	out	0x3e, r25	; 62
     47a:	0f be       	out	0x3f, r0	; 63
     47c:	8d bf       	out	0x3d, r24	; 61
}
     47e:	c7 01       	movw	r24, r14
     480:	b6 01       	movw	r22, r12
     482:	ff 90       	pop	r15
     484:	ef 90       	pop	r14
     486:	df 90       	pop	r13
     488:	cf 90       	pop	r12
     48a:	bf 90       	pop	r11
     48c:	af 90       	pop	r10
     48e:	9f 90       	pop	r9
     490:	8f 90       	pop	r8
     492:	7f 90       	pop	r7
     494:	6f 90       	pop	r6
     496:	5f 90       	pop	r5
     498:	4f 90       	pop	r4
     49a:	08 95       	ret

0000049c <spi_init>:
     49c:	2a 9a       	sbi	0x05, 2	; 5
		enum ioport_direction dir)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->DIR |= arch_ioport_pin_to_mask(pin);
     49e:	22 9a       	sbi	0x04, 2	; 4

    // Set SS as output pin
    ioport_set_pin_dir(SPI_HARDWARE_SS, IOPORT_DIR_OUTPUT);

    // Initialize as SPI master
    SPCR |= (1 << MSTR);
     4a0:	8c b5       	in	r24, 0x2c	; 44
     4a2:	80 61       	ori	r24, 0x10	; 16
     4a4:	8c bd       	out	0x2c, r24	; 44
    SPCR |= (1 << SPE);
     4a6:	8c b5       	in	r24, 0x2c	; 44
     4a8:	80 64       	ori	r24, 0x40	; 64
     4aa:	8c bd       	out	0x2c, r24	; 44
     4ac:	25 9a       	sbi	0x04, 5	; 4
     4ae:	23 9a       	sbi	0x04, 3	; 4
    ioport_set_pin_dir(SPI_HARDWARE_MOSI, IOPORT_DIR_OUTPUT);

    // MISO pin is override to Input automatically
    //ioport_set_pin_dir(SPI_HARDWARE_MISO, IOPORT_DIR_INPUT);

    num_initialized = 0;
     4b0:	10 92 d5 01 	sts	0x01D5, r1	; 0x8001d5 <num_initialized+0x1>
     4b4:	10 92 d4 01 	sts	0x01D4, r1	; 0x8001d4 <num_initialized>
     4b8:	08 95       	ret

000004ba <spi_end_txn>:
/*
    This function configures SPI bus to release it
*/
void spi_end_txn (void) {
    // Reduce the number of SPI initialized
    if (num_initialized) {
     4ba:	80 91 d4 01 	lds	r24, 0x01D4	; 0x8001d4 <num_initialized>
     4be:	90 91 d5 01 	lds	r25, 0x01D5	; 0x8001d5 <num_initialized+0x1>
     4c2:	00 97       	sbiw	r24, 0x00	; 0
     4c4:	39 f0       	breq	.+14     	; 0x4d4 <spi_end_txn+0x1a>
        num_initialized--;
     4c6:	01 97       	sbiw	r24, 0x01	; 1
     4c8:	90 93 d5 01 	sts	0x01D5, r25	; 0x8001d5 <num_initialized+0x1>
     4cc:	80 93 d4 01 	sts	0x01D4, r24	; 0x8001d4 <num_initialized>
    }

    // If no more usage of SPI bus, release the SPI bus
    // Disable SPI
    if (num_initialized == 0) {
     4d0:	89 2b       	or	r24, r25
     4d2:	19 f4       	brne	.+6      	; 0x4da <spi_end_txn+0x20>
        SPCR &= ~(1 << SPE);
     4d4:	8c b5       	in	r24, 0x2c	; 44
     4d6:	8f 7b       	andi	r24, 0xBF	; 191
     4d8:	8c bd       	out	0x2c, r24	; 44
     4da:	08 95       	ret

000004dc <get_clock_divider_bits>:
    if (clockDiv == 6) {
        clockDiv = 7;
    }

    return clockDiv;
}
     4dc:	87 e0       	ldi	r24, 0x07	; 7
     4de:	08 95       	ret

000004e0 <set_clock_divider>:
/*
    This function sets the clock mode given a clock div value
*/
void set_clock_divider(uint8_t clockDiv) {
    // Invert the SPI2X bit
    uint8_t clock_div_invert = clockDiv ^ 0x1;
     4e0:	91 e0       	ldi	r25, 0x01	; 1
     4e2:	89 27       	eor	r24, r25

    SPCR |= ((clock_div_invert >> 1) & SPI_CLOCK_MASK);
     4e4:	2c b5       	in	r18, 0x2c	; 44
     4e6:	98 2f       	mov	r25, r24
     4e8:	96 95       	lsr	r25
     4ea:	93 70       	andi	r25, 0x03	; 3
     4ec:	92 2b       	or	r25, r18
     4ee:	9c bd       	out	0x2c, r25	; 44
    SPSR = (clock_div_invert & SPI_2XCLOCK_MASK);
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	8d bd       	out	0x2d, r24	; 45
     4f4:	08 95       	ret

000004f6 <spi_begin_txn>:

    Example:
 		SPISettings(uint32_t clock, uint8_t bitOrder, uint8_t dataMode)
 		SPISettings(500000, MSBFIRST, SPI_MODE0)
*/
void spi_begin_txn(uint32_t clock, uint8_t bit_order, uint8_t data_mode) {
     4f6:	cf 93       	push	r28
     4f8:	df 93       	push	r29
     4fa:	86 2f       	mov	r24, r22
     4fc:	d4 2f       	mov	r29, r20
     4fe:	c2 2f       	mov	r28, r18
    // Setup SPI in master, again
    SPCR |= (1 << SPE);
     500:	9c b5       	in	r25, 0x2c	; 44
     502:	90 64       	ori	r25, 0x40	; 64
     504:	9c bd       	out	0x2c, r25	; 44
    SPCR |= (1 << MSTR);
     506:	9c b5       	in	r25, 0x2c	; 44
     508:	90 61       	ori	r25, 0x10	; 16
     50a:	9c bd       	out	0x2c, r25	; 44

    // Setup clock
    uint8_t clock_div_bits = get_clock_divider_bits(clock);
     50c:	e7 df       	rcall	.-50     	; 0x4dc <get_clock_divider_bits>
    set_clock_divider(clock_div_bits);
     50e:	e8 df       	rcall	.-48     	; 0x4e0 <set_clock_divider>
     510:	8c b5       	in	r24, 0x2c	; 44

    // Setup data mode
    SPCR |= (data_mode & SPI_MODE_MASK);
     512:	2c 2f       	mov	r18, r28
     514:	2c 70       	andi	r18, 0x0C	; 12
     516:	28 2b       	or	r18, r24
     518:	2c bd       	out	0x2c, r18	; 44
     51a:	8c b5       	in	r24, 0x2c	; 44

    // Setup bit order
    SPCR |= ((bit_order == LSBFIRST) ? (1 << DORD) : 0);
     51c:	dd 23       	and	r29, r29
     51e:	11 f0       	breq	.+4      	; 0x524 <spi_begin_txn+0x2e>
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	01 c0       	rjmp	.+2      	; 0x526 <spi_begin_txn+0x30>
     524:	90 e2       	ldi	r25, 0x20	; 32
     526:	89 2b       	or	r24, r25
     528:	8c bd       	out	0x2c, r24	; 44
     52a:	80 91 d4 01 	lds	r24, 0x01D4	; 0x8001d4 <num_initialized>

    num_initialized++;
     52e:	90 91 d5 01 	lds	r25, 0x01D5	; 0x8001d5 <num_initialized+0x1>
     532:	01 96       	adiw	r24, 0x01	; 1
     534:	90 93 d5 01 	sts	0x01D5, r25	; 0x8001d5 <num_initialized+0x1>
     538:	80 93 d4 01 	sts	0x01D4, r24	; 0x8001d4 <num_initialized>
     53c:	df 91       	pop	r29
}
     53e:	cf 91       	pop	r28
     540:	08 95       	ret

00000542 <uart_putchar>:
/*
    Send character c down the UART Tx, wait until tx holding register
    is empty.
*/
int
uart_putchar(char c, FILE *stream) {
     542:	cf 93       	push	r28
     544:	c8 2f       	mov	r28, r24

    if (c == '\a') {
     546:	87 30       	cpi	r24, 0x07	; 7
     548:	61 f4       	brne	.+24     	; 0x562 <uart_putchar+0x20>
        fputs("*ring*\n", stderr);
     54a:	20 91 44 02 	lds	r18, 0x0244	; 0x800244 <__iob+0x4>
     54e:	30 91 45 02 	lds	r19, 0x0245	; 0x800245 <__iob+0x5>
     552:	47 e0       	ldi	r20, 0x07	; 7
     554:	50 e0       	ldi	r21, 0x00	; 0
     556:	61 e0       	ldi	r22, 0x01	; 1
     558:	70 e0       	ldi	r23, 0x00	; 0
     55a:	8d e5       	ldi	r24, 0x5D	; 93
     55c:	91 e0       	ldi	r25, 0x01	; 1
     55e:	35 d2       	rcall	.+1130   	; 0x9ca <fwrite>
        return 0;
     560:	0b c0       	rjmp	.+22     	; 0x578 <uart_putchar+0x36>
    }

    if (c == '\n') {
     562:	8a 30       	cpi	r24, 0x0A	; 10
     564:	11 f4       	brne	.+4      	; 0x56a <uart_putchar+0x28>
        uart_putchar('\r', stream);
     566:	8d e0       	ldi	r24, 0x0D	; 13
     568:	ec df       	rcall	.-40     	; 0x542 <uart_putchar>
    }

    loop_until_bit_is_set(UCSR0A, UDRE0);
     56a:	e0 ec       	ldi	r30, 0xC0	; 192
     56c:	f0 e0       	ldi	r31, 0x00	; 0
     56e:	80 81       	ld	r24, Z
     570:	85 ff       	sbrs	r24, 5
     572:	fd cf       	rjmp	.-6      	; 0x56e <uart_putchar+0x2c>
    UDR0 = c;
     574:	c0 93 c6 00 	sts	0x00C6, r28	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>

    return 0;
}
     578:	80 e0       	ldi	r24, 0x00	; 0
     57a:	90 e0       	ldi	r25, 0x00	; 0
     57c:	cf 91       	pop	r28
     57e:	08 95       	ret

00000580 <uart_getchar>:

    Successive calls to uart_getchar() will be satisfied from the
    internal buffer until that buffer is emptied again.
*/
int
uart_getchar(FILE *stream) {
     580:	6f 92       	push	r6
     582:	7f 92       	push	r7
     584:	8f 92       	push	r8
     586:	9f 92       	push	r9
     588:	af 92       	push	r10
     58a:	bf 92       	push	r11
     58c:	cf 92       	push	r12
     58e:	df 92       	push	r13
     590:	ef 92       	push	r14
     592:	ff 92       	push	r15
     594:	0f 93       	push	r16
     596:	1f 93       	push	r17
     598:	cf 93       	push	r28
     59a:	df 93       	push	r29
    uint8_t c;
    char *cp, *cp2;
    static char b[RX_BUFSIZE];
    static char *rxp;

    if (rxp == 0)
     59c:	20 91 26 02 	lds	r18, 0x0226	; 0x800226 <rxp.2118>
     5a0:	30 91 27 02 	lds	r19, 0x0227	; 0x800227 <rxp.2118+0x1>
     5a4:	23 2b       	or	r18, r19
     5a6:	09 f0       	breq	.+2      	; 0x5aa <uart_getchar+0x2a>
     5a8:	cc c0       	rjmp	.+408    	; 0x742 <uart_getchar+0x1c2>
     5aa:	8c 01       	movw	r16, r24
     5ac:	0f 2e       	mov	r0, r31
     5ae:	f6 ed       	ldi	r31, 0xD6	; 214
     5b0:	8f 2e       	mov	r8, r31
     5b2:	f1 e0       	ldi	r31, 0x01	; 1
     5b4:	9f 2e       	mov	r9, r31
     5b6:	f0 2d       	mov	r31, r0
        for (cp = b;;) {
            loop_until_bit_is_set(UCSR0A, RXC0);
     5b8:	c0 ec       	ldi	r28, 0xC0	; 192
     5ba:	d0 e0       	ldi	r29, 0x00	; 0

            if (UCSR0A & _BV(DOR0)) {
                return _FDEV_ERR;
            }

            c = UDR0;
     5bc:	0f 2e       	mov	r0, r31
     5be:	f6 ec       	ldi	r31, 0xC6	; 198
     5c0:	cf 2e       	mov	r12, r31
     5c2:	d1 2c       	mov	r13, r1
     5c4:	f0 2d       	mov	r31, r0
     5c6:	54 01       	movw	r10, r8
     5c8:	0f 2e       	mov	r0, r31
     5ca:	f5 ed       	ldi	r31, 0xD5	; 213
     5cc:	6f 2e       	mov	r6, r31
     5ce:	f1 e0       	ldi	r31, 0x01	; 1
     5d0:	7f 2e       	mov	r7, r31
     5d2:	f0 2d       	mov	r31, r0
    static char b[RX_BUFSIZE];
    static char *rxp;

    if (rxp == 0)
        for (cp = b;;) {
            loop_until_bit_is_set(UCSR0A, RXC0);
     5d4:	88 81       	ld	r24, Y
     5d6:	88 23       	and	r24, r24
     5d8:	ec f7       	brge	.-6      	; 0x5d4 <uart_getchar+0x54>

            if (UCSR0A & _BV(FE0)) {
     5da:	88 81       	ld	r24, Y
     5dc:	84 fd       	sbrc	r24, 4
     5de:	c4 c0       	rjmp	.+392    	; 0x768 <uart_getchar+0x1e8>
                return _FDEV_EOF;
            }

            if (UCSR0A & _BV(DOR0)) {
     5e0:	88 81       	ld	r24, Y
     5e2:	83 fd       	sbrc	r24, 3
     5e4:	c4 c0       	rjmp	.+392    	; 0x76e <uart_getchar+0x1ee>
                return _FDEV_ERR;
            }

            c = UDR0;
     5e6:	f6 01       	movw	r30, r12
     5e8:	80 81       	ld	r24, Z

            /* behaviour similar to Unix stty ICRNL */
            if (c == '\r') {
     5ea:	8d 30       	cpi	r24, 0x0D	; 13
     5ec:	11 f0       	breq	.+4      	; 0x5f2 <uart_getchar+0x72>
                c = '\n';
            }

            if (c == '\n') {
     5ee:	8a 30       	cpi	r24, 0x0A	; 10
     5f0:	61 f4       	brne	.+24     	; 0x60a <uart_getchar+0x8a>
                *cp = c;
     5f2:	8a e0       	ldi	r24, 0x0A	; 10
     5f4:	f4 01       	movw	r30, r8
     5f6:	80 83       	st	Z, r24
                uart_putchar(c, stream);
     5f8:	b8 01       	movw	r22, r16
     5fa:	a3 df       	rcall	.-186    	; 0x542 <uart_putchar>
                rxp = b;
     5fc:	86 ed       	ldi	r24, 0xD6	; 214
     5fe:	91 e0       	ldi	r25, 0x01	; 1
     600:	90 93 27 02 	sts	0x0227, r25	; 0x800227 <rxp.2118+0x1>
     604:	80 93 26 02 	sts	0x0226, r24	; 0x800226 <rxp.2118>
                break;
     608:	9c c0       	rjmp	.+312    	; 0x742 <uart_getchar+0x1c2>
            }
            else if (c == '\t') {
     60a:	89 30       	cpi	r24, 0x09	; 9
     60c:	39 f0       	breq	.+14     	; 0x61c <uart_getchar+0x9c>
                c = ' ';
            }

            if ((c >= (uint8_t)' ' && c <= (uint8_t)'\x7e') ||
     60e:	90 ee       	ldi	r25, 0xE0	; 224
     610:	98 0f       	add	r25, r24
     612:	9f 35       	cpi	r25, 0x5F	; 95
     614:	20 f0       	brcs	.+8      	; 0x61e <uart_getchar+0x9e>
     616:	80 3a       	cpi	r24, 0xA0	; 160
     618:	a8 f0       	brcs	.+42     	; 0x644 <uart_getchar+0xc4>
     61a:	01 c0       	rjmp	.+2      	; 0x61e <uart_getchar+0x9e>
                uart_putchar(c, stream);
                rxp = b;
                break;
            }
            else if (c == '\t') {
                c = ' ';
     61c:	80 e2       	ldi	r24, 0x20	; 32
            }

            if ((c >= (uint8_t)' ' && c <= (uint8_t)'\x7e') ||
                    c >= (uint8_t)'\xa0') {
                if (cp == b + RX_BUFSIZE - 1) {
     61e:	f5 e2       	ldi	r31, 0x25	; 37
     620:	8f 16       	cp	r8, r31
     622:	f2 e0       	ldi	r31, 0x02	; 2
     624:	9f 06       	cpc	r9, r31
     626:	21 f4       	brne	.+8      	; 0x630 <uart_getchar+0xb0>
                    uart_putchar('\a', stream);
     628:	b8 01       	movw	r22, r16
     62a:	87 e0       	ldi	r24, 0x07	; 7
     62c:	8a df       	rcall	.-236    	; 0x542 <uart_putchar>
     62e:	d2 cf       	rjmp	.-92     	; 0x5d4 <uart_getchar+0x54>
                }
                else {
                    *cp++ = c;
     630:	74 01       	movw	r14, r8
     632:	9f ef       	ldi	r25, 0xFF	; 255
     634:	e9 1a       	sub	r14, r25
     636:	f9 0a       	sbc	r15, r25
     638:	f4 01       	movw	r30, r8
                    uart_putchar(c, stream);
     63a:	80 83       	st	Z, r24
     63c:	b8 01       	movw	r22, r16
     63e:	81 df       	rcall	.-254    	; 0x542 <uart_putchar>
                    c >= (uint8_t)'\xa0') {
                if (cp == b + RX_BUFSIZE - 1) {
                    uart_putchar('\a', stream);
                }
                else {
                    *cp++ = c;
     640:	47 01       	movw	r8, r14
     642:	c8 cf       	rjmp	.-112    	; 0x5d4 <uart_getchar+0x54>
                }

                continue;
            }

            switch (c) {
     644:	82 31       	cpi	r24, 0x12	; 18
     646:	b9 f1       	breq	.+110    	; 0x6b6 <uart_getchar+0x136>
     648:	30 f4       	brcc	.+12     	; 0x656 <uart_getchar+0xd6>
     64a:	83 30       	cpi	r24, 0x03	; 3
     64c:	09 f4       	brne	.+2      	; 0x650 <uart_getchar+0xd0>
     64e:	92 c0       	rjmp	.+292    	; 0x774 <uart_getchar+0x1f4>
     650:	88 30       	cpi	r24, 0x08	; 8
     652:	e9 f0       	breq	.+58     	; 0x68e <uart_getchar+0x10e>
     654:	bf cf       	rjmp	.-130    	; 0x5d4 <uart_getchar+0x54>
     656:	87 31       	cpi	r24, 0x17	; 23
     658:	29 f0       	breq	.+10     	; 0x664 <uart_getchar+0xe4>
     65a:	8f 37       	cpi	r24, 0x7F	; 127
     65c:	c1 f0       	breq	.+48     	; 0x68e <uart_getchar+0x10e>
     65e:	85 31       	cpi	r24, 0x15	; 21
     660:	79 f0       	breq	.+30     	; 0x680 <uart_getchar+0x100>
     662:	b8 cf       	rjmp	.-144    	; 0x5d4 <uart_getchar+0x54>
                }

                break;

            case 'w' & 0x1f:
                while (cp > b && cp[-1] != ' ') {
     664:	f6 ed       	ldi	r31, 0xD6	; 214
     666:	8f 16       	cp	r8, r31
     668:	f1 e0       	ldi	r31, 0x01	; 1
     66a:	9f 06       	cpc	r9, r31
     66c:	09 f0       	breq	.+2      	; 0x670 <uart_getchar+0xf0>
     66e:	08 f4       	brcc	.+2      	; 0x672 <uart_getchar+0xf2>
     670:	b1 cf       	rjmp	.-158    	; 0x5d4 <uart_getchar+0x54>
     672:	f4 01       	movw	r30, r8
     674:	31 97       	sbiw	r30, 0x01	; 1
     676:	80 81       	ld	r24, Z
     678:	80 32       	cpi	r24, 0x20	; 32
     67a:	09 f0       	breq	.+2      	; 0x67e <uart_getchar+0xfe>
     67c:	4a c0       	rjmp	.+148    	; 0x712 <uart_getchar+0x192>
     67e:	aa cf       	rjmp	.-172    	; 0x5d4 <uart_getchar+0x54>
                }

                break;

            case 'u' & 0x1f:
                while (cp > b) {
     680:	86 ed       	ldi	r24, 0xD6	; 214
     682:	88 16       	cp	r8, r24
     684:	81 e0       	ldi	r24, 0x01	; 1
     686:	98 06       	cpc	r9, r24
     688:	09 f0       	breq	.+2      	; 0x68c <uart_getchar+0x10c>
     68a:	70 f5       	brcc	.+92     	; 0x6e8 <uart_getchar+0x168>
     68c:	a3 cf       	rjmp	.-186    	; 0x5d4 <uart_getchar+0x54>
            case 'c' & 0x1f:
                return -1;

            case '\b':
            case '\x7f':
                if (cp > b) {
     68e:	96 ed       	ldi	r25, 0xD6	; 214
     690:	89 16       	cp	r8, r25
     692:	91 e0       	ldi	r25, 0x01	; 1
     694:	99 06       	cpc	r9, r25
     696:	09 f0       	breq	.+2      	; 0x69a <uart_getchar+0x11a>
     698:	08 f4       	brcc	.+2      	; 0x69c <uart_getchar+0x11c>
                    uart_putchar('\b', stream);
     69a:	9c cf       	rjmp	.-200    	; 0x5d4 <uart_getchar+0x54>
     69c:	b8 01       	movw	r22, r16
     69e:	88 e0       	ldi	r24, 0x08	; 8
                    uart_putchar(' ', stream);
     6a0:	50 df       	rcall	.-352    	; 0x542 <uart_putchar>
     6a2:	b8 01       	movw	r22, r16
     6a4:	80 e2       	ldi	r24, 0x20	; 32
                    uart_putchar('\b', stream);
     6a6:	4d df       	rcall	.-358    	; 0x542 <uart_putchar>
     6a8:	b8 01       	movw	r22, r16
     6aa:	88 e0       	ldi	r24, 0x08	; 8
     6ac:	4a df       	rcall	.-364    	; 0x542 <uart_putchar>
                    cp--;
     6ae:	e1 e0       	ldi	r30, 0x01	; 1
     6b0:	8e 1a       	sub	r8, r30
     6b2:	91 08       	sbc	r9, r1
                }

                break;

            case 'r' & 0x1f:
                uart_putchar('\r', stream);
     6b4:	8f cf       	rjmp	.-226    	; 0x5d4 <uart_getchar+0x54>
     6b6:	b8 01       	movw	r22, r16
     6b8:	8d e0       	ldi	r24, 0x0D	; 13
     6ba:	43 df       	rcall	.-378    	; 0x542 <uart_putchar>

                for (cp2 = b; cp2 < cp; cp2++) {
     6bc:	f6 ed       	ldi	r31, 0xD6	; 214
     6be:	8f 16       	cp	r8, r31
     6c0:	f1 e0       	ldi	r31, 0x01	; 1
     6c2:	9f 06       	cpc	r9, r31
     6c4:	09 f0       	breq	.+2      	; 0x6c8 <uart_getchar+0x148>
     6c6:	08 f4       	brcc	.+2      	; 0x6ca <uart_getchar+0x14a>
     6c8:	85 cf       	rjmp	.-246    	; 0x5d4 <uart_getchar+0x54>
     6ca:	0f 2e       	mov	r0, r31
     6cc:	f6 ed       	ldi	r31, 0xD6	; 214
     6ce:	ef 2e       	mov	r14, r31
     6d0:	f1 e0       	ldi	r31, 0x01	; 1
     6d2:	ff 2e       	mov	r15, r31
                    uart_putchar(*cp2, stream);
     6d4:	f0 2d       	mov	r31, r0
     6d6:	b8 01       	movw	r22, r16
     6d8:	f7 01       	movw	r30, r14
     6da:	81 91       	ld	r24, Z+
     6dc:	7f 01       	movw	r14, r30
                break;

            case 'r' & 0x1f:
                uart_putchar('\r', stream);

                for (cp2 = b; cp2 < cp; cp2++) {
     6de:	31 df       	rcall	.-414    	; 0x542 <uart_putchar>
     6e0:	8e 14       	cp	r8, r14
     6e2:	9f 04       	cpc	r9, r15

                break;

            case 'u' & 0x1f:
                while (cp > b) {
                    uart_putchar('\b', stream);
     6e4:	c1 f7       	brne	.-16     	; 0x6d6 <uart_getchar+0x156>
     6e6:	76 cf       	rjmp	.-276    	; 0x5d4 <uart_getchar+0x54>
     6e8:	b8 01       	movw	r22, r16
                    uart_putchar(' ', stream);
     6ea:	88 e0       	ldi	r24, 0x08	; 8
     6ec:	2a df       	rcall	.-428    	; 0x542 <uart_putchar>
     6ee:	b8 01       	movw	r22, r16
     6f0:	80 e2       	ldi	r24, 0x20	; 32
                    uart_putchar('\b', stream);
     6f2:	27 df       	rcall	.-434    	; 0x542 <uart_putchar>
     6f4:	b8 01       	movw	r22, r16
     6f6:	88 e0       	ldi	r24, 0x08	; 8
     6f8:	24 df       	rcall	.-440    	; 0x542 <uart_putchar>
                    cp--;
     6fa:	f1 e0       	ldi	r31, 0x01	; 1
     6fc:	8f 1a       	sub	r8, r31
     6fe:	91 08       	sbc	r9, r1
                }

                break;

            case 'u' & 0x1f:
                while (cp > b) {
     700:	86 ed       	ldi	r24, 0xD6	; 214
     702:	88 16       	cp	r8, r24
     704:	81 e0       	ldi	r24, 0x01	; 1
     706:	98 06       	cpc	r9, r24
     708:	79 f7       	brne	.-34     	; 0x6e8 <uart_getchar+0x168>
     70a:	f3 01       	movw	r30, r6
     70c:	31 96       	adiw	r30, 0x01	; 1
     70e:	4f 01       	movw	r8, r30
     710:	61 cf       	rjmp	.-318    	; 0x5d4 <uart_getchar+0x54>
     712:	74 01       	movw	r14, r8

                break;

            case 'w' & 0x1f:
                while (cp > b && cp[-1] != ' ') {
                    uart_putchar('\b', stream);
     714:	f1 e0       	ldi	r31, 0x01	; 1
     716:	ef 1a       	sub	r14, r31
     718:	f1 08       	sbc	r15, r1
     71a:	b8 01       	movw	r22, r16
                    uart_putchar(' ', stream);
     71c:	88 e0       	ldi	r24, 0x08	; 8
     71e:	11 df       	rcall	.-478    	; 0x542 <uart_putchar>
     720:	b8 01       	movw	r22, r16
     722:	80 e2       	ldi	r24, 0x20	; 32
                    uart_putchar('\b', stream);
     724:	0e df       	rcall	.-484    	; 0x542 <uart_putchar>
     726:	b8 01       	movw	r22, r16
     728:	88 e0       	ldi	r24, 0x08	; 8
     72a:	0b df       	rcall	.-490    	; 0x542 <uart_putchar>
                    cp--;
     72c:	47 01       	movw	r8, r14
                }

                break;

            case 'w' & 0x1f:
                while (cp > b && cp[-1] != ' ') {
     72e:	ae 14       	cp	r10, r14
     730:	bf 04       	cpc	r11, r15
     732:	09 f4       	brne	.+2      	; 0x736 <uart_getchar+0x1b6>
     734:	4f cf       	rjmp	.-354    	; 0x5d4 <uart_getchar+0x54>
     736:	f7 01       	movw	r30, r14
     738:	82 91       	ld	r24, -Z
     73a:	7f 01       	movw	r14, r30
     73c:	80 32       	cpi	r24, 0x20	; 32
     73e:	69 f7       	brne	.-38     	; 0x71a <uart_getchar+0x19a>
     740:	49 cf       	rjmp	.-366    	; 0x5d4 <uart_getchar+0x54>

                break;
            }
        }

    c = *rxp++;
     742:	e0 91 26 02 	lds	r30, 0x0226	; 0x800226 <rxp.2118>
     746:	f0 91 27 02 	lds	r31, 0x0227	; 0x800227 <rxp.2118+0x1>
     74a:	cf 01       	movw	r24, r30
     74c:	01 96       	adiw	r24, 0x01	; 1
     74e:	90 93 27 02 	sts	0x0227, r25	; 0x800227 <rxp.2118+0x1>
     752:	80 93 26 02 	sts	0x0226, r24	; 0x800226 <rxp.2118>
     756:	80 81       	ld	r24, Z

    if (c == '\n') {
     758:	8a 30       	cpi	r24, 0x0A	; 10
     75a:	21 f4       	brne	.+8      	; 0x764 <uart_getchar+0x1e4>
        rxp = 0;
     75c:	10 92 27 02 	sts	0x0227, r1	; 0x800227 <rxp.2118+0x1>
     760:	10 92 26 02 	sts	0x0226, r1	; 0x800226 <rxp.2118>
    }

    return c;
     764:	90 e0       	ldi	r25, 0x00	; 0
     766:	08 c0       	rjmp	.+16     	; 0x778 <uart_getchar+0x1f8>
    if (rxp == 0)
        for (cp = b;;) {
            loop_until_bit_is_set(UCSR0A, RXC0);

            if (UCSR0A & _BV(FE0)) {
                return _FDEV_EOF;
     768:	8e ef       	ldi	r24, 0xFE	; 254
     76a:	9f ef       	ldi	r25, 0xFF	; 255
     76c:	05 c0       	rjmp	.+10     	; 0x778 <uart_getchar+0x1f8>
            }

            if (UCSR0A & _BV(DOR0)) {
                return _FDEV_ERR;
     76e:	8f ef       	ldi	r24, 0xFF	; 255
     770:	9f ef       	ldi	r25, 0xFF	; 255
     772:	02 c0       	rjmp	.+4      	; 0x778 <uart_getchar+0x1f8>
                continue;
            }

            switch (c) {
            case 'c' & 0x1f:
                return -1;
     774:	8f ef       	ldi	r24, 0xFF	; 255
     776:	9f ef       	ldi	r25, 0xFF	; 255
    if (c == '\n') {
        rxp = 0;
    }

    return c;
}
     778:	df 91       	pop	r29
     77a:	cf 91       	pop	r28
     77c:	1f 91       	pop	r17
     77e:	0f 91       	pop	r16
     780:	ff 90       	pop	r15
     782:	ef 90       	pop	r14
     784:	df 90       	pop	r13
     786:	cf 90       	pop	r12
     788:	bf 90       	pop	r11
     78a:	af 90       	pop	r10
     78c:	9f 90       	pop	r9
     78e:	8f 90       	pop	r8
     790:	7f 90       	pop	r7
     792:	6f 90       	pop	r6
     794:	08 95       	ret

00000796 <uart_init>:
void uart_init(void) {
#if F_CPU < 2000000UL && defined(U2X)
    UCSRA = _BV(U2X);             /* improve baud rate error by using 2x clk */
    UBRRL = (F_CPU / (8UL * UART_BAUD)) - 1;
#else
    UBRR0H = (uint8_t) (MYUBRR >> 8);
     796:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__DATA_REGION_ORIGIN__+0x65>
    UBRR0L = (uint8_t) MYUBRR;
     79a:	80 e1       	ldi	r24, 0x10	; 16
     79c:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__DATA_REGION_ORIGIN__+0x64>
#endif
    UCSR0B = (1 << RXEN0) | (1 << TXEN0); /* tx/rx enable */
     7a0:	88 e1       	ldi	r24, 0x18	; 24
     7a2:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__DATA_REGION_ORIGIN__+0x61>
    UCSR0C = (3 << UCSZ00);
     7a6:	86 e0       	ldi	r24, 0x06	; 6
     7a8:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__DATA_REGION_ORIGIN__+0x62>
    stdout = stdin = &usart0_str;
     7ac:	e0 e4       	ldi	r30, 0x40	; 64
     7ae:	f2 e0       	ldi	r31, 0x02	; 2
     7b0:	8e e0       	ldi	r24, 0x0E	; 14
     7b2:	91 e0       	ldi	r25, 0x01	; 1
     7b4:	91 83       	std	Z+1, r25	; 0x01
     7b6:	80 83       	st	Z, r24
     7b8:	93 83       	std	Z+3, r25	; 0x03
     7ba:	82 83       	std	Z+2, r24	; 0x02
     7bc:	08 95       	ret

000007be <board_init>:
		port_pin_flags_t flags)
{
	/* Select direction and initial pin state */
	if (flags & IOPORT_DIR_OUTPUT) {
		if (flags & IOPORT_INIT_HIGH) {
			*((uint8_t *)port + 2) |= pin_mask;
     7be:	95 b1       	in	r25, 0x05	; 5
			*((uint8_t *)port + 2) &= ~pin_mask;
		}

		*((uint8_t *)port + 1) |= pin_mask;
	} else {
		*((uint8_t *)port + 1) &= ~pin_mask;
     7c0:	84 b1       	in	r24, 0x04	; 4
     7c2:	80 62       	ori	r24, 0x20	; 32
     7c4:	8f 77       	andi	r24, 0x7F	; 127
     7c6:	84 b9       	out	0x04, r24	; 4
		if (flags & IOPORT_PULL_UP) {
			*((uint8_t *)port + 2) |= pin_mask;
     7c8:	89 2f       	mov	r24, r25
     7ca:	80 6a       	ori	r24, 0xA0	; 160
     7cc:	85 b9       	out	0x05, r24	; 5
     7ce:	08 95       	ret

000007d0 <__portable_avr_delay_cycles>:
 *
 * @{
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
     7d0:	04 c0       	rjmp	.+8      	; 0x7da <__portable_avr_delay_cycles+0xa>
	while (n) {
		barrier();
		n--;
     7d2:	61 50       	subi	r22, 0x01	; 1
     7d4:	71 09       	sbc	r23, r1
     7d6:	81 09       	sbc	r24, r1
     7d8:	91 09       	sbc	r25, r1
 * @{
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
	while (n) {
     7da:	61 15       	cp	r22, r1
     7dc:	71 05       	cpc	r23, r1
     7de:	81 05       	cpc	r24, r1
     7e0:	91 05       	cpc	r25, r1
     7e2:	b9 f7       	brne	.-18     	; 0x7d2 <__portable_avr_delay_cycles+0x2>
     7e4:	08 95       	ret

000007e6 <print_all_values>:

    else
        while (1);
}

void print_all_values(void) {
     7e6:	8f 92       	push	r8
     7e8:	9f 92       	push	r9
     7ea:	af 92       	push	r10
     7ec:	bf 92       	push	r11
     7ee:	cf 92       	push	r12
     7f0:	df 92       	push	r13
     7f2:	ef 92       	push	r14
     7f4:	ff 92       	push	r15
     7f6:	0f 93       	push	r16
     7f8:	1f 93       	push	r17
     7fa:	cf 93       	push	r28
     7fc:	df 93       	push	r29
     7fe:	00 d0       	rcall	.+0      	; 0x800 <print_all_values+0x1a>
     800:	00 d0       	rcall	.+0      	; 0x802 <print_all_values+0x1c>
     802:	00 d0       	rcall	.+0      	; 0x804 <print_all_values+0x1e>
     804:	cd b7       	in	r28, 0x3d	; 61
     806:	de b7       	in	r29, 0x3e	; 62
    char str[6];
    int32_t temp = bmp280_read_temperature();
     808:	7e dd       	rcall	.-1284   	; 0x306 <bmp280_read_temperature>
     80a:	6b 01       	movw	r12, r22
     80c:	7c 01       	movw	r14, r24
    snprintf(str, sizeof(str), "%ld.%ld", (temp - temp % 100) / 100, temp % 100);
     80e:	0f 2e       	mov	r0, r31
     810:	f4 e6       	ldi	r31, 0x64	; 100
     812:	8f 2e       	mov	r8, r31
     814:	91 2c       	mov	r9, r1
     816:	a1 2c       	mov	r10, r1
     818:	b1 2c       	mov	r11, r1
     81a:	f0 2d       	mov	r31, r0
     81c:	a5 01       	movw	r20, r10
     81e:	94 01       	movw	r18, r8
     820:	77 d0       	rcall	.+238    	; 0x910 <__divmodsi4>
     822:	9f 93       	push	r25
     824:	8f 93       	push	r24
     826:	7f 93       	push	r23
     828:	6f 93       	push	r22
     82a:	a7 01       	movw	r20, r14
     82c:	96 01       	movw	r18, r12
     82e:	26 1b       	sub	r18, r22
     830:	37 0b       	sbc	r19, r23
     832:	48 0b       	sbc	r20, r24
     834:	59 0b       	sbc	r21, r25
     836:	ca 01       	movw	r24, r20
     838:	b9 01       	movw	r22, r18
     83a:	a5 01       	movw	r20, r10
     83c:	94 01       	movw	r18, r8
     83e:	68 d0       	rcall	.+208    	; 0x910 <__divmodsi4>
     840:	5f 93       	push	r21
     842:	4f 93       	push	r20
     844:	3f 93       	push	r19
     846:	2f 93       	push	r18
     848:	85 e6       	ldi	r24, 0x65	; 101
     84a:	91 e0       	ldi	r25, 0x01	; 1
     84c:	9f 93       	push	r25
     84e:	8f 93       	push	r24
     850:	1f 92       	push	r1
     852:	86 e0       	ldi	r24, 0x06	; 6
     854:	8f 93       	push	r24
     856:	8e 01       	movw	r16, r28
     858:	0f 5f       	subi	r16, 0xFF	; 255
     85a:	1f 4f       	sbci	r17, 0xFF	; 255
     85c:	1f 93       	push	r17
     85e:	0f 93       	push	r16
     860:	29 d1       	rcall	.+594    	; 0xab4 <snprintf>
    printf("Temperature: %s\r\n", str);
     862:	1f 93       	push	r17
     864:	0f 93       	push	r16
     866:	8d e6       	ldi	r24, 0x6D	; 109
     868:	91 e0       	ldi	r25, 0x01	; 1
     86a:	9f 93       	push	r25
     86c:	8f 93       	push	r24
     86e:	df d0       	rcall	.+446    	; 0xa2e <printf>
}
     870:	0f b6       	in	r0, 0x3f	; 63
     872:	f8 94       	cli
     874:	de bf       	out	0x3e, r29	; 62
     876:	0f be       	out	0x3f, r0	; 63
     878:	cd bf       	out	0x3d, r28	; 61
     87a:	26 96       	adiw	r28, 0x06	; 6
     87c:	0f b6       	in	r0, 0x3f	; 63
     87e:	f8 94       	cli
     880:	de bf       	out	0x3e, r29	; 62
     882:	0f be       	out	0x3f, r0	; 63
     884:	cd bf       	out	0x3d, r28	; 61
     886:	df 91       	pop	r29
     888:	cf 91       	pop	r28
     88a:	1f 91       	pop	r17
     88c:	0f 91       	pop	r16
     88e:	ff 90       	pop	r15
     890:	ef 90       	pop	r14
     892:	df 90       	pop	r13
     894:	cf 90       	pop	r12
     896:	bf 90       	pop	r11
     898:	af 90       	pop	r10
     89a:	9f 90       	pop	r9
     89c:	8f 90       	pop	r8
     89e:	08 95       	ret

000008a0 <main>:
// Print all temp, pressure, altitude and humidity values
void print_all_values(void);

int main (void) {
    /* Insert system clock initialization code here (sysclk_init()). */
    board_init();
     8a0:	8e df       	rcall	.-228    	; 0x7be <board_init>

    ioport_init();
    uart_init();
     8a2:	79 df       	rcall	.-270    	; 0x796 <uart_init>

    // Sensors initialization
    spi_init();
     8a4:	fb dd       	rcall	.-1034   	; 0x49c <spi_init>

    printf("----- Default testing -----\r\n");
     8a6:	8f e7       	ldi	r24, 0x7F	; 127
     8a8:	91 e0       	ldi	r25, 0x01	; 1
     8aa:	d4 d0       	rcall	.+424    	; 0xa54 <puts>
    uint8_t sensor_id = read8(BMP280_REGISTER_CHIPID);
     8ac:	80 ed       	ldi	r24, 0xD0	; 208
     8ae:	0a dc       	rcall	.-2028   	; 0xc4 <read8>
     8b0:	c8 2f       	mov	r28, r24
     8b2:	1f 92       	push	r1
    printf("Sensor ID: 0x%x\r\n", sensor_id);
     8b4:	8f 93       	push	r24
     8b6:	8c e1       	ldi	r24, 0x1C	; 28
     8b8:	91 e0       	ldi	r25, 0x01	; 1
     8ba:	9f 93       	push	r25
     8bc:	8f 93       	push	r24
     8be:	b7 d0       	rcall	.+366    	; 0xa2e <printf>
     8c0:	0f 90       	pop	r0

    if (sensor_id == BMP280_CHIPID) {
     8c2:	0f 90       	pop	r0
     8c4:	0f 90       	pop	r0
     8c6:	0f 90       	pop	r0
     8c8:	c8 35       	cpi	r28, 0x58	; 88
     8ca:	91 f4       	brne	.+36     	; 0x8f0 <main+0x50>
        int ret = bmp280_init();
     8cc:	c7 dc       	rcall	.-1650   	; 0x25c <bmp280_init>
     8ce:	01 97       	sbiw	r24, 0x01	; 1

        if (ret == BMP280_INIT_NO_ERR) {
     8d0:	21 f4       	brne	.+8      	; 0x8da <main+0x3a>
            printf("Sensor Initialized\r\n");
     8d2:	8c e9       	ldi	r24, 0x9C	; 156
     8d4:	91 e0       	ldi	r25, 0x01	; 1
     8d6:	be d0       	rcall	.+380    	; 0xa54 <puts>
     8d8:	04 c0       	rjmp	.+8      	; 0x8e2 <main+0x42>
        }
        else {
            printf("Sensor initialization failed!\r\n");
     8da:	80 eb       	ldi	r24, 0xB0	; 176
     8dc:	91 e0       	ldi	r25, 0x01	; 1
     8de:	ba d0       	rcall	.+372    	; 0xa54 <puts>
     8e0:	ff cf       	rjmp	.-2      	; 0x8e0 <main+0x40>

            while (1);
        }

        while (1) {
            print_all_values();
     8e2:	81 df       	rcall	.-254    	; 0x7e6 <print_all_values>
     8e4:	6b e6       	ldi	r22, 0x6B	; 107
            delay_ms(10000);
     8e6:	7e e6       	ldi	r23, 0x6E	; 110
     8e8:	89 e1       	ldi	r24, 0x19	; 25
     8ea:	90 e0       	ldi	r25, 0x00	; 0
     8ec:	71 df       	rcall	.-286    	; 0x7d0 <__portable_avr_delay_cycles>
     8ee:	f9 cf       	rjmp	.-14     	; 0x8e2 <main+0x42>
     8f0:	ff cf       	rjmp	.-2      	; 0x8f0 <main+0x50>

000008f2 <__mulsi3>:
     8f2:	db 01       	movw	r26, r22
     8f4:	8f 93       	push	r24
     8f6:	9f 93       	push	r25
     8f8:	27 d0       	rcall	.+78     	; 0x948 <__muluhisi3>
     8fa:	bf 91       	pop	r27
     8fc:	af 91       	pop	r26
     8fe:	a2 9f       	mul	r26, r18
     900:	80 0d       	add	r24, r0
     902:	91 1d       	adc	r25, r1
     904:	a3 9f       	mul	r26, r19
     906:	90 0d       	add	r25, r0
     908:	b2 9f       	mul	r27, r18
     90a:	90 0d       	add	r25, r0
     90c:	11 24       	eor	r1, r1
     90e:	08 95       	ret

00000910 <__divmodsi4>:
     910:	05 2e       	mov	r0, r21
     912:	97 fb       	bst	r25, 7
     914:	16 f4       	brtc	.+4      	; 0x91a <__divmodsi4+0xa>
     916:	00 94       	com	r0
     918:	0f d0       	rcall	.+30     	; 0x938 <__negsi2>
     91a:	57 fd       	sbrc	r21, 7
     91c:	05 d0       	rcall	.+10     	; 0x928 <__divmodsi4_neg2>
     91e:	24 d0       	rcall	.+72     	; 0x968 <__udivmodsi4>
     920:	07 fc       	sbrc	r0, 7
     922:	02 d0       	rcall	.+4      	; 0x928 <__divmodsi4_neg2>
     924:	46 f4       	brtc	.+16     	; 0x936 <__divmodsi4_exit>
     926:	08 c0       	rjmp	.+16     	; 0x938 <__negsi2>

00000928 <__divmodsi4_neg2>:
     928:	50 95       	com	r21
     92a:	40 95       	com	r20
     92c:	30 95       	com	r19
     92e:	21 95       	neg	r18
     930:	3f 4f       	sbci	r19, 0xFF	; 255
     932:	4f 4f       	sbci	r20, 0xFF	; 255
     934:	5f 4f       	sbci	r21, 0xFF	; 255

00000936 <__divmodsi4_exit>:
     936:	08 95       	ret

00000938 <__negsi2>:
     938:	90 95       	com	r25
     93a:	80 95       	com	r24
     93c:	70 95       	com	r23
     93e:	61 95       	neg	r22
     940:	7f 4f       	sbci	r23, 0xFF	; 255
     942:	8f 4f       	sbci	r24, 0xFF	; 255
     944:	9f 4f       	sbci	r25, 0xFF	; 255
     946:	08 95       	ret

00000948 <__muluhisi3>:
     948:	31 d0       	rcall	.+98     	; 0x9ac <__umulhisi3>
     94a:	a5 9f       	mul	r26, r21
     94c:	90 0d       	add	r25, r0
     94e:	b4 9f       	mul	r27, r20
     950:	90 0d       	add	r25, r0
     952:	a4 9f       	mul	r26, r20
     954:	80 0d       	add	r24, r0
     956:	91 1d       	adc	r25, r1
     958:	11 24       	eor	r1, r1
     95a:	08 95       	ret

0000095c <__mulshisi3>:
     95c:	b7 ff       	sbrs	r27, 7
     95e:	f4 cf       	rjmp	.-24     	; 0x948 <__muluhisi3>

00000960 <__mulohisi3>:
     960:	f3 df       	rcall	.-26     	; 0x948 <__muluhisi3>
     962:	82 1b       	sub	r24, r18
     964:	93 0b       	sbc	r25, r19
     966:	08 95       	ret

00000968 <__udivmodsi4>:
     968:	a1 e2       	ldi	r26, 0x21	; 33
     96a:	1a 2e       	mov	r1, r26
     96c:	aa 1b       	sub	r26, r26
     96e:	bb 1b       	sub	r27, r27
     970:	fd 01       	movw	r30, r26
     972:	0d c0       	rjmp	.+26     	; 0x98e <__udivmodsi4_ep>

00000974 <__udivmodsi4_loop>:
     974:	aa 1f       	adc	r26, r26
     976:	bb 1f       	adc	r27, r27
     978:	ee 1f       	adc	r30, r30
     97a:	ff 1f       	adc	r31, r31
     97c:	a2 17       	cp	r26, r18
     97e:	b3 07       	cpc	r27, r19
     980:	e4 07       	cpc	r30, r20
     982:	f5 07       	cpc	r31, r21
     984:	20 f0       	brcs	.+8      	; 0x98e <__udivmodsi4_ep>
     986:	a2 1b       	sub	r26, r18
     988:	b3 0b       	sbc	r27, r19
     98a:	e4 0b       	sbc	r30, r20
     98c:	f5 0b       	sbc	r31, r21

0000098e <__udivmodsi4_ep>:
     98e:	66 1f       	adc	r22, r22
     990:	77 1f       	adc	r23, r23
     992:	88 1f       	adc	r24, r24
     994:	99 1f       	adc	r25, r25
     996:	1a 94       	dec	r1
     998:	69 f7       	brne	.-38     	; 0x974 <__udivmodsi4_loop>
     99a:	60 95       	com	r22
     99c:	70 95       	com	r23
     99e:	80 95       	com	r24
     9a0:	90 95       	com	r25
     9a2:	9b 01       	movw	r18, r22
     9a4:	ac 01       	movw	r20, r24
     9a6:	bd 01       	movw	r22, r26
     9a8:	cf 01       	movw	r24, r30
     9aa:	08 95       	ret

000009ac <__umulhisi3>:
     9ac:	a2 9f       	mul	r26, r18
     9ae:	b0 01       	movw	r22, r0
     9b0:	b3 9f       	mul	r27, r19
     9b2:	c0 01       	movw	r24, r0
     9b4:	a3 9f       	mul	r26, r19
     9b6:	70 0d       	add	r23, r0
     9b8:	81 1d       	adc	r24, r1
     9ba:	11 24       	eor	r1, r1
     9bc:	91 1d       	adc	r25, r1
     9be:	b2 9f       	mul	r27, r18
     9c0:	70 0d       	add	r23, r0
     9c2:	81 1d       	adc	r24, r1
     9c4:	11 24       	eor	r1, r1
     9c6:	91 1d       	adc	r25, r1
     9c8:	08 95       	ret

000009ca <fwrite>:
     9ca:	a0 e0       	ldi	r26, 0x00	; 0
     9cc:	b0 e0       	ldi	r27, 0x00	; 0
     9ce:	ea ee       	ldi	r30, 0xEA	; 234
     9d0:	f4 e0       	ldi	r31, 0x04	; 4
     9d2:	25 c3       	rjmp	.+1610   	; 0x101e <__prologue_saves__+0xc>
     9d4:	5b 01       	movw	r10, r22
     9d6:	4a 01       	movw	r8, r20
     9d8:	79 01       	movw	r14, r18
     9da:	d9 01       	movw	r26, r18
     9dc:	13 96       	adiw	r26, 0x03	; 3
     9de:	2c 91       	ld	r18, X
     9e0:	21 ff       	sbrs	r18, 1
     9e2:	1d c0       	rjmp	.+58     	; 0xa1e <fwrite+0x54>
     9e4:	c0 e0       	ldi	r28, 0x00	; 0
     9e6:	d0 e0       	ldi	r29, 0x00	; 0
     9e8:	c8 15       	cp	r28, r8
     9ea:	d9 05       	cpc	r29, r9
     9ec:	d9 f0       	breq	.+54     	; 0xa24 <fwrite+0x5a>
     9ee:	8c 01       	movw	r16, r24
     9f0:	6c 01       	movw	r12, r24
     9f2:	ca 0c       	add	r12, r10
     9f4:	db 1c       	adc	r13, r11
     9f6:	c8 01       	movw	r24, r16
     9f8:	0c 15       	cp	r16, r12
     9fa:	1d 05       	cpc	r17, r13
     9fc:	71 f0       	breq	.+28     	; 0xa1a <fwrite+0x50>
     9fe:	0f 5f       	subi	r16, 0xFF	; 255
     a00:	1f 4f       	sbci	r17, 0xFF	; 255
     a02:	d7 01       	movw	r26, r14
     a04:	18 96       	adiw	r26, 0x08	; 8
     a06:	ed 91       	ld	r30, X+
     a08:	fc 91       	ld	r31, X
     a0a:	19 97       	sbiw	r26, 0x09	; 9
     a0c:	b7 01       	movw	r22, r14
     a0e:	dc 01       	movw	r26, r24
     a10:	8c 91       	ld	r24, X
     a12:	09 95       	icall
     a14:	89 2b       	or	r24, r25
     a16:	79 f3       	breq	.-34     	; 0x9f6 <fwrite+0x2c>
     a18:	05 c0       	rjmp	.+10     	; 0xa24 <fwrite+0x5a>
     a1a:	21 96       	adiw	r28, 0x01	; 1
     a1c:	e5 cf       	rjmp	.-54     	; 0x9e8 <fwrite+0x1e>
     a1e:	80 e0       	ldi	r24, 0x00	; 0
     a20:	90 e0       	ldi	r25, 0x00	; 0
     a22:	01 c0       	rjmp	.+2      	; 0xa26 <fwrite+0x5c>
     a24:	ce 01       	movw	r24, r28
     a26:	cd b7       	in	r28, 0x3d	; 61
     a28:	de b7       	in	r29, 0x3e	; 62
     a2a:	ec e0       	ldi	r30, 0x0C	; 12
     a2c:	14 c3       	rjmp	.+1576   	; 0x1056 <__epilogue_restores__+0xc>

00000a2e <printf>:
     a2e:	a0 e0       	ldi	r26, 0x00	; 0
     a30:	b0 e0       	ldi	r27, 0x00	; 0
     a32:	ec e1       	ldi	r30, 0x1C	; 28
     a34:	f5 e0       	ldi	r31, 0x05	; 5
     a36:	fd c2       	rjmp	.+1530   	; 0x1032 <__prologue_saves__+0x20>
     a38:	ae 01       	movw	r20, r28
     a3a:	4b 5f       	subi	r20, 0xFB	; 251
     a3c:	5f 4f       	sbci	r21, 0xFF	; 255
     a3e:	fa 01       	movw	r30, r20
     a40:	61 91       	ld	r22, Z+
     a42:	71 91       	ld	r23, Z+
     a44:	af 01       	movw	r20, r30
     a46:	80 91 42 02 	lds	r24, 0x0242	; 0x800242 <__iob+0x2>
     a4a:	90 91 43 02 	lds	r25, 0x0243	; 0x800243 <__iob+0x3>
     a4e:	5f d0       	rcall	.+190    	; 0xb0e <vfprintf>
     a50:	e2 e0       	ldi	r30, 0x02	; 2
     a52:	0b c3       	rjmp	.+1558   	; 0x106a <__epilogue_restores__+0x20>

00000a54 <puts>:
     a54:	0f 93       	push	r16
     a56:	1f 93       	push	r17
     a58:	cf 93       	push	r28
     a5a:	df 93       	push	r29
     a5c:	e0 91 42 02 	lds	r30, 0x0242	; 0x800242 <__iob+0x2>
     a60:	f0 91 43 02 	lds	r31, 0x0243	; 0x800243 <__iob+0x3>
     a64:	23 81       	ldd	r18, Z+3	; 0x03
     a66:	21 ff       	sbrs	r18, 1
     a68:	1b c0       	rjmp	.+54     	; 0xaa0 <puts+0x4c>
     a6a:	8c 01       	movw	r16, r24
     a6c:	d0 e0       	ldi	r29, 0x00	; 0
     a6e:	c0 e0       	ldi	r28, 0x00	; 0
     a70:	f8 01       	movw	r30, r16
     a72:	81 91       	ld	r24, Z+
     a74:	8f 01       	movw	r16, r30
     a76:	60 91 42 02 	lds	r22, 0x0242	; 0x800242 <__iob+0x2>
     a7a:	70 91 43 02 	lds	r23, 0x0243	; 0x800243 <__iob+0x3>
     a7e:	db 01       	movw	r26, r22
     a80:	18 96       	adiw	r26, 0x08	; 8
     a82:	ed 91       	ld	r30, X+
     a84:	fc 91       	ld	r31, X
     a86:	19 97       	sbiw	r26, 0x09	; 9
     a88:	88 23       	and	r24, r24
     a8a:	31 f0       	breq	.+12     	; 0xa98 <puts+0x44>
     a8c:	09 95       	icall
     a8e:	89 2b       	or	r24, r25
     a90:	79 f3       	breq	.-34     	; 0xa70 <puts+0x1c>
     a92:	df ef       	ldi	r29, 0xFF	; 255
     a94:	cf ef       	ldi	r28, 0xFF	; 255
     a96:	ec cf       	rjmp	.-40     	; 0xa70 <puts+0x1c>
     a98:	8a e0       	ldi	r24, 0x0A	; 10
     a9a:	09 95       	icall
     a9c:	89 2b       	or	r24, r25
     a9e:	19 f0       	breq	.+6      	; 0xaa6 <puts+0x52>
     aa0:	8f ef       	ldi	r24, 0xFF	; 255
     aa2:	9f ef       	ldi	r25, 0xFF	; 255
     aa4:	02 c0       	rjmp	.+4      	; 0xaaa <puts+0x56>
     aa6:	8d 2f       	mov	r24, r29
     aa8:	9c 2f       	mov	r25, r28
     aaa:	df 91       	pop	r29
     aac:	cf 91       	pop	r28
     aae:	1f 91       	pop	r17
     ab0:	0f 91       	pop	r16
     ab2:	08 95       	ret

00000ab4 <snprintf>:
     ab4:	ae e0       	ldi	r26, 0x0E	; 14
     ab6:	b0 e0       	ldi	r27, 0x00	; 0
     ab8:	ef e5       	ldi	r30, 0x5F	; 95
     aba:	f5 e0       	ldi	r31, 0x05	; 5
     abc:	b8 c2       	rjmp	.+1392   	; 0x102e <__prologue_saves__+0x1c>
     abe:	0d 89       	ldd	r16, Y+21	; 0x15
     ac0:	1e 89       	ldd	r17, Y+22	; 0x16
     ac2:	8f 89       	ldd	r24, Y+23	; 0x17
     ac4:	98 8d       	ldd	r25, Y+24	; 0x18
     ac6:	26 e0       	ldi	r18, 0x06	; 6
     ac8:	2c 83       	std	Y+4, r18	; 0x04
     aca:	1a 83       	std	Y+2, r17	; 0x02
     acc:	09 83       	std	Y+1, r16	; 0x01
     ace:	97 ff       	sbrs	r25, 7
     ad0:	02 c0       	rjmp	.+4      	; 0xad6 <snprintf+0x22>
     ad2:	80 e0       	ldi	r24, 0x00	; 0
     ad4:	90 e8       	ldi	r25, 0x80	; 128
     ad6:	01 97       	sbiw	r24, 0x01	; 1
     ad8:	9e 83       	std	Y+6, r25	; 0x06
     ada:	8d 83       	std	Y+5, r24	; 0x05
     adc:	ae 01       	movw	r20, r28
     ade:	45 5e       	subi	r20, 0xE5	; 229
     ae0:	5f 4f       	sbci	r21, 0xFF	; 255
     ae2:	69 8d       	ldd	r22, Y+25	; 0x19
     ae4:	7a 8d       	ldd	r23, Y+26	; 0x1a
     ae6:	ce 01       	movw	r24, r28
     ae8:	01 96       	adiw	r24, 0x01	; 1
     aea:	11 d0       	rcall	.+34     	; 0xb0e <vfprintf>
     aec:	4d 81       	ldd	r20, Y+5	; 0x05
     aee:	5e 81       	ldd	r21, Y+6	; 0x06
     af0:	57 fd       	sbrc	r21, 7
     af2:	0a c0       	rjmp	.+20     	; 0xb08 <snprintf+0x54>
     af4:	2f 81       	ldd	r18, Y+7	; 0x07
     af6:	38 85       	ldd	r19, Y+8	; 0x08
     af8:	42 17       	cp	r20, r18
     afa:	53 07       	cpc	r21, r19
     afc:	0c f4       	brge	.+2      	; 0xb00 <snprintf+0x4c>
     afe:	9a 01       	movw	r18, r20
     b00:	f8 01       	movw	r30, r16
     b02:	e2 0f       	add	r30, r18
     b04:	f3 1f       	adc	r31, r19
     b06:	10 82       	st	Z, r1
     b08:	2e 96       	adiw	r28, 0x0e	; 14
     b0a:	e4 e0       	ldi	r30, 0x04	; 4
     b0c:	ac c2       	rjmp	.+1368   	; 0x1066 <__epilogue_restores__+0x1c>

00000b0e <vfprintf>:
     b0e:	ab e0       	ldi	r26, 0x0B	; 11
     b10:	b0 e0       	ldi	r27, 0x00	; 0
     b12:	ec e8       	ldi	r30, 0x8C	; 140
     b14:	f5 e0       	ldi	r31, 0x05	; 5
     b16:	7d c2       	rjmp	.+1274   	; 0x1012 <__prologue_saves__>
     b18:	6c 01       	movw	r12, r24
     b1a:	7b 01       	movw	r14, r22
     b1c:	8a 01       	movw	r16, r20
     b1e:	fc 01       	movw	r30, r24
     b20:	17 82       	std	Z+7, r1	; 0x07
     b22:	16 82       	std	Z+6, r1	; 0x06
     b24:	83 81       	ldd	r24, Z+3	; 0x03
     b26:	81 ff       	sbrs	r24, 1
     b28:	bf c1       	rjmp	.+894    	; 0xea8 <vfprintf+0x39a>
     b2a:	ce 01       	movw	r24, r28
     b2c:	01 96       	adiw	r24, 0x01	; 1
     b2e:	3c 01       	movw	r6, r24
     b30:	f6 01       	movw	r30, r12
     b32:	93 81       	ldd	r25, Z+3	; 0x03
     b34:	f7 01       	movw	r30, r14
     b36:	93 fd       	sbrc	r25, 3
     b38:	85 91       	lpm	r24, Z+
     b3a:	93 ff       	sbrs	r25, 3
     b3c:	81 91       	ld	r24, Z+
     b3e:	7f 01       	movw	r14, r30
     b40:	88 23       	and	r24, r24
     b42:	09 f4       	brne	.+2      	; 0xb46 <vfprintf+0x38>
     b44:	ad c1       	rjmp	.+858    	; 0xea0 <vfprintf+0x392>
     b46:	85 32       	cpi	r24, 0x25	; 37
     b48:	39 f4       	brne	.+14     	; 0xb58 <vfprintf+0x4a>
     b4a:	93 fd       	sbrc	r25, 3
     b4c:	85 91       	lpm	r24, Z+
     b4e:	93 ff       	sbrs	r25, 3
     b50:	81 91       	ld	r24, Z+
     b52:	7f 01       	movw	r14, r30
     b54:	85 32       	cpi	r24, 0x25	; 37
     b56:	21 f4       	brne	.+8      	; 0xb60 <vfprintf+0x52>
     b58:	b6 01       	movw	r22, r12
     b5a:	90 e0       	ldi	r25, 0x00	; 0
     b5c:	c0 d1       	rcall	.+896    	; 0xede <fputc>
     b5e:	e8 cf       	rjmp	.-48     	; 0xb30 <vfprintf+0x22>
     b60:	91 2c       	mov	r9, r1
     b62:	21 2c       	mov	r2, r1
     b64:	31 2c       	mov	r3, r1
     b66:	ff e1       	ldi	r31, 0x1F	; 31
     b68:	f3 15       	cp	r31, r3
     b6a:	d8 f0       	brcs	.+54     	; 0xba2 <vfprintf+0x94>
     b6c:	8b 32       	cpi	r24, 0x2B	; 43
     b6e:	79 f0       	breq	.+30     	; 0xb8e <vfprintf+0x80>
     b70:	38 f4       	brcc	.+14     	; 0xb80 <vfprintf+0x72>
     b72:	80 32       	cpi	r24, 0x20	; 32
     b74:	79 f0       	breq	.+30     	; 0xb94 <vfprintf+0x86>
     b76:	83 32       	cpi	r24, 0x23	; 35
     b78:	a1 f4       	brne	.+40     	; 0xba2 <vfprintf+0x94>
     b7a:	23 2d       	mov	r18, r3
     b7c:	20 61       	ori	r18, 0x10	; 16
     b7e:	1d c0       	rjmp	.+58     	; 0xbba <vfprintf+0xac>
     b80:	8d 32       	cpi	r24, 0x2D	; 45
     b82:	61 f0       	breq	.+24     	; 0xb9c <vfprintf+0x8e>
     b84:	80 33       	cpi	r24, 0x30	; 48
     b86:	69 f4       	brne	.+26     	; 0xba2 <vfprintf+0x94>
     b88:	23 2d       	mov	r18, r3
     b8a:	21 60       	ori	r18, 0x01	; 1
     b8c:	16 c0       	rjmp	.+44     	; 0xbba <vfprintf+0xac>
     b8e:	83 2d       	mov	r24, r3
     b90:	82 60       	ori	r24, 0x02	; 2
     b92:	38 2e       	mov	r3, r24
     b94:	e3 2d       	mov	r30, r3
     b96:	e4 60       	ori	r30, 0x04	; 4
     b98:	3e 2e       	mov	r3, r30
     b9a:	2a c0       	rjmp	.+84     	; 0xbf0 <vfprintf+0xe2>
     b9c:	f3 2d       	mov	r31, r3
     b9e:	f8 60       	ori	r31, 0x08	; 8
     ba0:	1d c0       	rjmp	.+58     	; 0xbdc <vfprintf+0xce>
     ba2:	37 fc       	sbrc	r3, 7
     ba4:	2d c0       	rjmp	.+90     	; 0xc00 <vfprintf+0xf2>
     ba6:	20 ed       	ldi	r18, 0xD0	; 208
     ba8:	28 0f       	add	r18, r24
     baa:	2a 30       	cpi	r18, 0x0A	; 10
     bac:	40 f0       	brcs	.+16     	; 0xbbe <vfprintf+0xb0>
     bae:	8e 32       	cpi	r24, 0x2E	; 46
     bb0:	b9 f4       	brne	.+46     	; 0xbe0 <vfprintf+0xd2>
     bb2:	36 fc       	sbrc	r3, 6
     bb4:	75 c1       	rjmp	.+746    	; 0xea0 <vfprintf+0x392>
     bb6:	23 2d       	mov	r18, r3
     bb8:	20 64       	ori	r18, 0x40	; 64
     bba:	32 2e       	mov	r3, r18
     bbc:	19 c0       	rjmp	.+50     	; 0xbf0 <vfprintf+0xe2>
     bbe:	36 fe       	sbrs	r3, 6
     bc0:	06 c0       	rjmp	.+12     	; 0xbce <vfprintf+0xc0>
     bc2:	8a e0       	ldi	r24, 0x0A	; 10
     bc4:	98 9e       	mul	r9, r24
     bc6:	20 0d       	add	r18, r0
     bc8:	11 24       	eor	r1, r1
     bca:	92 2e       	mov	r9, r18
     bcc:	11 c0       	rjmp	.+34     	; 0xbf0 <vfprintf+0xe2>
     bce:	ea e0       	ldi	r30, 0x0A	; 10
     bd0:	2e 9e       	mul	r2, r30
     bd2:	20 0d       	add	r18, r0
     bd4:	11 24       	eor	r1, r1
     bd6:	22 2e       	mov	r2, r18
     bd8:	f3 2d       	mov	r31, r3
     bda:	f0 62       	ori	r31, 0x20	; 32
     bdc:	3f 2e       	mov	r3, r31
     bde:	08 c0       	rjmp	.+16     	; 0xbf0 <vfprintf+0xe2>
     be0:	8c 36       	cpi	r24, 0x6C	; 108
     be2:	21 f4       	brne	.+8      	; 0xbec <vfprintf+0xde>
     be4:	83 2d       	mov	r24, r3
     be6:	80 68       	ori	r24, 0x80	; 128
     be8:	38 2e       	mov	r3, r24
     bea:	02 c0       	rjmp	.+4      	; 0xbf0 <vfprintf+0xe2>
     bec:	88 36       	cpi	r24, 0x68	; 104
     bee:	41 f4       	brne	.+16     	; 0xc00 <vfprintf+0xf2>
     bf0:	f7 01       	movw	r30, r14
     bf2:	93 fd       	sbrc	r25, 3
     bf4:	85 91       	lpm	r24, Z+
     bf6:	93 ff       	sbrs	r25, 3
     bf8:	81 91       	ld	r24, Z+
     bfa:	7f 01       	movw	r14, r30
     bfc:	81 11       	cpse	r24, r1
     bfe:	b3 cf       	rjmp	.-154    	; 0xb66 <vfprintf+0x58>
     c00:	98 2f       	mov	r25, r24
     c02:	9f 7d       	andi	r25, 0xDF	; 223
     c04:	95 54       	subi	r25, 0x45	; 69
     c06:	93 30       	cpi	r25, 0x03	; 3
     c08:	28 f4       	brcc	.+10     	; 0xc14 <vfprintf+0x106>
     c0a:	0c 5f       	subi	r16, 0xFC	; 252
     c0c:	1f 4f       	sbci	r17, 0xFF	; 255
     c0e:	9f e3       	ldi	r25, 0x3F	; 63
     c10:	99 83       	std	Y+1, r25	; 0x01
     c12:	0d c0       	rjmp	.+26     	; 0xc2e <vfprintf+0x120>
     c14:	83 36       	cpi	r24, 0x63	; 99
     c16:	31 f0       	breq	.+12     	; 0xc24 <vfprintf+0x116>
     c18:	83 37       	cpi	r24, 0x73	; 115
     c1a:	71 f0       	breq	.+28     	; 0xc38 <vfprintf+0x12a>
     c1c:	83 35       	cpi	r24, 0x53	; 83
     c1e:	09 f0       	breq	.+2      	; 0xc22 <vfprintf+0x114>
     c20:	55 c0       	rjmp	.+170    	; 0xccc <vfprintf+0x1be>
     c22:	20 c0       	rjmp	.+64     	; 0xc64 <vfprintf+0x156>
     c24:	f8 01       	movw	r30, r16
     c26:	80 81       	ld	r24, Z
     c28:	89 83       	std	Y+1, r24	; 0x01
     c2a:	0e 5f       	subi	r16, 0xFE	; 254
     c2c:	1f 4f       	sbci	r17, 0xFF	; 255
     c2e:	88 24       	eor	r8, r8
     c30:	83 94       	inc	r8
     c32:	91 2c       	mov	r9, r1
     c34:	53 01       	movw	r10, r6
     c36:	12 c0       	rjmp	.+36     	; 0xc5c <vfprintf+0x14e>
     c38:	28 01       	movw	r4, r16
     c3a:	f2 e0       	ldi	r31, 0x02	; 2
     c3c:	4f 0e       	add	r4, r31
     c3e:	51 1c       	adc	r5, r1
     c40:	f8 01       	movw	r30, r16
     c42:	a0 80       	ld	r10, Z
     c44:	b1 80       	ldd	r11, Z+1	; 0x01
     c46:	36 fe       	sbrs	r3, 6
     c48:	03 c0       	rjmp	.+6      	; 0xc50 <vfprintf+0x142>
     c4a:	69 2d       	mov	r22, r9
     c4c:	70 e0       	ldi	r23, 0x00	; 0
     c4e:	02 c0       	rjmp	.+4      	; 0xc54 <vfprintf+0x146>
     c50:	6f ef       	ldi	r22, 0xFF	; 255
     c52:	7f ef       	ldi	r23, 0xFF	; 255
     c54:	c5 01       	movw	r24, r10
     c56:	38 d1       	rcall	.+624    	; 0xec8 <strnlen>
     c58:	4c 01       	movw	r8, r24
     c5a:	82 01       	movw	r16, r4
     c5c:	f3 2d       	mov	r31, r3
     c5e:	ff 77       	andi	r31, 0x7F	; 127
     c60:	3f 2e       	mov	r3, r31
     c62:	15 c0       	rjmp	.+42     	; 0xc8e <vfprintf+0x180>
     c64:	28 01       	movw	r4, r16
     c66:	22 e0       	ldi	r18, 0x02	; 2
     c68:	42 0e       	add	r4, r18
     c6a:	51 1c       	adc	r5, r1
     c6c:	f8 01       	movw	r30, r16
     c6e:	a0 80       	ld	r10, Z
     c70:	b1 80       	ldd	r11, Z+1	; 0x01
     c72:	36 fe       	sbrs	r3, 6
     c74:	03 c0       	rjmp	.+6      	; 0xc7c <vfprintf+0x16e>
     c76:	69 2d       	mov	r22, r9
     c78:	70 e0       	ldi	r23, 0x00	; 0
     c7a:	02 c0       	rjmp	.+4      	; 0xc80 <vfprintf+0x172>
     c7c:	6f ef       	ldi	r22, 0xFF	; 255
     c7e:	7f ef       	ldi	r23, 0xFF	; 255
     c80:	c5 01       	movw	r24, r10
     c82:	17 d1       	rcall	.+558    	; 0xeb2 <strnlen_P>
     c84:	4c 01       	movw	r8, r24
     c86:	f3 2d       	mov	r31, r3
     c88:	f0 68       	ori	r31, 0x80	; 128
     c8a:	3f 2e       	mov	r3, r31
     c8c:	82 01       	movw	r16, r4
     c8e:	33 fc       	sbrc	r3, 3
     c90:	19 c0       	rjmp	.+50     	; 0xcc4 <vfprintf+0x1b6>
     c92:	82 2d       	mov	r24, r2
     c94:	90 e0       	ldi	r25, 0x00	; 0
     c96:	88 16       	cp	r8, r24
     c98:	99 06       	cpc	r9, r25
     c9a:	a0 f4       	brcc	.+40     	; 0xcc4 <vfprintf+0x1b6>
     c9c:	b6 01       	movw	r22, r12
     c9e:	80 e2       	ldi	r24, 0x20	; 32
     ca0:	90 e0       	ldi	r25, 0x00	; 0
     ca2:	1d d1       	rcall	.+570    	; 0xede <fputc>
     ca4:	2a 94       	dec	r2
     ca6:	f5 cf       	rjmp	.-22     	; 0xc92 <vfprintf+0x184>
     ca8:	f5 01       	movw	r30, r10
     caa:	37 fc       	sbrc	r3, 7
     cac:	85 91       	lpm	r24, Z+
     cae:	37 fe       	sbrs	r3, 7
     cb0:	81 91       	ld	r24, Z+
     cb2:	5f 01       	movw	r10, r30
     cb4:	b6 01       	movw	r22, r12
     cb6:	90 e0       	ldi	r25, 0x00	; 0
     cb8:	12 d1       	rcall	.+548    	; 0xede <fputc>
     cba:	21 10       	cpse	r2, r1
     cbc:	2a 94       	dec	r2
     cbe:	21 e0       	ldi	r18, 0x01	; 1
     cc0:	82 1a       	sub	r8, r18
     cc2:	91 08       	sbc	r9, r1
     cc4:	81 14       	cp	r8, r1
     cc6:	91 04       	cpc	r9, r1
     cc8:	79 f7       	brne	.-34     	; 0xca8 <vfprintf+0x19a>
     cca:	e1 c0       	rjmp	.+450    	; 0xe8e <vfprintf+0x380>
     ccc:	84 36       	cpi	r24, 0x64	; 100
     cce:	11 f0       	breq	.+4      	; 0xcd4 <vfprintf+0x1c6>
     cd0:	89 36       	cpi	r24, 0x69	; 105
     cd2:	39 f5       	brne	.+78     	; 0xd22 <vfprintf+0x214>
     cd4:	f8 01       	movw	r30, r16
     cd6:	37 fe       	sbrs	r3, 7
     cd8:	07 c0       	rjmp	.+14     	; 0xce8 <vfprintf+0x1da>
     cda:	60 81       	ld	r22, Z
     cdc:	71 81       	ldd	r23, Z+1	; 0x01
     cde:	82 81       	ldd	r24, Z+2	; 0x02
     ce0:	93 81       	ldd	r25, Z+3	; 0x03
     ce2:	0c 5f       	subi	r16, 0xFC	; 252
     ce4:	1f 4f       	sbci	r17, 0xFF	; 255
     ce6:	08 c0       	rjmp	.+16     	; 0xcf8 <vfprintf+0x1ea>
     ce8:	60 81       	ld	r22, Z
     cea:	71 81       	ldd	r23, Z+1	; 0x01
     cec:	07 2e       	mov	r0, r23
     cee:	00 0c       	add	r0, r0
     cf0:	88 0b       	sbc	r24, r24
     cf2:	99 0b       	sbc	r25, r25
     cf4:	0e 5f       	subi	r16, 0xFE	; 254
     cf6:	1f 4f       	sbci	r17, 0xFF	; 255
     cf8:	f3 2d       	mov	r31, r3
     cfa:	ff 76       	andi	r31, 0x6F	; 111
     cfc:	3f 2e       	mov	r3, r31
     cfe:	97 ff       	sbrs	r25, 7
     d00:	09 c0       	rjmp	.+18     	; 0xd14 <vfprintf+0x206>
     d02:	90 95       	com	r25
     d04:	80 95       	com	r24
     d06:	70 95       	com	r23
     d08:	61 95       	neg	r22
     d0a:	7f 4f       	sbci	r23, 0xFF	; 255
     d0c:	8f 4f       	sbci	r24, 0xFF	; 255
     d0e:	9f 4f       	sbci	r25, 0xFF	; 255
     d10:	f0 68       	ori	r31, 0x80	; 128
     d12:	3f 2e       	mov	r3, r31
     d14:	2a e0       	ldi	r18, 0x0A	; 10
     d16:	30 e0       	ldi	r19, 0x00	; 0
     d18:	a3 01       	movw	r20, r6
     d1a:	1d d1       	rcall	.+570    	; 0xf56 <__ultoa_invert>
     d1c:	88 2e       	mov	r8, r24
     d1e:	86 18       	sub	r8, r6
     d20:	44 c0       	rjmp	.+136    	; 0xdaa <vfprintf+0x29c>
     d22:	85 37       	cpi	r24, 0x75	; 117
     d24:	31 f4       	brne	.+12     	; 0xd32 <vfprintf+0x224>
     d26:	23 2d       	mov	r18, r3
     d28:	2f 7e       	andi	r18, 0xEF	; 239
     d2a:	b2 2e       	mov	r11, r18
     d2c:	2a e0       	ldi	r18, 0x0A	; 10
     d2e:	30 e0       	ldi	r19, 0x00	; 0
     d30:	25 c0       	rjmp	.+74     	; 0xd7c <vfprintf+0x26e>
     d32:	93 2d       	mov	r25, r3
     d34:	99 7f       	andi	r25, 0xF9	; 249
     d36:	b9 2e       	mov	r11, r25
     d38:	8f 36       	cpi	r24, 0x6F	; 111
     d3a:	c1 f0       	breq	.+48     	; 0xd6c <vfprintf+0x25e>
     d3c:	18 f4       	brcc	.+6      	; 0xd44 <vfprintf+0x236>
     d3e:	88 35       	cpi	r24, 0x58	; 88
     d40:	79 f0       	breq	.+30     	; 0xd60 <vfprintf+0x252>
     d42:	ae c0       	rjmp	.+348    	; 0xea0 <vfprintf+0x392>
     d44:	80 37       	cpi	r24, 0x70	; 112
     d46:	19 f0       	breq	.+6      	; 0xd4e <vfprintf+0x240>
     d48:	88 37       	cpi	r24, 0x78	; 120
     d4a:	21 f0       	breq	.+8      	; 0xd54 <vfprintf+0x246>
     d4c:	a9 c0       	rjmp	.+338    	; 0xea0 <vfprintf+0x392>
     d4e:	e9 2f       	mov	r30, r25
     d50:	e0 61       	ori	r30, 0x10	; 16
     d52:	be 2e       	mov	r11, r30
     d54:	b4 fe       	sbrs	r11, 4
     d56:	0d c0       	rjmp	.+26     	; 0xd72 <vfprintf+0x264>
     d58:	fb 2d       	mov	r31, r11
     d5a:	f4 60       	ori	r31, 0x04	; 4
     d5c:	bf 2e       	mov	r11, r31
     d5e:	09 c0       	rjmp	.+18     	; 0xd72 <vfprintf+0x264>
     d60:	34 fe       	sbrs	r3, 4
     d62:	0a c0       	rjmp	.+20     	; 0xd78 <vfprintf+0x26a>
     d64:	29 2f       	mov	r18, r25
     d66:	26 60       	ori	r18, 0x06	; 6
     d68:	b2 2e       	mov	r11, r18
     d6a:	06 c0       	rjmp	.+12     	; 0xd78 <vfprintf+0x26a>
     d6c:	28 e0       	ldi	r18, 0x08	; 8
     d6e:	30 e0       	ldi	r19, 0x00	; 0
     d70:	05 c0       	rjmp	.+10     	; 0xd7c <vfprintf+0x26e>
     d72:	20 e1       	ldi	r18, 0x10	; 16
     d74:	30 e0       	ldi	r19, 0x00	; 0
     d76:	02 c0       	rjmp	.+4      	; 0xd7c <vfprintf+0x26e>
     d78:	20 e1       	ldi	r18, 0x10	; 16
     d7a:	32 e0       	ldi	r19, 0x02	; 2
     d7c:	f8 01       	movw	r30, r16
     d7e:	b7 fe       	sbrs	r11, 7
     d80:	07 c0       	rjmp	.+14     	; 0xd90 <vfprintf+0x282>
     d82:	60 81       	ld	r22, Z
     d84:	71 81       	ldd	r23, Z+1	; 0x01
     d86:	82 81       	ldd	r24, Z+2	; 0x02
     d88:	93 81       	ldd	r25, Z+3	; 0x03
     d8a:	0c 5f       	subi	r16, 0xFC	; 252
     d8c:	1f 4f       	sbci	r17, 0xFF	; 255
     d8e:	06 c0       	rjmp	.+12     	; 0xd9c <vfprintf+0x28e>
     d90:	60 81       	ld	r22, Z
     d92:	71 81       	ldd	r23, Z+1	; 0x01
     d94:	80 e0       	ldi	r24, 0x00	; 0
     d96:	90 e0       	ldi	r25, 0x00	; 0
     d98:	0e 5f       	subi	r16, 0xFE	; 254
     d9a:	1f 4f       	sbci	r17, 0xFF	; 255
     d9c:	a3 01       	movw	r20, r6
     d9e:	db d0       	rcall	.+438    	; 0xf56 <__ultoa_invert>
     da0:	88 2e       	mov	r8, r24
     da2:	86 18       	sub	r8, r6
     da4:	fb 2d       	mov	r31, r11
     da6:	ff 77       	andi	r31, 0x7F	; 127
     da8:	3f 2e       	mov	r3, r31
     daa:	36 fe       	sbrs	r3, 6
     dac:	0d c0       	rjmp	.+26     	; 0xdc8 <vfprintf+0x2ba>
     dae:	23 2d       	mov	r18, r3
     db0:	2e 7f       	andi	r18, 0xFE	; 254
     db2:	a2 2e       	mov	r10, r18
     db4:	89 14       	cp	r8, r9
     db6:	58 f4       	brcc	.+22     	; 0xdce <vfprintf+0x2c0>
     db8:	34 fe       	sbrs	r3, 4
     dba:	0b c0       	rjmp	.+22     	; 0xdd2 <vfprintf+0x2c4>
     dbc:	32 fc       	sbrc	r3, 2
     dbe:	09 c0       	rjmp	.+18     	; 0xdd2 <vfprintf+0x2c4>
     dc0:	83 2d       	mov	r24, r3
     dc2:	8e 7e       	andi	r24, 0xEE	; 238
     dc4:	a8 2e       	mov	r10, r24
     dc6:	05 c0       	rjmp	.+10     	; 0xdd2 <vfprintf+0x2c4>
     dc8:	b8 2c       	mov	r11, r8
     dca:	a3 2c       	mov	r10, r3
     dcc:	03 c0       	rjmp	.+6      	; 0xdd4 <vfprintf+0x2c6>
     dce:	b8 2c       	mov	r11, r8
     dd0:	01 c0       	rjmp	.+2      	; 0xdd4 <vfprintf+0x2c6>
     dd2:	b9 2c       	mov	r11, r9
     dd4:	a4 fe       	sbrs	r10, 4
     dd6:	0f c0       	rjmp	.+30     	; 0xdf6 <vfprintf+0x2e8>
     dd8:	fe 01       	movw	r30, r28
     dda:	e8 0d       	add	r30, r8
     ddc:	f1 1d       	adc	r31, r1
     dde:	80 81       	ld	r24, Z
     de0:	80 33       	cpi	r24, 0x30	; 48
     de2:	21 f4       	brne	.+8      	; 0xdec <vfprintf+0x2de>
     de4:	9a 2d       	mov	r25, r10
     de6:	99 7e       	andi	r25, 0xE9	; 233
     de8:	a9 2e       	mov	r10, r25
     dea:	09 c0       	rjmp	.+18     	; 0xdfe <vfprintf+0x2f0>
     dec:	a2 fe       	sbrs	r10, 2
     dee:	06 c0       	rjmp	.+12     	; 0xdfc <vfprintf+0x2ee>
     df0:	b3 94       	inc	r11
     df2:	b3 94       	inc	r11
     df4:	04 c0       	rjmp	.+8      	; 0xdfe <vfprintf+0x2f0>
     df6:	8a 2d       	mov	r24, r10
     df8:	86 78       	andi	r24, 0x86	; 134
     dfa:	09 f0       	breq	.+2      	; 0xdfe <vfprintf+0x2f0>
     dfc:	b3 94       	inc	r11
     dfe:	a3 fc       	sbrc	r10, 3
     e00:	10 c0       	rjmp	.+32     	; 0xe22 <vfprintf+0x314>
     e02:	a0 fe       	sbrs	r10, 0
     e04:	06 c0       	rjmp	.+12     	; 0xe12 <vfprintf+0x304>
     e06:	b2 14       	cp	r11, r2
     e08:	80 f4       	brcc	.+32     	; 0xe2a <vfprintf+0x31c>
     e0a:	28 0c       	add	r2, r8
     e0c:	92 2c       	mov	r9, r2
     e0e:	9b 18       	sub	r9, r11
     e10:	0d c0       	rjmp	.+26     	; 0xe2c <vfprintf+0x31e>
     e12:	b2 14       	cp	r11, r2
     e14:	58 f4       	brcc	.+22     	; 0xe2c <vfprintf+0x31e>
     e16:	b6 01       	movw	r22, r12
     e18:	80 e2       	ldi	r24, 0x20	; 32
     e1a:	90 e0       	ldi	r25, 0x00	; 0
     e1c:	60 d0       	rcall	.+192    	; 0xede <fputc>
     e1e:	b3 94       	inc	r11
     e20:	f8 cf       	rjmp	.-16     	; 0xe12 <vfprintf+0x304>
     e22:	b2 14       	cp	r11, r2
     e24:	18 f4       	brcc	.+6      	; 0xe2c <vfprintf+0x31e>
     e26:	2b 18       	sub	r2, r11
     e28:	02 c0       	rjmp	.+4      	; 0xe2e <vfprintf+0x320>
     e2a:	98 2c       	mov	r9, r8
     e2c:	21 2c       	mov	r2, r1
     e2e:	a4 fe       	sbrs	r10, 4
     e30:	0f c0       	rjmp	.+30     	; 0xe50 <vfprintf+0x342>
     e32:	b6 01       	movw	r22, r12
     e34:	80 e3       	ldi	r24, 0x30	; 48
     e36:	90 e0       	ldi	r25, 0x00	; 0
     e38:	52 d0       	rcall	.+164    	; 0xede <fputc>
     e3a:	a2 fe       	sbrs	r10, 2
     e3c:	16 c0       	rjmp	.+44     	; 0xe6a <vfprintf+0x35c>
     e3e:	a1 fc       	sbrc	r10, 1
     e40:	03 c0       	rjmp	.+6      	; 0xe48 <vfprintf+0x33a>
     e42:	88 e7       	ldi	r24, 0x78	; 120
     e44:	90 e0       	ldi	r25, 0x00	; 0
     e46:	02 c0       	rjmp	.+4      	; 0xe4c <vfprintf+0x33e>
     e48:	88 e5       	ldi	r24, 0x58	; 88
     e4a:	90 e0       	ldi	r25, 0x00	; 0
     e4c:	b6 01       	movw	r22, r12
     e4e:	0c c0       	rjmp	.+24     	; 0xe68 <vfprintf+0x35a>
     e50:	8a 2d       	mov	r24, r10
     e52:	86 78       	andi	r24, 0x86	; 134
     e54:	51 f0       	breq	.+20     	; 0xe6a <vfprintf+0x35c>
     e56:	a1 fe       	sbrs	r10, 1
     e58:	02 c0       	rjmp	.+4      	; 0xe5e <vfprintf+0x350>
     e5a:	8b e2       	ldi	r24, 0x2B	; 43
     e5c:	01 c0       	rjmp	.+2      	; 0xe60 <vfprintf+0x352>
     e5e:	80 e2       	ldi	r24, 0x20	; 32
     e60:	a7 fc       	sbrc	r10, 7
     e62:	8d e2       	ldi	r24, 0x2D	; 45
     e64:	b6 01       	movw	r22, r12
     e66:	90 e0       	ldi	r25, 0x00	; 0
     e68:	3a d0       	rcall	.+116    	; 0xede <fputc>
     e6a:	89 14       	cp	r8, r9
     e6c:	30 f4       	brcc	.+12     	; 0xe7a <vfprintf+0x36c>
     e6e:	b6 01       	movw	r22, r12
     e70:	80 e3       	ldi	r24, 0x30	; 48
     e72:	90 e0       	ldi	r25, 0x00	; 0
     e74:	34 d0       	rcall	.+104    	; 0xede <fputc>
     e76:	9a 94       	dec	r9
     e78:	f8 cf       	rjmp	.-16     	; 0xe6a <vfprintf+0x35c>
     e7a:	8a 94       	dec	r8
     e7c:	f3 01       	movw	r30, r6
     e7e:	e8 0d       	add	r30, r8
     e80:	f1 1d       	adc	r31, r1
     e82:	80 81       	ld	r24, Z
     e84:	b6 01       	movw	r22, r12
     e86:	90 e0       	ldi	r25, 0x00	; 0
     e88:	2a d0       	rcall	.+84     	; 0xede <fputc>
     e8a:	81 10       	cpse	r8, r1
     e8c:	f6 cf       	rjmp	.-20     	; 0xe7a <vfprintf+0x36c>
     e8e:	22 20       	and	r2, r2
     e90:	09 f4       	brne	.+2      	; 0xe94 <vfprintf+0x386>
     e92:	4e ce       	rjmp	.-868    	; 0xb30 <vfprintf+0x22>
     e94:	b6 01       	movw	r22, r12
     e96:	80 e2       	ldi	r24, 0x20	; 32
     e98:	90 e0       	ldi	r25, 0x00	; 0
     e9a:	21 d0       	rcall	.+66     	; 0xede <fputc>
     e9c:	2a 94       	dec	r2
     e9e:	f7 cf       	rjmp	.-18     	; 0xe8e <vfprintf+0x380>
     ea0:	f6 01       	movw	r30, r12
     ea2:	86 81       	ldd	r24, Z+6	; 0x06
     ea4:	97 81       	ldd	r25, Z+7	; 0x07
     ea6:	02 c0       	rjmp	.+4      	; 0xeac <vfprintf+0x39e>
     ea8:	8f ef       	ldi	r24, 0xFF	; 255
     eaa:	9f ef       	ldi	r25, 0xFF	; 255
     eac:	2b 96       	adiw	r28, 0x0b	; 11
     eae:	e2 e1       	ldi	r30, 0x12	; 18
     eb0:	cc c0       	rjmp	.+408    	; 0x104a <__epilogue_restores__>

00000eb2 <strnlen_P>:
     eb2:	fc 01       	movw	r30, r24
     eb4:	05 90       	lpm	r0, Z+
     eb6:	61 50       	subi	r22, 0x01	; 1
     eb8:	70 40       	sbci	r23, 0x00	; 0
     eba:	01 10       	cpse	r0, r1
     ebc:	d8 f7       	brcc	.-10     	; 0xeb4 <strnlen_P+0x2>
     ebe:	80 95       	com	r24
     ec0:	90 95       	com	r25
     ec2:	8e 0f       	add	r24, r30
     ec4:	9f 1f       	adc	r25, r31
     ec6:	08 95       	ret

00000ec8 <strnlen>:
     ec8:	fc 01       	movw	r30, r24
     eca:	61 50       	subi	r22, 0x01	; 1
     ecc:	70 40       	sbci	r23, 0x00	; 0
     ece:	01 90       	ld	r0, Z+
     ed0:	01 10       	cpse	r0, r1
     ed2:	d8 f7       	brcc	.-10     	; 0xeca <strnlen+0x2>
     ed4:	80 95       	com	r24
     ed6:	90 95       	com	r25
     ed8:	8e 0f       	add	r24, r30
     eda:	9f 1f       	adc	r25, r31
     edc:	08 95       	ret

00000ede <fputc>:
     ede:	0f 93       	push	r16
     ee0:	1f 93       	push	r17
     ee2:	cf 93       	push	r28
     ee4:	df 93       	push	r29
     ee6:	fb 01       	movw	r30, r22
     ee8:	23 81       	ldd	r18, Z+3	; 0x03
     eea:	21 fd       	sbrc	r18, 1
     eec:	03 c0       	rjmp	.+6      	; 0xef4 <fputc+0x16>
     eee:	8f ef       	ldi	r24, 0xFF	; 255
     ef0:	9f ef       	ldi	r25, 0xFF	; 255
     ef2:	2c c0       	rjmp	.+88     	; 0xf4c <fputc+0x6e>
     ef4:	22 ff       	sbrs	r18, 2
     ef6:	16 c0       	rjmp	.+44     	; 0xf24 <fputc+0x46>
     ef8:	46 81       	ldd	r20, Z+6	; 0x06
     efa:	57 81       	ldd	r21, Z+7	; 0x07
     efc:	24 81       	ldd	r18, Z+4	; 0x04
     efe:	35 81       	ldd	r19, Z+5	; 0x05
     f00:	42 17       	cp	r20, r18
     f02:	53 07       	cpc	r21, r19
     f04:	44 f4       	brge	.+16     	; 0xf16 <fputc+0x38>
     f06:	a0 81       	ld	r26, Z
     f08:	b1 81       	ldd	r27, Z+1	; 0x01
     f0a:	9d 01       	movw	r18, r26
     f0c:	2f 5f       	subi	r18, 0xFF	; 255
     f0e:	3f 4f       	sbci	r19, 0xFF	; 255
     f10:	31 83       	std	Z+1, r19	; 0x01
     f12:	20 83       	st	Z, r18
     f14:	8c 93       	st	X, r24
     f16:	26 81       	ldd	r18, Z+6	; 0x06
     f18:	37 81       	ldd	r19, Z+7	; 0x07
     f1a:	2f 5f       	subi	r18, 0xFF	; 255
     f1c:	3f 4f       	sbci	r19, 0xFF	; 255
     f1e:	37 83       	std	Z+7, r19	; 0x07
     f20:	26 83       	std	Z+6, r18	; 0x06
     f22:	14 c0       	rjmp	.+40     	; 0xf4c <fputc+0x6e>
     f24:	8b 01       	movw	r16, r22
     f26:	ec 01       	movw	r28, r24
     f28:	fb 01       	movw	r30, r22
     f2a:	00 84       	ldd	r0, Z+8	; 0x08
     f2c:	f1 85       	ldd	r31, Z+9	; 0x09
     f2e:	e0 2d       	mov	r30, r0
     f30:	09 95       	icall
     f32:	89 2b       	or	r24, r25
     f34:	e1 f6       	brne	.-72     	; 0xeee <fputc+0x10>
     f36:	d8 01       	movw	r26, r16
     f38:	16 96       	adiw	r26, 0x06	; 6
     f3a:	8d 91       	ld	r24, X+
     f3c:	9c 91       	ld	r25, X
     f3e:	17 97       	sbiw	r26, 0x07	; 7
     f40:	01 96       	adiw	r24, 0x01	; 1
     f42:	17 96       	adiw	r26, 0x07	; 7
     f44:	9c 93       	st	X, r25
     f46:	8e 93       	st	-X, r24
     f48:	16 97       	sbiw	r26, 0x06	; 6
     f4a:	ce 01       	movw	r24, r28
     f4c:	df 91       	pop	r29
     f4e:	cf 91       	pop	r28
     f50:	1f 91       	pop	r17
     f52:	0f 91       	pop	r16
     f54:	08 95       	ret

00000f56 <__ultoa_invert>:
     f56:	fa 01       	movw	r30, r20
     f58:	aa 27       	eor	r26, r26
     f5a:	28 30       	cpi	r18, 0x08	; 8
     f5c:	51 f1       	breq	.+84     	; 0xfb2 <__ultoa_invert+0x5c>
     f5e:	20 31       	cpi	r18, 0x10	; 16
     f60:	81 f1       	breq	.+96     	; 0xfc2 <__ultoa_invert+0x6c>
     f62:	e8 94       	clt
     f64:	6f 93       	push	r22
     f66:	6e 7f       	andi	r22, 0xFE	; 254
     f68:	6e 5f       	subi	r22, 0xFE	; 254
     f6a:	7f 4f       	sbci	r23, 0xFF	; 255
     f6c:	8f 4f       	sbci	r24, 0xFF	; 255
     f6e:	9f 4f       	sbci	r25, 0xFF	; 255
     f70:	af 4f       	sbci	r26, 0xFF	; 255
     f72:	b1 e0       	ldi	r27, 0x01	; 1
     f74:	3e d0       	rcall	.+124    	; 0xff2 <__ultoa_invert+0x9c>
     f76:	b4 e0       	ldi	r27, 0x04	; 4
     f78:	3c d0       	rcall	.+120    	; 0xff2 <__ultoa_invert+0x9c>
     f7a:	67 0f       	add	r22, r23
     f7c:	78 1f       	adc	r23, r24
     f7e:	89 1f       	adc	r24, r25
     f80:	9a 1f       	adc	r25, r26
     f82:	a1 1d       	adc	r26, r1
     f84:	68 0f       	add	r22, r24
     f86:	79 1f       	adc	r23, r25
     f88:	8a 1f       	adc	r24, r26
     f8a:	91 1d       	adc	r25, r1
     f8c:	a1 1d       	adc	r26, r1
     f8e:	6a 0f       	add	r22, r26
     f90:	71 1d       	adc	r23, r1
     f92:	81 1d       	adc	r24, r1
     f94:	91 1d       	adc	r25, r1
     f96:	a1 1d       	adc	r26, r1
     f98:	20 d0       	rcall	.+64     	; 0xfda <__ultoa_invert+0x84>
     f9a:	09 f4       	brne	.+2      	; 0xf9e <__ultoa_invert+0x48>
     f9c:	68 94       	set
     f9e:	3f 91       	pop	r19
     fa0:	2a e0       	ldi	r18, 0x0A	; 10
     fa2:	26 9f       	mul	r18, r22
     fa4:	11 24       	eor	r1, r1
     fa6:	30 19       	sub	r19, r0
     fa8:	30 5d       	subi	r19, 0xD0	; 208
     faa:	31 93       	st	Z+, r19
     fac:	de f6       	brtc	.-74     	; 0xf64 <__ultoa_invert+0xe>
     fae:	cf 01       	movw	r24, r30
     fb0:	08 95       	ret
     fb2:	46 2f       	mov	r20, r22
     fb4:	47 70       	andi	r20, 0x07	; 7
     fb6:	40 5d       	subi	r20, 0xD0	; 208
     fb8:	41 93       	st	Z+, r20
     fba:	b3 e0       	ldi	r27, 0x03	; 3
     fbc:	0f d0       	rcall	.+30     	; 0xfdc <__ultoa_invert+0x86>
     fbe:	c9 f7       	brne	.-14     	; 0xfb2 <__ultoa_invert+0x5c>
     fc0:	f6 cf       	rjmp	.-20     	; 0xfae <__ultoa_invert+0x58>
     fc2:	46 2f       	mov	r20, r22
     fc4:	4f 70       	andi	r20, 0x0F	; 15
     fc6:	40 5d       	subi	r20, 0xD0	; 208
     fc8:	4a 33       	cpi	r20, 0x3A	; 58
     fca:	18 f0       	brcs	.+6      	; 0xfd2 <__ultoa_invert+0x7c>
     fcc:	49 5d       	subi	r20, 0xD9	; 217
     fce:	31 fd       	sbrc	r19, 1
     fd0:	40 52       	subi	r20, 0x20	; 32
     fd2:	41 93       	st	Z+, r20
     fd4:	02 d0       	rcall	.+4      	; 0xfda <__ultoa_invert+0x84>
     fd6:	a9 f7       	brne	.-22     	; 0xfc2 <__ultoa_invert+0x6c>
     fd8:	ea cf       	rjmp	.-44     	; 0xfae <__ultoa_invert+0x58>
     fda:	b4 e0       	ldi	r27, 0x04	; 4
     fdc:	a6 95       	lsr	r26
     fde:	97 95       	ror	r25
     fe0:	87 95       	ror	r24
     fe2:	77 95       	ror	r23
     fe4:	67 95       	ror	r22
     fe6:	ba 95       	dec	r27
     fe8:	c9 f7       	brne	.-14     	; 0xfdc <__ultoa_invert+0x86>
     fea:	00 97       	sbiw	r24, 0x00	; 0
     fec:	61 05       	cpc	r22, r1
     fee:	71 05       	cpc	r23, r1
     ff0:	08 95       	ret
     ff2:	9b 01       	movw	r18, r22
     ff4:	ac 01       	movw	r20, r24
     ff6:	0a 2e       	mov	r0, r26
     ff8:	06 94       	lsr	r0
     ffa:	57 95       	ror	r21
     ffc:	47 95       	ror	r20
     ffe:	37 95       	ror	r19
    1000:	27 95       	ror	r18
    1002:	ba 95       	dec	r27
    1004:	c9 f7       	brne	.-14     	; 0xff8 <__ultoa_invert+0xa2>
    1006:	62 0f       	add	r22, r18
    1008:	73 1f       	adc	r23, r19
    100a:	84 1f       	adc	r24, r20
    100c:	95 1f       	adc	r25, r21
    100e:	a0 1d       	adc	r26, r0
    1010:	08 95       	ret

00001012 <__prologue_saves__>:
    1012:	2f 92       	push	r2
    1014:	3f 92       	push	r3
    1016:	4f 92       	push	r4
    1018:	5f 92       	push	r5
    101a:	6f 92       	push	r6
    101c:	7f 92       	push	r7
    101e:	8f 92       	push	r8
    1020:	9f 92       	push	r9
    1022:	af 92       	push	r10
    1024:	bf 92       	push	r11
    1026:	cf 92       	push	r12
    1028:	df 92       	push	r13
    102a:	ef 92       	push	r14
    102c:	ff 92       	push	r15
    102e:	0f 93       	push	r16
    1030:	1f 93       	push	r17
    1032:	cf 93       	push	r28
    1034:	df 93       	push	r29
    1036:	cd b7       	in	r28, 0x3d	; 61
    1038:	de b7       	in	r29, 0x3e	; 62
    103a:	ca 1b       	sub	r28, r26
    103c:	db 0b       	sbc	r29, r27
    103e:	0f b6       	in	r0, 0x3f	; 63
    1040:	f8 94       	cli
    1042:	de bf       	out	0x3e, r29	; 62
    1044:	0f be       	out	0x3f, r0	; 63
    1046:	cd bf       	out	0x3d, r28	; 61
    1048:	09 94       	ijmp

0000104a <__epilogue_restores__>:
    104a:	2a 88       	ldd	r2, Y+18	; 0x12
    104c:	39 88       	ldd	r3, Y+17	; 0x11
    104e:	48 88       	ldd	r4, Y+16	; 0x10
    1050:	5f 84       	ldd	r5, Y+15	; 0x0f
    1052:	6e 84       	ldd	r6, Y+14	; 0x0e
    1054:	7d 84       	ldd	r7, Y+13	; 0x0d
    1056:	8c 84       	ldd	r8, Y+12	; 0x0c
    1058:	9b 84       	ldd	r9, Y+11	; 0x0b
    105a:	aa 84       	ldd	r10, Y+10	; 0x0a
    105c:	b9 84       	ldd	r11, Y+9	; 0x09
    105e:	c8 84       	ldd	r12, Y+8	; 0x08
    1060:	df 80       	ldd	r13, Y+7	; 0x07
    1062:	ee 80       	ldd	r14, Y+6	; 0x06
    1064:	fd 80       	ldd	r15, Y+5	; 0x05
    1066:	0c 81       	ldd	r16, Y+4	; 0x04
    1068:	1b 81       	ldd	r17, Y+3	; 0x03
    106a:	aa 81       	ldd	r26, Y+2	; 0x02
    106c:	b9 81       	ldd	r27, Y+1	; 0x01
    106e:	ce 0f       	add	r28, r30
    1070:	d1 1d       	adc	r29, r1
    1072:	0f b6       	in	r0, 0x3f	; 63
    1074:	f8 94       	cli
    1076:	de bf       	out	0x3e, r29	; 62
    1078:	0f be       	out	0x3f, r0	; 63
    107a:	cd bf       	out	0x3d, r28	; 61
    107c:	ed 01       	movw	r28, r26
    107e:	08 95       	ret

00001080 <_exit>:
    1080:	f8 94       	cli

00001082 <__stop_program>:
    1082:	ff cf       	rjmp	.-2      	; 0x1082 <__stop_program>
