
bmp280_test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000016c  00800100  00000efa  00000f8e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000efa  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000076  0080026c  0080026c  000010fa  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000010fa  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001158  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000148  00000000  00000000  00001198  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000229a  00000000  00000000  000012e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000f2f  00000000  00000000  0000357a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001f41  00000000  00000000  000044a9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000003c4  00000000  00000000  000063ec  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0001210e  00000000  00000000  000067b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000012e6  00000000  00000000  000188be  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000f8  00000000  00000000  00019ba4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0000139d  00000000  00000000  00019c9c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	33 c0       	rjmp	.+102    	; 0x68 <__ctors_end>
   2:	00 00       	nop
   4:	4c c0       	rjmp	.+152    	; 0x9e <__bad_interrupt>
   6:	00 00       	nop
   8:	4a c0       	rjmp	.+148    	; 0x9e <__bad_interrupt>
   a:	00 00       	nop
   c:	48 c0       	rjmp	.+144    	; 0x9e <__bad_interrupt>
   e:	00 00       	nop
  10:	46 c0       	rjmp	.+140    	; 0x9e <__bad_interrupt>
  12:	00 00       	nop
  14:	44 c0       	rjmp	.+136    	; 0x9e <__bad_interrupt>
  16:	00 00       	nop
  18:	42 c0       	rjmp	.+132    	; 0x9e <__bad_interrupt>
  1a:	00 00       	nop
  1c:	40 c0       	rjmp	.+128    	; 0x9e <__bad_interrupt>
  1e:	00 00       	nop
  20:	3e c0       	rjmp	.+124    	; 0x9e <__bad_interrupt>
  22:	00 00       	nop
  24:	3c c0       	rjmp	.+120    	; 0x9e <__bad_interrupt>
  26:	00 00       	nop
  28:	3a c0       	rjmp	.+116    	; 0x9e <__bad_interrupt>
  2a:	00 00       	nop
  2c:	38 c0       	rjmp	.+112    	; 0x9e <__bad_interrupt>
  2e:	00 00       	nop
  30:	36 c0       	rjmp	.+108    	; 0x9e <__bad_interrupt>
  32:	00 00       	nop
  34:	34 c0       	rjmp	.+104    	; 0x9e <__bad_interrupt>
  36:	00 00       	nop
  38:	32 c0       	rjmp	.+100    	; 0x9e <__bad_interrupt>
  3a:	00 00       	nop
  3c:	30 c0       	rjmp	.+96     	; 0x9e <__bad_interrupt>
  3e:	00 00       	nop
  40:	2e c0       	rjmp	.+92     	; 0x9e <__bad_interrupt>
  42:	00 00       	nop
  44:	2c c0       	rjmp	.+88     	; 0x9e <__bad_interrupt>
  46:	00 00       	nop
  48:	2a c0       	rjmp	.+84     	; 0x9e <__bad_interrupt>
  4a:	00 00       	nop
  4c:	28 c0       	rjmp	.+80     	; 0x9e <__bad_interrupt>
  4e:	00 00       	nop
  50:	26 c0       	rjmp	.+76     	; 0x9e <__bad_interrupt>
  52:	00 00       	nop
  54:	24 c0       	rjmp	.+72     	; 0x9e <__bad_interrupt>
  56:	00 00       	nop
  58:	22 c0       	rjmp	.+68     	; 0x9e <__bad_interrupt>
  5a:	00 00       	nop
  5c:	20 c0       	rjmp	.+64     	; 0x9e <__bad_interrupt>
  5e:	00 00       	nop
  60:	1e c0       	rjmp	.+60     	; 0x9e <__bad_interrupt>
  62:	00 00       	nop
  64:	1c c0       	rjmp	.+56     	; 0x9e <__bad_interrupt>
	...

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	12 e0       	ldi	r17, 0x02	; 2
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ea ef       	ldi	r30, 0xFA	; 250
  7c:	fe e0       	ldi	r31, 0x0E	; 14
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ac 36       	cpi	r26, 0x6C	; 108
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	22 e0       	ldi	r18, 0x02	; 2
  8c:	ac e6       	ldi	r26, 0x6C	; 108
  8e:	b2 e0       	ldi	r27, 0x02	; 2
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a2 3e       	cpi	r26, 0xE2	; 226
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	49 d3       	rcall	.+1682   	; 0x72e <main>
  9c:	2c c7       	rjmp	.+3672   	; 0xef6 <_exit>

0000009e <__bad_interrupt>:
  9e:	b0 cf       	rjmp	.-160    	; 0x0 <__vectors>

000000a0 <__portable_avr_delay_cycles>:
     @param reg the register address to read from
     @returns the 16 bit data value read from the device
*/
int16_t readS16(uint8_t reg) {
    return (int16_t)read16(reg);
}
  a0:	04 c0       	rjmp	.+8      	; 0xaa <__portable_avr_delay_cycles+0xa>
  a2:	61 50       	subi	r22, 0x01	; 1
  a4:	71 09       	sbc	r23, r1
  a6:	81 09       	sbc	r24, r1
  a8:	91 09       	sbc	r25, r1
  aa:	61 15       	cp	r22, r1
  ac:	71 05       	cpc	r23, r1
  ae:	81 05       	cpc	r24, r1
  b0:	91 05       	cpc	r25, r1
  b2:	b9 f7       	brne	.-18     	; 0xa2 <__portable_avr_delay_cycles+0x2>
  b4:	08 95       	ret

000000b6 <spixfer>:
  b6:	8e bd       	out	0x2e, r24	; 46
  b8:	00 00       	nop
  ba:	0d b4       	in	r0, 0x2d	; 45
  bc:	07 fe       	sbrs	r0, 7
  be:	fd cf       	rjmp	.-6      	; 0xba <spixfer+0x4>
  c0:	8e b5       	in	r24, 0x2e	; 46
  c2:	08 95       	ret

000000c4 <read8>:
  c4:	cf 93       	push	r28
  c6:	c8 2f       	mov	r28, r24
  c8:	20 e0       	ldi	r18, 0x00	; 0
  ca:	41 e0       	ldi	r20, 0x01	; 1
  cc:	60 e2       	ldi	r22, 0x20	; 32
  ce:	71 ea       	ldi	r23, 0xA1	; 161
  d0:	87 e0       	ldi	r24, 0x07	; 7
  d2:	90 e0       	ldi	r25, 0x00	; 0
  d4:	57 d1       	rcall	.+686    	; 0x384 <spi_begin_txn>
  d6:	2a 98       	cbi	0x05, 2	; 5
  d8:	8c 2f       	mov	r24, r28
  da:	80 68       	ori	r24, 0x80	; 128
  dc:	ec df       	rcall	.-40     	; 0xb6 <spixfer>
  de:	80 e0       	ldi	r24, 0x00	; 0
  e0:	ea df       	rcall	.-44     	; 0xb6 <spixfer>
  e2:	2a 9a       	sbi	0x05, 2	; 5
  e4:	cf 91       	pop	r28
  e6:	08 95       	ret

000000e8 <read16>:
  e8:	cf 93       	push	r28
  ea:	c8 2f       	mov	r28, r24
  ec:	20 e0       	ldi	r18, 0x00	; 0
  ee:	41 e0       	ldi	r20, 0x01	; 1
  f0:	60 e2       	ldi	r22, 0x20	; 32
  f2:	71 ea       	ldi	r23, 0xA1	; 161
  f4:	87 e0       	ldi	r24, 0x07	; 7
  f6:	90 e0       	ldi	r25, 0x00	; 0
  f8:	45 d1       	rcall	.+650    	; 0x384 <spi_begin_txn>
  fa:	2a 98       	cbi	0x05, 2	; 5
  fc:	8c 2f       	mov	r24, r28
  fe:	80 68       	ori	r24, 0x80	; 128
 100:	da df       	rcall	.-76     	; 0xb6 <spixfer>
 102:	80 e0       	ldi	r24, 0x00	; 0
 104:	d8 df       	rcall	.-80     	; 0xb6 <spixfer>
 106:	c8 2f       	mov	r28, r24
 108:	80 e0       	ldi	r24, 0x00	; 0
 10a:	d5 df       	rcall	.-86     	; 0xb6 <spixfer>
 10c:	2a 9a       	sbi	0x05, 2	; 5
 10e:	2c 2f       	mov	r18, r28
 110:	30 e0       	ldi	r19, 0x00	; 0
 112:	32 2f       	mov	r19, r18
 114:	22 27       	eor	r18, r18
 116:	a9 01       	movw	r20, r18
 118:	48 2b       	or	r20, r24
 11a:	ca 01       	movw	r24, r20
 11c:	cf 91       	pop	r28
 11e:	08 95       	ret

00000120 <read16_LE>:
 120:	e3 df       	rcall	.-58     	; 0xe8 <read16>
 122:	98 27       	eor	r25, r24
 124:	89 27       	eor	r24, r25
 126:	98 27       	eor	r25, r24
 128:	08 95       	ret

0000012a <read_coefficients>:
 12a:	cf 93       	push	r28
 12c:	df 93       	push	r29
 12e:	88 e8       	ldi	r24, 0x88	; 136
 130:	f7 df       	rcall	.-18     	; 0x120 <read16_LE>
 132:	c4 ec       	ldi	r28, 0xC4	; 196
 134:	d2 e0       	ldi	r29, 0x02	; 2
 136:	99 83       	std	Y+1, r25	; 0x01
 138:	88 83       	st	Y, r24
 13a:	8a e8       	ldi	r24, 0x8A	; 138
 13c:	f1 df       	rcall	.-30     	; 0x120 <read16_LE>
 13e:	9b 83       	std	Y+3, r25	; 0x03
 140:	8a 83       	std	Y+2, r24	; 0x02
 142:	8c e8       	ldi	r24, 0x8C	; 140
 144:	ed df       	rcall	.-38     	; 0x120 <read16_LE>
 146:	9d 83       	std	Y+5, r25	; 0x05
 148:	8c 83       	std	Y+4, r24	; 0x04
 14a:	89 81       	ldd	r24, Y+1	; 0x01
 14c:	8f 93       	push	r24
 14e:	88 81       	ld	r24, Y
 150:	8f 93       	push	r24
 152:	87 e7       	ldi	r24, 0x77	; 119
 154:	91 e0       	ldi	r25, 0x01	; 1
 156:	9f 93       	push	r25
 158:	8f 93       	push	r24
 15a:	db d3       	rcall	.+1974   	; 0x912 <printf>
 15c:	8b 81       	ldd	r24, Y+3	; 0x03
 15e:	8f 93       	push	r24
 160:	8a 81       	ldd	r24, Y+2	; 0x02
 162:	8f 93       	push	r24
 164:	8d e9       	ldi	r24, 0x9D	; 157
 166:	91 e0       	ldi	r25, 0x01	; 1
 168:	9f 93       	push	r25
 16a:	8f 93       	push	r24
 16c:	d2 d3       	rcall	.+1956   	; 0x912 <printf>
 16e:	8d 81       	ldd	r24, Y+5	; 0x05
 170:	8f 93       	push	r24
 172:	8c 81       	ldd	r24, Y+4	; 0x04
 174:	8f 93       	push	r24
 176:	81 ec       	ldi	r24, 0xC1	; 193
 178:	91 e0       	ldi	r25, 0x01	; 1
 17a:	9f 93       	push	r25
 17c:	8f 93       	push	r24
 17e:	c9 d3       	rcall	.+1938   	; 0x912 <printf>
 180:	8d b7       	in	r24, 0x3d	; 61
 182:	9e b7       	in	r25, 0x3e	; 62
 184:	0c 96       	adiw	r24, 0x0c	; 12
 186:	0f b6       	in	r0, 0x3f	; 63
 188:	f8 94       	cli
 18a:	9e bf       	out	0x3e, r25	; 62
 18c:	0f be       	out	0x3f, r0	; 63
 18e:	8d bf       	out	0x3d, r24	; 61
 190:	df 91       	pop	r29
 192:	cf 91       	pop	r28
 194:	08 95       	ret

00000196 <bmp280_init>:
 196:	cf 93       	push	r28
 198:	80 ed       	ldi	r24, 0xD0	; 208
 19a:	94 df       	rcall	.-216    	; 0xc4 <read8>
 19c:	c8 2f       	mov	r28, r24
 19e:	1f 92       	push	r1
 1a0:	8f 93       	push	r24
 1a2:	87 ee       	ldi	r24, 0xE7	; 231
 1a4:	91 e0       	ldi	r25, 0x01	; 1
 1a6:	9f 93       	push	r25
 1a8:	8f 93       	push	r24
 1aa:	b3 d3       	rcall	.+1894   	; 0x912 <printf>
 1ac:	0f 90       	pop	r0
 1ae:	0f 90       	pop	r0
 1b0:	0f 90       	pop	r0
 1b2:	0f 90       	pop	r0
 1b4:	c8 35       	cpi	r28, 0x58	; 88
 1b6:	49 f4       	brne	.+18     	; 0x1ca <bmp280_init+0x34>
 1b8:	b8 df       	rcall	.-144    	; 0x12a <read_coefficients>
 1ba:	66 e3       	ldi	r22, 0x36	; 54
 1bc:	72 e8       	ldi	r23, 0x82	; 130
 1be:	80 e0       	ldi	r24, 0x00	; 0
 1c0:	90 e0       	ldi	r25, 0x00	; 0
 1c2:	6e df       	rcall	.-292    	; 0xa0 <__portable_avr_delay_cycles>
 1c4:	81 e0       	ldi	r24, 0x01	; 1
 1c6:	90 e0       	ldi	r25, 0x00	; 0
 1c8:	02 c0       	rjmp	.+4      	; 0x1ce <bmp280_init+0x38>
 1ca:	80 e0       	ldi	r24, 0x00	; 0
 1cc:	90 e0       	ldi	r25, 0x00	; 0
 1ce:	cf 91       	pop	r28
 1d0:	08 95       	ret

000001d2 <read24>:
/*!
     @brief  Reads a 24 bit value
     @param reg the register address to read from
     @returns the 24 bit data value read from the device
*/
uint32_t read24(uint8_t reg) {
 1d2:	cf 92       	push	r12
 1d4:	df 92       	push	r13
 1d6:	ef 92       	push	r14
 1d8:	ff 92       	push	r15
 1da:	cf 93       	push	r28
 1dc:	c8 2f       	mov	r28, r24
    uint32_t value;
    spi_begin_txn(500000, MSBFIRST, SPI_MODE0);
 1de:	20 e0       	ldi	r18, 0x00	; 0
 1e0:	41 e0       	ldi	r20, 0x01	; 1
 1e2:	60 e2       	ldi	r22, 0x20	; 32
 1e4:	71 ea       	ldi	r23, 0xA1	; 161
 1e6:	87 e0       	ldi	r24, 0x07	; 7
 1e8:	90 e0       	ldi	r25, 0x00	; 0
 1ea:	cc d0       	rcall	.+408    	; 0x384 <spi_begin_txn>
		base_add->PORTDATA
			= (base_add->PORTDATA  | arch_ioport_pin_to_mask
					(pin));
	} else {
		base_add->PORTDATA
			= (base_add->PORTDATA  & (~arch_ioport_pin_to_mask
 1ec:	2a 98       	cbi	0x05, 2	; 5

    // SS set to low - select slave
    ioport_set_pin_low(SPI_HARDWARE_SS);

    // read, bit 7 high
    spixfer(reg | 0x80);
 1ee:	8c 2f       	mov	r24, r28
 1f0:	80 68       	ori	r24, 0x80	; 128
 1f2:	61 df       	rcall	.-318    	; 0xb6 <spixfer>
    value = spixfer(0);
 1f4:	80 e0       	ldi	r24, 0x00	; 0
 1f6:	5f df       	rcall	.-322    	; 0xb6 <spixfer>
 1f8:	c8 2e       	mov	r12, r24
 1fa:	d1 2c       	mov	r13, r1
 1fc:	e1 2c       	mov	r14, r1
 1fe:	f1 2c       	mov	r15, r1
 200:	fe 2c       	mov	r15, r14
    value = (value << 8);
 202:	ed 2c       	mov	r14, r13
 204:	dc 2c       	mov	r13, r12
 206:	cc 24       	eor	r12, r12
    value |= spixfer(0);
 208:	80 e0       	ldi	r24, 0x00	; 0
 20a:	55 df       	rcall	.-342    	; 0xb6 <spixfer>
 20c:	c8 2a       	or	r12, r24
 20e:	fe 2c       	mov	r15, r14
    value = (value << 8);
 210:	ed 2c       	mov	r14, r13
 212:	dc 2c       	mov	r13, r12
 214:	cc 24       	eor	r12, r12
    value |= spixfer(0);
 216:	80 e0       	ldi	r24, 0x00	; 0
 218:	4e df       	rcall	.-356    	; 0xb6 <spixfer>
 21a:	2a 9a       	sbi	0x05, 2	; 5
{
	PORT_t *base_add = arch_ioport_port_to_base(pin >> 3);

	if (level) {
		base_add->PORTDATA
			= (base_add->PORTDATA  | arch_ioport_pin_to_mask
 21c:	a7 01       	movw	r20, r14

    // SS set to high - de-select slave
    ioport_set_pin_high(SPI_HARDWARE_SS);
    //spi_end_txn();

    return value;
 21e:	96 01       	movw	r18, r12
 220:	28 2b       	or	r18, r24
 222:	ca 01       	movw	r24, r20
 224:	b9 01       	movw	r22, r18
 226:	cf 91       	pop	r28
}
 228:	ff 90       	pop	r15
 22a:	ef 90       	pop	r14
 22c:	df 90       	pop	r13
 22e:	cf 90       	pop	r12
 230:	08 95       	ret

00000232 <bmp280_read_temperature>:
 232:	8f 92       	push	r8

/*!
     @brief  Returns the temperature from the sensor
     @returns the temperature read from the device in 4 digits (XX.YY = XXYY)
*/
int32_t bmp280_read_temperature(void) {
 234:	9f 92       	push	r9
 236:	af 92       	push	r10
 238:	bf 92       	push	r11
 23a:	cf 92       	push	r12
 23c:	df 92       	push	r13
 23e:	ef 92       	push	r14
 240:	ff 92       	push	r15
 242:	0f 93       	push	r16
 244:	1f 93       	push	r17
    int32_t var1, var2;
    int32_t adc_T = read24(BMP280_REGISTER_TEMPDATA);
 246:	8a ef       	ldi	r24, 0xFA	; 250
 248:	c4 df       	rcall	.-120    	; 0x1d2 <read24>
    adc_T = (adc_T >> 4);

    //printf("adc: %ld\r\n", adc_T);

    // Calibrate the temperature sensor data
    var1 = ((((adc_T >> 3) - ((int32_t)bmp280_calib_data_read.dig_T1 << 1))) *
 24a:	e4 ec       	ldi	r30, 0xC4	; 196
 24c:	f2 e0       	ldi	r31, 0x02	; 2
 24e:	00 81       	ld	r16, Z
 250:	11 81       	ldd	r17, Z+1	; 0x01
 252:	20 e0       	ldi	r18, 0x00	; 0
 254:	30 e0       	ldi	r19, 0x00	; 0
            ((int32_t)bmp280_calib_data_read.dig_T2)) >> 11;

    var2 = (((((adc_T >> 4) - ((int32_t)bmp280_calib_data_read.dig_T1)) * ((adc_T >> 4) - ((
 256:	c7 2e       	mov	r12, r23
 258:	d8 2e       	mov	r13, r24
 25a:	e9 2e       	mov	r14, r25
 25c:	ff 24       	eor	r15, r15
 25e:	e7 fc       	sbrc	r14, 7
 260:	fa 94       	dec	r15
 262:	c0 1a       	sub	r12, r16
 264:	d1 0a       	sbc	r13, r17
 266:	e2 0a       	sbc	r14, r18
 268:	f3 0a       	sbc	r15, r19
                  int32_t)bmp280_calib_data_read.dig_T1))) >>
             12) * ((int32_t)bmp280_calib_data_read.dig_T3)) >> 14;

    //printf("Prev t_fine: %ld\r\n", t_fine);
    t_fine = var1 + var2;
 26a:	dc 01       	movw	r26, r24
 26c:	cb 01       	movw	r24, r22
 26e:	68 94       	set
 270:	16 f8       	bld	r1, 6
 272:	b5 95       	asr	r27
 274:	a7 95       	ror	r26
 276:	97 95       	ror	r25
 278:	87 95       	ror	r24
 27a:	16 94       	lsr	r1
 27c:	d1 f7       	brne	.-12     	; 0x272 <bmp280_read_temperature+0x40>
 27e:	00 0f       	add	r16, r16
 280:	11 1f       	adc	r17, r17
 282:	22 1f       	adc	r18, r18
 284:	33 1f       	adc	r19, r19
 286:	4c 01       	movw	r8, r24
 288:	5d 01       	movw	r10, r26
 28a:	80 1a       	sub	r8, r16
 28c:	91 0a       	sbc	r9, r17
 28e:	a2 0a       	sbc	r10, r18
 290:	b3 0a       	sbc	r11, r19
 292:	a5 01       	movw	r20, r10
 294:	94 01       	movw	r18, r8
 296:	a2 81       	ldd	r26, Z+2	; 0x02
 298:	b3 81       	ldd	r27, Z+3	; 0x03
 29a:	9b d2       	rcall	.+1334   	; 0x7d2 <__mulshisi3>
 29c:	4b 01       	movw	r8, r22
 29e:	5c 01       	movw	r10, r24
 2a0:	07 2e       	mov	r0, r23
 2a2:	7b e0       	ldi	r23, 0x0B	; 11
 2a4:	b5 94       	asr	r11
 2a6:	a7 94       	ror	r10
 2a8:	97 94       	ror	r9
 2aa:	87 94       	ror	r8
 2ac:	7a 95       	dec	r23
 2ae:	d1 f7       	brne	.-12     	; 0x2a4 <bmp280_read_temperature+0x72>
 2b0:	70 2d       	mov	r23, r0
 2b2:	a7 01       	movw	r20, r14
 2b4:	96 01       	movw	r18, r12
 2b6:	c7 01       	movw	r24, r14
 2b8:	b6 01       	movw	r22, r12
 2ba:	56 d2       	rcall	.+1196   	; 0x768 <__mulsi3>
 2bc:	9b 01       	movw	r18, r22
 2be:	ac 01       	movw	r20, r24
 2c0:	01 2e       	mov	r0, r17
 2c2:	1c e0       	ldi	r17, 0x0C	; 12
 2c4:	55 95       	asr	r21
 2c6:	47 95       	ror	r20
 2c8:	37 95       	ror	r19
 2ca:	27 95       	ror	r18
 2cc:	1a 95       	dec	r17
 2ce:	d1 f7       	brne	.-12     	; 0x2c4 <bmp280_read_temperature+0x92>
 2d0:	10 2d       	mov	r17, r0
 2d2:	a4 81       	ldd	r26, Z+4	; 0x04
 2d4:	b5 81       	ldd	r27, Z+5	; 0x05
 2d6:	7d d2       	rcall	.+1274   	; 0x7d2 <__mulshisi3>
 2d8:	dc 01       	movw	r26, r24
 2da:	cb 01       	movw	r24, r22
 2dc:	07 2e       	mov	r0, r23
 2de:	7e e0       	ldi	r23, 0x0E	; 14
 2e0:	b5 95       	asr	r27
 2e2:	a7 95       	ror	r26
 2e4:	97 95       	ror	r25
 2e6:	87 95       	ror	r24
 2e8:	7a 95       	dec	r23
 2ea:	d1 f7       	brne	.-12     	; 0x2e0 <bmp280_read_temperature+0xae>
 2ec:	70 2d       	mov	r23, r0
 2ee:	88 0d       	add	r24, r8
 2f0:	99 1d       	adc	r25, r9
 2f2:	aa 1d       	adc	r26, r10
 2f4:	bb 1d       	adc	r27, r11
 2f6:	80 93 6c 02 	sts	0x026C, r24	; 0x80026c <__data_end>
 2fa:	90 93 6d 02 	sts	0x026D, r25	; 0x80026d <__data_end+0x1>
 2fe:	a0 93 6e 02 	sts	0x026E, r26	; 0x80026e <__data_end+0x2>
 302:	b0 93 6f 02 	sts	0x026F, r27	; 0x80026f <__data_end+0x3>
    //printf("Curr t_fine: %ld\r\n", t_fine);
    int32_t T = (t_fine * 5 + 128) >> 8;

    //printf("T: %ld\r\n", T);
    return T;
 306:	8c 01       	movw	r16, r24
 308:	9d 01       	movw	r18, r26
 30a:	00 0f       	add	r16, r16
 30c:	11 1f       	adc	r17, r17
 30e:	22 1f       	adc	r18, r18
 310:	33 1f       	adc	r19, r19
 312:	00 0f       	add	r16, r16
 314:	11 1f       	adc	r17, r17
 316:	22 1f       	adc	r18, r18
 318:	33 1f       	adc	r19, r19
 31a:	80 0f       	add	r24, r16
 31c:	91 1f       	adc	r25, r17
 31e:	a2 1f       	adc	r26, r18
 320:	b3 1f       	adc	r27, r19
 322:	80 58       	subi	r24, 0x80	; 128
 324:	9f 4f       	sbci	r25, 0xFF	; 255
 326:	af 4f       	sbci	r26, 0xFF	; 255
 328:	bf 4f       	sbci	r27, 0xFF	; 255
 32a:	69 2f       	mov	r22, r25
 32c:	7a 2f       	mov	r23, r26
 32e:	8b 2f       	mov	r24, r27
 330:	99 27       	eor	r25, r25
 332:	87 fd       	sbrc	r24, 7
 334:	9a 95       	dec	r25
}
 336:	1f 91       	pop	r17
 338:	0f 91       	pop	r16
 33a:	ff 90       	pop	r15
 33c:	ef 90       	pop	r14
 33e:	df 90       	pop	r13
 340:	cf 90       	pop	r12
 342:	bf 90       	pop	r11
 344:	af 90       	pop	r10
 346:	9f 90       	pop	r9
 348:	8f 90       	pop	r8
 34a:	08 95       	ret

0000034c <spi_init>:
    }

    // If no more usage of SPI bus, release the SPI bus
    // Disable SPI
    if (num_initialized == 0) {
        SPCR &= ~(1 << SPE);
 34c:	2a 9a       	sbi	0x05, 2	; 5
 34e:	22 9a       	sbi	0x04, 2	; 4
 350:	8c b5       	in	r24, 0x2c	; 44
 352:	80 61       	ori	r24, 0x10	; 16
 354:	8c bd       	out	0x2c, r24	; 44
 356:	8c b5       	in	r24, 0x2c	; 44
 358:	80 64       	ori	r24, 0x40	; 64
 35a:	8c bd       	out	0x2c, r24	; 44
 35c:	25 9a       	sbi	0x04, 5	; 4
 35e:	23 9a       	sbi	0x04, 3	; 4
 360:	10 92 71 02 	sts	0x0271, r1	; 0x800271 <num_initialized+0x1>
 364:	10 92 70 02 	sts	0x0270, r1	; 0x800270 <num_initialized>
 368:	08 95       	ret

0000036a <get_clock_divider_bits>:
    if (clockDiv == 6) {
        clockDiv = 7;
    }

    return clockDiv;
}
 36a:	87 e0       	ldi	r24, 0x07	; 7
 36c:	08 95       	ret

0000036e <set_clock_divider>:
/*
    This function sets the clock mode given a clock div value
*/
void set_clock_divider(uint8_t clockDiv) {
    // Invert the SPI2X bit
    uint8_t clock_div_invert = clockDiv ^ 0x1;
 36e:	91 e0       	ldi	r25, 0x01	; 1
 370:	89 27       	eor	r24, r25

    SPCR |= ((clock_div_invert >> 1) & SPI_CLOCK_MASK);
 372:	2c b5       	in	r18, 0x2c	; 44
 374:	98 2f       	mov	r25, r24
 376:	96 95       	lsr	r25
 378:	93 70       	andi	r25, 0x03	; 3
 37a:	92 2b       	or	r25, r18
 37c:	9c bd       	out	0x2c, r25	; 44
    SPSR = (clock_div_invert & SPI_2XCLOCK_MASK);
 37e:	81 70       	andi	r24, 0x01	; 1
 380:	8d bd       	out	0x2d, r24	; 45
 382:	08 95       	ret

00000384 <spi_begin_txn>:

    Example:
 		SPISettings(uint32_t clock, uint8_t bitOrder, uint8_t dataMode)
 		SPISettings(500000, MSBFIRST, SPI_MODE0)
*/
void spi_begin_txn(uint32_t clock, uint8_t bit_order, uint8_t data_mode) {
 384:	cf 93       	push	r28
 386:	df 93       	push	r29
 388:	86 2f       	mov	r24, r22
 38a:	d4 2f       	mov	r29, r20
 38c:	c2 2f       	mov	r28, r18
    // Setup SPI in master, again
    SPCR |= (1 << SPE);
 38e:	9c b5       	in	r25, 0x2c	; 44
 390:	90 64       	ori	r25, 0x40	; 64
 392:	9c bd       	out	0x2c, r25	; 44
    SPCR |= (1 << MSTR);
 394:	9c b5       	in	r25, 0x2c	; 44
 396:	90 61       	ori	r25, 0x10	; 16
 398:	9c bd       	out	0x2c, r25	; 44

    // Setup clock
    uint8_t clock_div_bits = get_clock_divider_bits(clock);
 39a:	e7 df       	rcall	.-50     	; 0x36a <get_clock_divider_bits>
    set_clock_divider(clock_div_bits);
 39c:	e8 df       	rcall	.-48     	; 0x36e <set_clock_divider>
 39e:	8c b5       	in	r24, 0x2c	; 44

    // Setup data mode
    SPCR |= (data_mode & SPI_MODE_MASK);
 3a0:	2c 2f       	mov	r18, r28
 3a2:	2c 70       	andi	r18, 0x0C	; 12
 3a4:	28 2b       	or	r18, r24
 3a6:	2c bd       	out	0x2c, r18	; 44
 3a8:	8c b5       	in	r24, 0x2c	; 44

    // Setup bit order
    SPCR |= ((bit_order == LSBFIRST) ? (1 << DORD) : 0);
 3aa:	dd 23       	and	r29, r29
 3ac:	11 f0       	breq	.+4      	; 0x3b2 <spi_begin_txn+0x2e>
 3ae:	90 e0       	ldi	r25, 0x00	; 0
 3b0:	01 c0       	rjmp	.+2      	; 0x3b4 <spi_begin_txn+0x30>
 3b2:	90 e2       	ldi	r25, 0x20	; 32
 3b4:	89 2b       	or	r24, r25
 3b6:	8c bd       	out	0x2c, r24	; 44
 3b8:	80 91 70 02 	lds	r24, 0x0270	; 0x800270 <num_initialized>

    num_initialized++;
 3bc:	90 91 71 02 	lds	r25, 0x0271	; 0x800271 <num_initialized+0x1>
 3c0:	01 96       	adiw	r24, 0x01	; 1
 3c2:	90 93 71 02 	sts	0x0271, r25	; 0x800271 <num_initialized+0x1>
 3c6:	80 93 70 02 	sts	0x0270, r24	; 0x800270 <num_initialized>
 3ca:	df 91       	pop	r29
}
 3cc:	cf 91       	pop	r28
 3ce:	08 95       	ret

000003d0 <uart_putchar>:
/*
    Send character c down the UART Tx, wait until tx holding register
    is empty.
*/
int
uart_putchar(char c, FILE *stream) {
 3d0:	cf 93       	push	r28
 3d2:	c8 2f       	mov	r28, r24

    if (c == '\a') {
 3d4:	87 30       	cpi	r24, 0x07	; 7
 3d6:	61 f4       	brne	.+24     	; 0x3f0 <uart_putchar+0x20>
        fputs("*ring*\n", stderr);
 3d8:	20 91 e0 02 	lds	r18, 0x02E0	; 0x8002e0 <__iob+0x4>
 3dc:	30 91 e1 02 	lds	r19, 0x02E1	; 0x8002e1 <__iob+0x5>
 3e0:	47 e0       	ldi	r20, 0x07	; 7
 3e2:	50 e0       	ldi	r21, 0x00	; 0
 3e4:	61 e0       	ldi	r22, 0x01	; 1
 3e6:	70 e0       	ldi	r23, 0x00	; 0
 3e8:	89 ef       	ldi	r24, 0xF9	; 249
 3ea:	91 e0       	ldi	r25, 0x01	; 1
 3ec:	60 d2       	rcall	.+1216   	; 0x8ae <fwrite>
        return 0;
 3ee:	0b c0       	rjmp	.+22     	; 0x406 <__LOCK_REGION_LENGTH__+0x6>
    }

    if (c == '\n') {
 3f0:	8a 30       	cpi	r24, 0x0A	; 10
 3f2:	11 f4       	brne	.+4      	; 0x3f8 <uart_putchar+0x28>
        uart_putchar('\r', stream);
 3f4:	8d e0       	ldi	r24, 0x0D	; 13
 3f6:	ec df       	rcall	.-40     	; 0x3d0 <uart_putchar>
    }

    loop_until_bit_is_set(UCSR0A, UDRE0);
 3f8:	e0 ec       	ldi	r30, 0xC0	; 192
 3fa:	f0 e0       	ldi	r31, 0x00	; 0
 3fc:	80 81       	ld	r24, Z
 3fe:	85 ff       	sbrs	r24, 5
 400:	fd cf       	rjmp	.-6      	; 0x3fc <uart_putchar+0x2c>
    UDR0 = c;
 402:	c0 93 c6 00 	sts	0x00C6, r28	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>

    return 0;
}
 406:	80 e0       	ldi	r24, 0x00	; 0
 408:	90 e0       	ldi	r25, 0x00	; 0
 40a:	cf 91       	pop	r28
 40c:	08 95       	ret

0000040e <uart_getchar>:

    Successive calls to uart_getchar() will be satisfied from the
    internal buffer until that buffer is emptied again.
*/
int
uart_getchar(FILE *stream) {
 40e:	6f 92       	push	r6
 410:	7f 92       	push	r7
 412:	8f 92       	push	r8
 414:	9f 92       	push	r9
 416:	af 92       	push	r10
 418:	bf 92       	push	r11
 41a:	cf 92       	push	r12
 41c:	df 92       	push	r13
 41e:	ef 92       	push	r14
 420:	ff 92       	push	r15
 422:	0f 93       	push	r16
 424:	1f 93       	push	r17
 426:	cf 93       	push	r28
 428:	df 93       	push	r29
    uint8_t c;
    char *cp, *cp2;
    static char b[RX_BUFSIZE];
    static char *rxp;

    if (rxp == 0)
 42a:	20 91 c2 02 	lds	r18, 0x02C2	; 0x8002c2 <rxp.2118>
 42e:	30 91 c3 02 	lds	r19, 0x02C3	; 0x8002c3 <rxp.2118+0x1>
 432:	23 2b       	or	r18, r19
 434:	09 f0       	breq	.+2      	; 0x438 <uart_getchar+0x2a>
 436:	cc c0       	rjmp	.+408    	; 0x5d0 <uart_getchar+0x1c2>
 438:	8c 01       	movw	r16, r24
 43a:	0f 2e       	mov	r0, r31
 43c:	f2 e7       	ldi	r31, 0x72	; 114
 43e:	8f 2e       	mov	r8, r31
 440:	f2 e0       	ldi	r31, 0x02	; 2
 442:	9f 2e       	mov	r9, r31
 444:	f0 2d       	mov	r31, r0
        for (cp = b;;) {
            loop_until_bit_is_set(UCSR0A, RXC0);
 446:	c0 ec       	ldi	r28, 0xC0	; 192
 448:	d0 e0       	ldi	r29, 0x00	; 0

            if (UCSR0A & _BV(DOR0)) {
                return _FDEV_ERR;
            }

            c = UDR0;
 44a:	0f 2e       	mov	r0, r31
 44c:	f6 ec       	ldi	r31, 0xC6	; 198
 44e:	cf 2e       	mov	r12, r31
 450:	d1 2c       	mov	r13, r1
 452:	f0 2d       	mov	r31, r0
 454:	54 01       	movw	r10, r8
 456:	0f 2e       	mov	r0, r31
 458:	f1 e7       	ldi	r31, 0x71	; 113
 45a:	6f 2e       	mov	r6, r31
 45c:	f2 e0       	ldi	r31, 0x02	; 2
 45e:	7f 2e       	mov	r7, r31
 460:	f0 2d       	mov	r31, r0
    static char b[RX_BUFSIZE];
    static char *rxp;

    if (rxp == 0)
        for (cp = b;;) {
            loop_until_bit_is_set(UCSR0A, RXC0);
 462:	88 81       	ld	r24, Y
 464:	88 23       	and	r24, r24
 466:	ec f7       	brge	.-6      	; 0x462 <uart_getchar+0x54>

            if (UCSR0A & _BV(FE0)) {
 468:	88 81       	ld	r24, Y
 46a:	84 fd       	sbrc	r24, 4
 46c:	c4 c0       	rjmp	.+392    	; 0x5f6 <uart_getchar+0x1e8>
                return _FDEV_EOF;
            }

            if (UCSR0A & _BV(DOR0)) {
 46e:	88 81       	ld	r24, Y
 470:	83 fd       	sbrc	r24, 3
 472:	c4 c0       	rjmp	.+392    	; 0x5fc <uart_getchar+0x1ee>
                return _FDEV_ERR;
            }

            c = UDR0;
 474:	f6 01       	movw	r30, r12
 476:	80 81       	ld	r24, Z

            /* behaviour similar to Unix stty ICRNL */
            if (c == '\r') {
 478:	8d 30       	cpi	r24, 0x0D	; 13
 47a:	11 f0       	breq	.+4      	; 0x480 <uart_getchar+0x72>
                c = '\n';
            }

            if (c == '\n') {
 47c:	8a 30       	cpi	r24, 0x0A	; 10
 47e:	61 f4       	brne	.+24     	; 0x498 <uart_getchar+0x8a>
                *cp = c;
 480:	8a e0       	ldi	r24, 0x0A	; 10
 482:	f4 01       	movw	r30, r8
 484:	80 83       	st	Z, r24
                uart_putchar(c, stream);
 486:	b8 01       	movw	r22, r16
 488:	a3 df       	rcall	.-186    	; 0x3d0 <uart_putchar>
                rxp = b;
 48a:	82 e7       	ldi	r24, 0x72	; 114
 48c:	92 e0       	ldi	r25, 0x02	; 2
 48e:	90 93 c3 02 	sts	0x02C3, r25	; 0x8002c3 <rxp.2118+0x1>
 492:	80 93 c2 02 	sts	0x02C2, r24	; 0x8002c2 <rxp.2118>
                break;
 496:	9c c0       	rjmp	.+312    	; 0x5d0 <uart_getchar+0x1c2>
            }
            else if (c == '\t') {
 498:	89 30       	cpi	r24, 0x09	; 9
 49a:	39 f0       	breq	.+14     	; 0x4aa <uart_getchar+0x9c>
                c = ' ';
            }

            if ((c >= (uint8_t)' ' && c <= (uint8_t)'\x7e') ||
 49c:	90 ee       	ldi	r25, 0xE0	; 224
 49e:	98 0f       	add	r25, r24
 4a0:	9f 35       	cpi	r25, 0x5F	; 95
 4a2:	20 f0       	brcs	.+8      	; 0x4ac <uart_getchar+0x9e>
 4a4:	80 3a       	cpi	r24, 0xA0	; 160
 4a6:	a8 f0       	brcs	.+42     	; 0x4d2 <uart_getchar+0xc4>
 4a8:	01 c0       	rjmp	.+2      	; 0x4ac <uart_getchar+0x9e>
                uart_putchar(c, stream);
                rxp = b;
                break;
            }
            else if (c == '\t') {
                c = ' ';
 4aa:	80 e2       	ldi	r24, 0x20	; 32
            }

            if ((c >= (uint8_t)' ' && c <= (uint8_t)'\x7e') ||
                    c >= (uint8_t)'\xa0') {
                if (cp == b + RX_BUFSIZE - 1) {
 4ac:	f1 ec       	ldi	r31, 0xC1	; 193
 4ae:	8f 16       	cp	r8, r31
 4b0:	f2 e0       	ldi	r31, 0x02	; 2
 4b2:	9f 06       	cpc	r9, r31
 4b4:	21 f4       	brne	.+8      	; 0x4be <uart_getchar+0xb0>
                    uart_putchar('\a', stream);
 4b6:	b8 01       	movw	r22, r16
 4b8:	87 e0       	ldi	r24, 0x07	; 7
 4ba:	8a df       	rcall	.-236    	; 0x3d0 <uart_putchar>
 4bc:	d2 cf       	rjmp	.-92     	; 0x462 <uart_getchar+0x54>
                }
                else {
                    *cp++ = c;
 4be:	74 01       	movw	r14, r8
 4c0:	9f ef       	ldi	r25, 0xFF	; 255
 4c2:	e9 1a       	sub	r14, r25
 4c4:	f9 0a       	sbc	r15, r25
 4c6:	f4 01       	movw	r30, r8
                    uart_putchar(c, stream);
 4c8:	80 83       	st	Z, r24
 4ca:	b8 01       	movw	r22, r16
 4cc:	81 df       	rcall	.-254    	; 0x3d0 <uart_putchar>
                    c >= (uint8_t)'\xa0') {
                if (cp == b + RX_BUFSIZE - 1) {
                    uart_putchar('\a', stream);
                }
                else {
                    *cp++ = c;
 4ce:	47 01       	movw	r8, r14
 4d0:	c8 cf       	rjmp	.-112    	; 0x462 <uart_getchar+0x54>
                }

                continue;
            }

            switch (c) {
 4d2:	82 31       	cpi	r24, 0x12	; 18
 4d4:	b9 f1       	breq	.+110    	; 0x544 <uart_getchar+0x136>
 4d6:	30 f4       	brcc	.+12     	; 0x4e4 <uart_getchar+0xd6>
 4d8:	83 30       	cpi	r24, 0x03	; 3
 4da:	09 f4       	brne	.+2      	; 0x4de <uart_getchar+0xd0>
 4dc:	92 c0       	rjmp	.+292    	; 0x602 <uart_getchar+0x1f4>
 4de:	88 30       	cpi	r24, 0x08	; 8
 4e0:	e9 f0       	breq	.+58     	; 0x51c <uart_getchar+0x10e>
 4e2:	bf cf       	rjmp	.-130    	; 0x462 <uart_getchar+0x54>
 4e4:	87 31       	cpi	r24, 0x17	; 23
 4e6:	29 f0       	breq	.+10     	; 0x4f2 <uart_getchar+0xe4>
 4e8:	8f 37       	cpi	r24, 0x7F	; 127
 4ea:	c1 f0       	breq	.+48     	; 0x51c <uart_getchar+0x10e>
 4ec:	85 31       	cpi	r24, 0x15	; 21
 4ee:	79 f0       	breq	.+30     	; 0x50e <uart_getchar+0x100>
 4f0:	b8 cf       	rjmp	.-144    	; 0x462 <uart_getchar+0x54>
                }

                break;

            case 'w' & 0x1f:
                while (cp > b && cp[-1] != ' ') {
 4f2:	f2 e7       	ldi	r31, 0x72	; 114
 4f4:	8f 16       	cp	r8, r31
 4f6:	f2 e0       	ldi	r31, 0x02	; 2
 4f8:	9f 06       	cpc	r9, r31
 4fa:	09 f0       	breq	.+2      	; 0x4fe <uart_getchar+0xf0>
 4fc:	08 f4       	brcc	.+2      	; 0x500 <uart_getchar+0xf2>
 4fe:	b1 cf       	rjmp	.-158    	; 0x462 <uart_getchar+0x54>
 500:	f4 01       	movw	r30, r8
 502:	31 97       	sbiw	r30, 0x01	; 1
 504:	80 81       	ld	r24, Z
 506:	80 32       	cpi	r24, 0x20	; 32
 508:	09 f0       	breq	.+2      	; 0x50c <uart_getchar+0xfe>
 50a:	4a c0       	rjmp	.+148    	; 0x5a0 <uart_getchar+0x192>
 50c:	aa cf       	rjmp	.-172    	; 0x462 <uart_getchar+0x54>
                }

                break;

            case 'u' & 0x1f:
                while (cp > b) {
 50e:	82 e7       	ldi	r24, 0x72	; 114
 510:	88 16       	cp	r8, r24
 512:	82 e0       	ldi	r24, 0x02	; 2
 514:	98 06       	cpc	r9, r24
 516:	09 f0       	breq	.+2      	; 0x51a <uart_getchar+0x10c>
 518:	70 f5       	brcc	.+92     	; 0x576 <uart_getchar+0x168>
 51a:	a3 cf       	rjmp	.-186    	; 0x462 <uart_getchar+0x54>
            case 'c' & 0x1f:
                return -1;

            case '\b':
            case '\x7f':
                if (cp > b) {
 51c:	92 e7       	ldi	r25, 0x72	; 114
 51e:	89 16       	cp	r8, r25
 520:	92 e0       	ldi	r25, 0x02	; 2
 522:	99 06       	cpc	r9, r25
 524:	09 f0       	breq	.+2      	; 0x528 <uart_getchar+0x11a>
 526:	08 f4       	brcc	.+2      	; 0x52a <uart_getchar+0x11c>
                    uart_putchar('\b', stream);
 528:	9c cf       	rjmp	.-200    	; 0x462 <uart_getchar+0x54>
 52a:	b8 01       	movw	r22, r16
 52c:	88 e0       	ldi	r24, 0x08	; 8
                    uart_putchar(' ', stream);
 52e:	50 df       	rcall	.-352    	; 0x3d0 <uart_putchar>
 530:	b8 01       	movw	r22, r16
 532:	80 e2       	ldi	r24, 0x20	; 32
                    uart_putchar('\b', stream);
 534:	4d df       	rcall	.-358    	; 0x3d0 <uart_putchar>
 536:	b8 01       	movw	r22, r16
 538:	88 e0       	ldi	r24, 0x08	; 8
 53a:	4a df       	rcall	.-364    	; 0x3d0 <uart_putchar>
                    cp--;
 53c:	e1 e0       	ldi	r30, 0x01	; 1
 53e:	8e 1a       	sub	r8, r30
 540:	91 08       	sbc	r9, r1
                }

                break;

            case 'r' & 0x1f:
                uart_putchar('\r', stream);
 542:	8f cf       	rjmp	.-226    	; 0x462 <uart_getchar+0x54>
 544:	b8 01       	movw	r22, r16
 546:	8d e0       	ldi	r24, 0x0D	; 13
 548:	43 df       	rcall	.-378    	; 0x3d0 <uart_putchar>

                for (cp2 = b; cp2 < cp; cp2++) {
 54a:	f2 e7       	ldi	r31, 0x72	; 114
 54c:	8f 16       	cp	r8, r31
 54e:	f2 e0       	ldi	r31, 0x02	; 2
 550:	9f 06       	cpc	r9, r31
 552:	09 f0       	breq	.+2      	; 0x556 <uart_getchar+0x148>
 554:	08 f4       	brcc	.+2      	; 0x558 <uart_getchar+0x14a>
 556:	85 cf       	rjmp	.-246    	; 0x462 <uart_getchar+0x54>
 558:	0f 2e       	mov	r0, r31
 55a:	f2 e7       	ldi	r31, 0x72	; 114
 55c:	ef 2e       	mov	r14, r31
 55e:	f2 e0       	ldi	r31, 0x02	; 2
 560:	ff 2e       	mov	r15, r31
                    uart_putchar(*cp2, stream);
 562:	f0 2d       	mov	r31, r0
 564:	b8 01       	movw	r22, r16
 566:	f7 01       	movw	r30, r14
 568:	81 91       	ld	r24, Z+
 56a:	7f 01       	movw	r14, r30
                break;

            case 'r' & 0x1f:
                uart_putchar('\r', stream);

                for (cp2 = b; cp2 < cp; cp2++) {
 56c:	31 df       	rcall	.-414    	; 0x3d0 <uart_putchar>
 56e:	8e 14       	cp	r8, r14
 570:	9f 04       	cpc	r9, r15

                break;

            case 'u' & 0x1f:
                while (cp > b) {
                    uart_putchar('\b', stream);
 572:	c1 f7       	brne	.-16     	; 0x564 <uart_getchar+0x156>
 574:	76 cf       	rjmp	.-276    	; 0x462 <uart_getchar+0x54>
 576:	b8 01       	movw	r22, r16
                    uart_putchar(' ', stream);
 578:	88 e0       	ldi	r24, 0x08	; 8
 57a:	2a df       	rcall	.-428    	; 0x3d0 <uart_putchar>
 57c:	b8 01       	movw	r22, r16
 57e:	80 e2       	ldi	r24, 0x20	; 32
                    uart_putchar('\b', stream);
 580:	27 df       	rcall	.-434    	; 0x3d0 <uart_putchar>
 582:	b8 01       	movw	r22, r16
 584:	88 e0       	ldi	r24, 0x08	; 8
 586:	24 df       	rcall	.-440    	; 0x3d0 <uart_putchar>
                    cp--;
 588:	f1 e0       	ldi	r31, 0x01	; 1
 58a:	8f 1a       	sub	r8, r31
 58c:	91 08       	sbc	r9, r1
                }

                break;

            case 'u' & 0x1f:
                while (cp > b) {
 58e:	82 e7       	ldi	r24, 0x72	; 114
 590:	88 16       	cp	r8, r24
 592:	82 e0       	ldi	r24, 0x02	; 2
 594:	98 06       	cpc	r9, r24
 596:	79 f7       	brne	.-34     	; 0x576 <uart_getchar+0x168>
 598:	f3 01       	movw	r30, r6
 59a:	31 96       	adiw	r30, 0x01	; 1
 59c:	4f 01       	movw	r8, r30
 59e:	61 cf       	rjmp	.-318    	; 0x462 <uart_getchar+0x54>
 5a0:	74 01       	movw	r14, r8

                break;

            case 'w' & 0x1f:
                while (cp > b && cp[-1] != ' ') {
                    uart_putchar('\b', stream);
 5a2:	f1 e0       	ldi	r31, 0x01	; 1
 5a4:	ef 1a       	sub	r14, r31
 5a6:	f1 08       	sbc	r15, r1
 5a8:	b8 01       	movw	r22, r16
                    uart_putchar(' ', stream);
 5aa:	88 e0       	ldi	r24, 0x08	; 8
 5ac:	11 df       	rcall	.-478    	; 0x3d0 <uart_putchar>
 5ae:	b8 01       	movw	r22, r16
 5b0:	80 e2       	ldi	r24, 0x20	; 32
                    uart_putchar('\b', stream);
 5b2:	0e df       	rcall	.-484    	; 0x3d0 <uart_putchar>
 5b4:	b8 01       	movw	r22, r16
 5b6:	88 e0       	ldi	r24, 0x08	; 8
 5b8:	0b df       	rcall	.-490    	; 0x3d0 <uart_putchar>
                    cp--;
 5ba:	47 01       	movw	r8, r14
                }

                break;

            case 'w' & 0x1f:
                while (cp > b && cp[-1] != ' ') {
 5bc:	ae 14       	cp	r10, r14
 5be:	bf 04       	cpc	r11, r15
 5c0:	09 f4       	brne	.+2      	; 0x5c4 <uart_getchar+0x1b6>
 5c2:	4f cf       	rjmp	.-354    	; 0x462 <uart_getchar+0x54>
 5c4:	f7 01       	movw	r30, r14
 5c6:	82 91       	ld	r24, -Z
 5c8:	7f 01       	movw	r14, r30
 5ca:	80 32       	cpi	r24, 0x20	; 32
 5cc:	69 f7       	brne	.-38     	; 0x5a8 <uart_getchar+0x19a>
 5ce:	49 cf       	rjmp	.-366    	; 0x462 <uart_getchar+0x54>

                break;
            }
        }

    c = *rxp++;
 5d0:	e0 91 c2 02 	lds	r30, 0x02C2	; 0x8002c2 <rxp.2118>
 5d4:	f0 91 c3 02 	lds	r31, 0x02C3	; 0x8002c3 <rxp.2118+0x1>
 5d8:	cf 01       	movw	r24, r30
 5da:	01 96       	adiw	r24, 0x01	; 1
 5dc:	90 93 c3 02 	sts	0x02C3, r25	; 0x8002c3 <rxp.2118+0x1>
 5e0:	80 93 c2 02 	sts	0x02C2, r24	; 0x8002c2 <rxp.2118>
 5e4:	80 81       	ld	r24, Z

    if (c == '\n') {
 5e6:	8a 30       	cpi	r24, 0x0A	; 10
 5e8:	21 f4       	brne	.+8      	; 0x5f2 <uart_getchar+0x1e4>
        rxp = 0;
 5ea:	10 92 c3 02 	sts	0x02C3, r1	; 0x8002c3 <rxp.2118+0x1>
 5ee:	10 92 c2 02 	sts	0x02C2, r1	; 0x8002c2 <rxp.2118>
    }

    return c;
 5f2:	90 e0       	ldi	r25, 0x00	; 0
 5f4:	08 c0       	rjmp	.+16     	; 0x606 <uart_getchar+0x1f8>
    if (rxp == 0)
        for (cp = b;;) {
            loop_until_bit_is_set(UCSR0A, RXC0);

            if (UCSR0A & _BV(FE0)) {
                return _FDEV_EOF;
 5f6:	8e ef       	ldi	r24, 0xFE	; 254
 5f8:	9f ef       	ldi	r25, 0xFF	; 255
 5fa:	05 c0       	rjmp	.+10     	; 0x606 <uart_getchar+0x1f8>
            }

            if (UCSR0A & _BV(DOR0)) {
                return _FDEV_ERR;
 5fc:	8f ef       	ldi	r24, 0xFF	; 255
 5fe:	9f ef       	ldi	r25, 0xFF	; 255
 600:	02 c0       	rjmp	.+4      	; 0x606 <uart_getchar+0x1f8>
                continue;
            }

            switch (c) {
            case 'c' & 0x1f:
                return -1;
 602:	8f ef       	ldi	r24, 0xFF	; 255
 604:	9f ef       	ldi	r25, 0xFF	; 255
    if (c == '\n') {
        rxp = 0;
    }

    return c;
}
 606:	df 91       	pop	r29
 608:	cf 91       	pop	r28
 60a:	1f 91       	pop	r17
 60c:	0f 91       	pop	r16
 60e:	ff 90       	pop	r15
 610:	ef 90       	pop	r14
 612:	df 90       	pop	r13
 614:	cf 90       	pop	r12
 616:	bf 90       	pop	r11
 618:	af 90       	pop	r10
 61a:	9f 90       	pop	r9
 61c:	8f 90       	pop	r8
 61e:	7f 90       	pop	r7
 620:	6f 90       	pop	r6
 622:	08 95       	ret

00000624 <uart_init>:
void uart_init(void) {
#if F_CPU < 2000000UL && defined(U2X)
    UCSRA = _BV(U2X);             /* improve baud rate error by using 2x clk */
    UBRRL = (F_CPU / (8UL * UART_BAUD)) - 1;
#else
    UBRR0H = (uint8_t) (MYUBRR >> 8);
 624:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__DATA_REGION_ORIGIN__+0x65>
    UBRR0L = (uint8_t) MYUBRR;
 628:	80 e1       	ldi	r24, 0x10	; 16
 62a:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__DATA_REGION_ORIGIN__+0x64>
#endif
    UCSR0B = (1 << RXEN0) | (1 << TXEN0); /* tx/rx enable */
 62e:	88 e1       	ldi	r24, 0x18	; 24
 630:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__DATA_REGION_ORIGIN__+0x61>
    UCSR0C = (3 << UCSZ00);
 634:	86 e0       	ldi	r24, 0x06	; 6
 636:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__DATA_REGION_ORIGIN__+0x62>
    stdout = stdin = &usart0_str;
 63a:	ec ed       	ldi	r30, 0xDC	; 220
 63c:	f2 e0       	ldi	r31, 0x02	; 2
 63e:	80 e0       	ldi	r24, 0x00	; 0
 640:	91 e0       	ldi	r25, 0x01	; 1
 642:	91 83       	std	Z+1, r25	; 0x01
 644:	80 83       	st	Z, r24
 646:	93 83       	std	Z+3, r25	; 0x03
 648:	82 83       	std	Z+2, r24	; 0x02
 64a:	08 95       	ret

0000064c <board_init>:
		port_pin_flags_t flags)
{
	/* Select direction and initial pin state */
	if (flags & IOPORT_DIR_OUTPUT) {
		if (flags & IOPORT_INIT_HIGH) {
			*((uint8_t *)port + 2) |= pin_mask;
 64c:	95 b1       	in	r25, 0x05	; 5
			*((uint8_t *)port + 2) &= ~pin_mask;
		}

		*((uint8_t *)port + 1) |= pin_mask;
	} else {
		*((uint8_t *)port + 1) &= ~pin_mask;
 64e:	84 b1       	in	r24, 0x04	; 4
 650:	80 62       	ori	r24, 0x20	; 32
 652:	8f 77       	andi	r24, 0x7F	; 127
 654:	84 b9       	out	0x04, r24	; 4
		if (flags & IOPORT_PULL_UP) {
			*((uint8_t *)port + 2) |= pin_mask;
 656:	89 2f       	mov	r24, r25
 658:	80 6a       	ori	r24, 0xA0	; 160
 65a:	85 b9       	out	0x05, r24	; 5
 65c:	08 95       	ret

0000065e <__portable_avr_delay_cycles>:
 *
 * @{
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
 65e:	04 c0       	rjmp	.+8      	; 0x668 <__portable_avr_delay_cycles+0xa>
	while (n) {
		barrier();
		n--;
 660:	61 50       	subi	r22, 0x01	; 1
 662:	71 09       	sbc	r23, r1
 664:	81 09       	sbc	r24, r1
 666:	91 09       	sbc	r25, r1
 * @{
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
	while (n) {
 668:	61 15       	cp	r22, r1
 66a:	71 05       	cpc	r23, r1
 66c:	81 05       	cpc	r24, r1
 66e:	91 05       	cpc	r25, r1
 670:	b9 f7       	brne	.-18     	; 0x660 <__portable_avr_delay_cycles+0x2>
 672:	08 95       	ret

00000674 <print_all_values>:
        print_all_values();
        delay_ms(10000);
    }
}

void print_all_values(void) {
 674:	8f 92       	push	r8
 676:	9f 92       	push	r9
 678:	af 92       	push	r10
 67a:	bf 92       	push	r11
 67c:	cf 92       	push	r12
 67e:	df 92       	push	r13
 680:	ef 92       	push	r14
 682:	ff 92       	push	r15
 684:	0f 93       	push	r16
 686:	1f 93       	push	r17
 688:	cf 93       	push	r28
 68a:	df 93       	push	r29
 68c:	00 d0       	rcall	.+0      	; 0x68e <print_all_values+0x1a>
 68e:	00 d0       	rcall	.+0      	; 0x690 <print_all_values+0x1c>
 690:	00 d0       	rcall	.+0      	; 0x692 <print_all_values+0x1e>
 692:	cd b7       	in	r28, 0x3d	; 61
 694:	de b7       	in	r29, 0x3e	; 62
    char str[6];
    int32_t temp = bmp280_read_temperature();
 696:	cd dd       	rcall	.-1126   	; 0x232 <bmp280_read_temperature>
 698:	6b 01       	movw	r12, r22
 69a:	7c 01       	movw	r14, r24
    snprintf(str, sizeof(str), "%ld.%ld", (temp - temp % 100) / 100, temp % 100);
 69c:	0f 2e       	mov	r0, r31
 69e:	f4 e6       	ldi	r31, 0x64	; 100
 6a0:	8f 2e       	mov	r8, r31
 6a2:	91 2c       	mov	r9, r1
 6a4:	a1 2c       	mov	r10, r1
 6a6:	b1 2c       	mov	r11, r1
 6a8:	f0 2d       	mov	r31, r0
 6aa:	a5 01       	movw	r20, r10
 6ac:	94 01       	movw	r18, r8
 6ae:	6b d0       	rcall	.+214    	; 0x786 <__divmodsi4>
 6b0:	9f 93       	push	r25
 6b2:	8f 93       	push	r24
 6b4:	7f 93       	push	r23
 6b6:	6f 93       	push	r22
 6b8:	a7 01       	movw	r20, r14
 6ba:	96 01       	movw	r18, r12
 6bc:	26 1b       	sub	r18, r22
 6be:	37 0b       	sbc	r19, r23
 6c0:	48 0b       	sbc	r20, r24
 6c2:	59 0b       	sbc	r21, r25
 6c4:	ca 01       	movw	r24, r20
 6c6:	b9 01       	movw	r22, r18
 6c8:	a5 01       	movw	r20, r10
 6ca:	94 01       	movw	r18, r8
 6cc:	5c d0       	rcall	.+184    	; 0x786 <__divmodsi4>
 6ce:	5f 93       	push	r21
 6d0:	4f 93       	push	r20
 6d2:	3f 93       	push	r19
 6d4:	2f 93       	push	r18
 6d6:	81 e0       	ldi	r24, 0x01	; 1
 6d8:	92 e0       	ldi	r25, 0x02	; 2
 6da:	9f 93       	push	r25
 6dc:	8f 93       	push	r24
 6de:	1f 92       	push	r1
 6e0:	86 e0       	ldi	r24, 0x06	; 6
 6e2:	8f 93       	push	r24
 6e4:	8e 01       	movw	r16, r28
 6e6:	0f 5f       	subi	r16, 0xFF	; 255
 6e8:	1f 4f       	sbci	r17, 0xFF	; 255
 6ea:	1f 93       	push	r17
 6ec:	0f 93       	push	r16
 6ee:	54 d1       	rcall	.+680    	; 0x998 <snprintf>
    printf("Temperature: %s\r\n", str);
 6f0:	1f 93       	push	r17
 6f2:	0f 93       	push	r16
 6f4:	89 e0       	ldi	r24, 0x09	; 9
 6f6:	92 e0       	ldi	r25, 0x02	; 2
 6f8:	9f 93       	push	r25
 6fa:	8f 93       	push	r24
 6fc:	0a d1       	rcall	.+532    	; 0x912 <printf>
}
 6fe:	0f b6       	in	r0, 0x3f	; 63
 700:	f8 94       	cli
 702:	de bf       	out	0x3e, r29	; 62
 704:	0f be       	out	0x3f, r0	; 63
 706:	cd bf       	out	0x3d, r28	; 61
 708:	26 96       	adiw	r28, 0x06	; 6
 70a:	0f b6       	in	r0, 0x3f	; 63
 70c:	f8 94       	cli
 70e:	de bf       	out	0x3e, r29	; 62
 710:	0f be       	out	0x3f, r0	; 63
 712:	cd bf       	out	0x3d, r28	; 61
 714:	df 91       	pop	r29
 716:	cf 91       	pop	r28
 718:	1f 91       	pop	r17
 71a:	0f 91       	pop	r16
 71c:	ff 90       	pop	r15
 71e:	ef 90       	pop	r14
 720:	df 90       	pop	r13
 722:	cf 90       	pop	r12
 724:	bf 90       	pop	r11
 726:	af 90       	pop	r10
 728:	9f 90       	pop	r9
 72a:	8f 90       	pop	r8
 72c:	08 95       	ret

0000072e <main>:
// Print all temp, pressure, altitude and humidity values
void print_all_values(void);

int main (void) {
    /* Insert system clock initialization code here (sysclk_init()). */
    board_init();
 72e:	8e df       	rcall	.-228    	; 0x64c <board_init>

    ioport_init();
    uart_init();
 730:	79 df       	rcall	.-270    	; 0x624 <uart_init>

    // Sensors initialization
    spi_init();
 732:	0c de       	rcall	.-1000   	; 0x34c <spi_init>
 734:	6b e0       	ldi	r22, 0x0B	; 11

    delay_ms(1000);
 736:	7b e8       	ldi	r23, 0x8B	; 139
 738:	82 e0       	ldi	r24, 0x02	; 2
 73a:	90 e0       	ldi	r25, 0x00	; 0
 73c:	90 df       	rcall	.-224    	; 0x65e <__portable_avr_delay_cycles>

    printf("----- Default testing -----\r\n");
 73e:	8b e1       	ldi	r24, 0x1B	; 27
 740:	92 e0       	ldi	r25, 0x02	; 2
 742:	fa d0       	rcall	.+500    	; 0x938 <puts>
 744:	28 dd       	rcall	.-1456   	; 0x196 <bmp280_init>
    //uint8_t sensor_id = read8(BMP280_REGISTER_CHIPID);
    //printf("Sensor ID: 0x%x\r\n", sensor_id);

    //delay_ms(1000);

    int ret = bmp280_init();
 746:	01 97       	sbiw	r24, 0x01	; 1

    if (ret == BMP280_INIT_NO_ERR) {
 748:	21 f4       	brne	.+8      	; 0x752 <main+0x24>
 74a:	88 e3       	ldi	r24, 0x38	; 56
        printf("Sensor Initialized\r\n");
 74c:	92 e0       	ldi	r25, 0x02	; 2
 74e:	f4 d0       	rcall	.+488    	; 0x938 <puts>
 750:	04 c0       	rjmp	.+8      	; 0x75a <main+0x2c>
    }
    else {
        printf("Sensor initialization failed!\r\n");
 752:	8c e4       	ldi	r24, 0x4C	; 76
 754:	92 e0       	ldi	r25, 0x02	; 2
 756:	f0 d0       	rcall	.+480    	; 0x938 <puts>
 758:	ff cf       	rjmp	.-2      	; 0x758 <main+0x2a>

        while (1);
    }

    while (1) {
        print_all_values();
 75a:	8c df       	rcall	.-232    	; 0x674 <print_all_values>
 75c:	6b e6       	ldi	r22, 0x6B	; 107
        delay_ms(10000);
 75e:	7e e6       	ldi	r23, 0x6E	; 110
 760:	89 e1       	ldi	r24, 0x19	; 25
 762:	90 e0       	ldi	r25, 0x00	; 0
 764:	7c df       	rcall	.-264    	; 0x65e <__portable_avr_delay_cycles>
 766:	f9 cf       	rjmp	.-14     	; 0x75a <main+0x2c>

00000768 <__mulsi3>:
 768:	db 01       	movw	r26, r22
 76a:	8f 93       	push	r24
 76c:	9f 93       	push	r25
 76e:	27 d0       	rcall	.+78     	; 0x7be <__muluhisi3>
 770:	bf 91       	pop	r27
 772:	af 91       	pop	r26
 774:	a2 9f       	mul	r26, r18
 776:	80 0d       	add	r24, r0
 778:	91 1d       	adc	r25, r1
 77a:	a3 9f       	mul	r26, r19
 77c:	90 0d       	add	r25, r0
 77e:	b2 9f       	mul	r27, r18
 780:	90 0d       	add	r25, r0
 782:	11 24       	eor	r1, r1
 784:	08 95       	ret

00000786 <__divmodsi4>:
 786:	05 2e       	mov	r0, r21
 788:	97 fb       	bst	r25, 7
 78a:	16 f4       	brtc	.+4      	; 0x790 <__divmodsi4+0xa>
 78c:	00 94       	com	r0
 78e:	0f d0       	rcall	.+30     	; 0x7ae <__negsi2>
 790:	57 fd       	sbrc	r21, 7
 792:	05 d0       	rcall	.+10     	; 0x79e <__divmodsi4_neg2>
 794:	5b d0       	rcall	.+182    	; 0x84c <__udivmodsi4>
 796:	07 fc       	sbrc	r0, 7
 798:	02 d0       	rcall	.+4      	; 0x79e <__divmodsi4_neg2>
 79a:	46 f4       	brtc	.+16     	; 0x7ac <__divmodsi4_exit>
 79c:	08 c0       	rjmp	.+16     	; 0x7ae <__negsi2>

0000079e <__divmodsi4_neg2>:
 79e:	50 95       	com	r21
 7a0:	40 95       	com	r20
 7a2:	30 95       	com	r19
 7a4:	21 95       	neg	r18
 7a6:	3f 4f       	sbci	r19, 0xFF	; 255
 7a8:	4f 4f       	sbci	r20, 0xFF	; 255
 7aa:	5f 4f       	sbci	r21, 0xFF	; 255

000007ac <__divmodsi4_exit>:
 7ac:	08 95       	ret

000007ae <__negsi2>:
 7ae:	90 95       	com	r25
 7b0:	80 95       	com	r24
 7b2:	70 95       	com	r23
 7b4:	61 95       	neg	r22
 7b6:	7f 4f       	sbci	r23, 0xFF	; 255
 7b8:	8f 4f       	sbci	r24, 0xFF	; 255
 7ba:	9f 4f       	sbci	r25, 0xFF	; 255
 7bc:	08 95       	ret

000007be <__muluhisi3>:
 7be:	68 d0       	rcall	.+208    	; 0x890 <__umulhisi3>
 7c0:	a5 9f       	mul	r26, r21
 7c2:	90 0d       	add	r25, r0
 7c4:	b4 9f       	mul	r27, r20
 7c6:	90 0d       	add	r25, r0
 7c8:	a4 9f       	mul	r26, r20
 7ca:	80 0d       	add	r24, r0
 7cc:	91 1d       	adc	r25, r1
 7ce:	11 24       	eor	r1, r1
 7d0:	08 95       	ret

000007d2 <__mulshisi3>:
 7d2:	b7 ff       	sbrs	r27, 7
 7d4:	f4 cf       	rjmp	.-24     	; 0x7be <__muluhisi3>

000007d6 <__mulohisi3>:
 7d6:	f3 df       	rcall	.-26     	; 0x7be <__muluhisi3>
 7d8:	82 1b       	sub	r24, r18
 7da:	93 0b       	sbc	r25, r19
 7dc:	08 95       	ret

000007de <__prologue_saves__>:
 7de:	2f 92       	push	r2
 7e0:	3f 92       	push	r3
 7e2:	4f 92       	push	r4
 7e4:	5f 92       	push	r5
 7e6:	6f 92       	push	r6
 7e8:	7f 92       	push	r7
 7ea:	8f 92       	push	r8
 7ec:	9f 92       	push	r9
 7ee:	af 92       	push	r10
 7f0:	bf 92       	push	r11
 7f2:	cf 92       	push	r12
 7f4:	df 92       	push	r13
 7f6:	ef 92       	push	r14
 7f8:	ff 92       	push	r15
 7fa:	0f 93       	push	r16
 7fc:	1f 93       	push	r17
 7fe:	cf 93       	push	r28
 800:	df 93       	push	r29
 802:	cd b7       	in	r28, 0x3d	; 61
 804:	de b7       	in	r29, 0x3e	; 62
 806:	ca 1b       	sub	r28, r26
 808:	db 0b       	sbc	r29, r27
 80a:	0f b6       	in	r0, 0x3f	; 63
 80c:	f8 94       	cli
 80e:	de bf       	out	0x3e, r29	; 62
 810:	0f be       	out	0x3f, r0	; 63
 812:	cd bf       	out	0x3d, r28	; 61
 814:	09 94       	ijmp

00000816 <__epilogue_restores__>:
 816:	2a 88       	ldd	r2, Y+18	; 0x12
 818:	39 88       	ldd	r3, Y+17	; 0x11
 81a:	48 88       	ldd	r4, Y+16	; 0x10
 81c:	5f 84       	ldd	r5, Y+15	; 0x0f
 81e:	6e 84       	ldd	r6, Y+14	; 0x0e
 820:	7d 84       	ldd	r7, Y+13	; 0x0d
 822:	8c 84       	ldd	r8, Y+12	; 0x0c
 824:	9b 84       	ldd	r9, Y+11	; 0x0b
 826:	aa 84       	ldd	r10, Y+10	; 0x0a
 828:	b9 84       	ldd	r11, Y+9	; 0x09
 82a:	c8 84       	ldd	r12, Y+8	; 0x08
 82c:	df 80       	ldd	r13, Y+7	; 0x07
 82e:	ee 80       	ldd	r14, Y+6	; 0x06
 830:	fd 80       	ldd	r15, Y+5	; 0x05
 832:	0c 81       	ldd	r16, Y+4	; 0x04
 834:	1b 81       	ldd	r17, Y+3	; 0x03
 836:	aa 81       	ldd	r26, Y+2	; 0x02
 838:	b9 81       	ldd	r27, Y+1	; 0x01
 83a:	ce 0f       	add	r28, r30
 83c:	d1 1d       	adc	r29, r1
 83e:	0f b6       	in	r0, 0x3f	; 63
 840:	f8 94       	cli
 842:	de bf       	out	0x3e, r29	; 62
 844:	0f be       	out	0x3f, r0	; 63
 846:	cd bf       	out	0x3d, r28	; 61
 848:	ed 01       	movw	r28, r26
 84a:	08 95       	ret

0000084c <__udivmodsi4>:
 84c:	a1 e2       	ldi	r26, 0x21	; 33
 84e:	1a 2e       	mov	r1, r26
 850:	aa 1b       	sub	r26, r26
 852:	bb 1b       	sub	r27, r27
 854:	fd 01       	movw	r30, r26
 856:	0d c0       	rjmp	.+26     	; 0x872 <__udivmodsi4_ep>

00000858 <__udivmodsi4_loop>:
 858:	aa 1f       	adc	r26, r26
 85a:	bb 1f       	adc	r27, r27
 85c:	ee 1f       	adc	r30, r30
 85e:	ff 1f       	adc	r31, r31
 860:	a2 17       	cp	r26, r18
 862:	b3 07       	cpc	r27, r19
 864:	e4 07       	cpc	r30, r20
 866:	f5 07       	cpc	r31, r21
 868:	20 f0       	brcs	.+8      	; 0x872 <__udivmodsi4_ep>
 86a:	a2 1b       	sub	r26, r18
 86c:	b3 0b       	sbc	r27, r19
 86e:	e4 0b       	sbc	r30, r20
 870:	f5 0b       	sbc	r31, r21

00000872 <__udivmodsi4_ep>:
 872:	66 1f       	adc	r22, r22
 874:	77 1f       	adc	r23, r23
 876:	88 1f       	adc	r24, r24
 878:	99 1f       	adc	r25, r25
 87a:	1a 94       	dec	r1
 87c:	69 f7       	brne	.-38     	; 0x858 <__udivmodsi4_loop>
 87e:	60 95       	com	r22
 880:	70 95       	com	r23
 882:	80 95       	com	r24
 884:	90 95       	com	r25
 886:	9b 01       	movw	r18, r22
 888:	ac 01       	movw	r20, r24
 88a:	bd 01       	movw	r22, r26
 88c:	cf 01       	movw	r24, r30
 88e:	08 95       	ret

00000890 <__umulhisi3>:
 890:	a2 9f       	mul	r26, r18
 892:	b0 01       	movw	r22, r0
 894:	b3 9f       	mul	r27, r19
 896:	c0 01       	movw	r24, r0
 898:	a3 9f       	mul	r26, r19
 89a:	70 0d       	add	r23, r0
 89c:	81 1d       	adc	r24, r1
 89e:	11 24       	eor	r1, r1
 8a0:	91 1d       	adc	r25, r1
 8a2:	b2 9f       	mul	r27, r18
 8a4:	70 0d       	add	r23, r0
 8a6:	81 1d       	adc	r24, r1
 8a8:	11 24       	eor	r1, r1
 8aa:	91 1d       	adc	r25, r1
 8ac:	08 95       	ret

000008ae <fwrite>:
 8ae:	a0 e0       	ldi	r26, 0x00	; 0
 8b0:	b0 e0       	ldi	r27, 0x00	; 0
 8b2:	ec e5       	ldi	r30, 0x5C	; 92
 8b4:	f4 e0       	ldi	r31, 0x04	; 4
 8b6:	99 cf       	rjmp	.-206    	; 0x7ea <__prologue_saves__+0xc>
 8b8:	5b 01       	movw	r10, r22
 8ba:	4a 01       	movw	r8, r20
 8bc:	79 01       	movw	r14, r18
 8be:	d9 01       	movw	r26, r18
 8c0:	13 96       	adiw	r26, 0x03	; 3
 8c2:	2c 91       	ld	r18, X
 8c4:	21 ff       	sbrs	r18, 1
 8c6:	1d c0       	rjmp	.+58     	; 0x902 <__stack+0x3>
 8c8:	c0 e0       	ldi	r28, 0x00	; 0
 8ca:	d0 e0       	ldi	r29, 0x00	; 0
 8cc:	c8 15       	cp	r28, r8
 8ce:	d9 05       	cpc	r29, r9
 8d0:	d9 f0       	breq	.+54     	; 0x908 <__stack+0x9>
 8d2:	8c 01       	movw	r16, r24
 8d4:	6c 01       	movw	r12, r24
 8d6:	ca 0c       	add	r12, r10
 8d8:	db 1c       	adc	r13, r11
 8da:	c8 01       	movw	r24, r16
 8dc:	0c 15       	cp	r16, r12
 8de:	1d 05       	cpc	r17, r13
 8e0:	71 f0       	breq	.+28     	; 0x8fe <fwrite+0x50>
 8e2:	0f 5f       	subi	r16, 0xFF	; 255
 8e4:	1f 4f       	sbci	r17, 0xFF	; 255
 8e6:	d7 01       	movw	r26, r14
 8e8:	18 96       	adiw	r26, 0x08	; 8
 8ea:	ed 91       	ld	r30, X+
 8ec:	fc 91       	ld	r31, X
 8ee:	19 97       	sbiw	r26, 0x09	; 9
 8f0:	b7 01       	movw	r22, r14
 8f2:	dc 01       	movw	r26, r24
 8f4:	8c 91       	ld	r24, X
 8f6:	09 95       	icall
 8f8:	89 2b       	or	r24, r25
 8fa:	79 f3       	breq	.-34     	; 0x8da <fwrite+0x2c>
 8fc:	05 c0       	rjmp	.+10     	; 0x908 <__stack+0x9>
 8fe:	21 96       	adiw	r28, 0x01	; 1
 900:	e5 cf       	rjmp	.-54     	; 0x8cc <fwrite+0x1e>
 902:	80 e0       	ldi	r24, 0x00	; 0
 904:	90 e0       	ldi	r25, 0x00	; 0
 906:	01 c0       	rjmp	.+2      	; 0x90a <__stack+0xb>
 908:	ce 01       	movw	r24, r28
 90a:	cd b7       	in	r28, 0x3d	; 61
 90c:	de b7       	in	r29, 0x3e	; 62
 90e:	ec e0       	ldi	r30, 0x0C	; 12
 910:	88 cf       	rjmp	.-240    	; 0x822 <__epilogue_restores__+0xc>

00000912 <printf>:
 912:	a0 e0       	ldi	r26, 0x00	; 0
 914:	b0 e0       	ldi	r27, 0x00	; 0
 916:	ee e8       	ldi	r30, 0x8E	; 142
 918:	f4 e0       	ldi	r31, 0x04	; 4
 91a:	71 cf       	rjmp	.-286    	; 0x7fe <__prologue_saves__+0x20>
 91c:	ae 01       	movw	r20, r28
 91e:	4b 5f       	subi	r20, 0xFB	; 251
 920:	5f 4f       	sbci	r21, 0xFF	; 255
 922:	fa 01       	movw	r30, r20
 924:	61 91       	ld	r22, Z+
 926:	71 91       	ld	r23, Z+
 928:	af 01       	movw	r20, r30
 92a:	80 91 de 02 	lds	r24, 0x02DE	; 0x8002de <__iob+0x2>
 92e:	90 91 df 02 	lds	r25, 0x02DF	; 0x8002df <__iob+0x3>
 932:	5f d0       	rcall	.+190    	; 0x9f2 <vfprintf>
 934:	e2 e0       	ldi	r30, 0x02	; 2
 936:	7f cf       	rjmp	.-258    	; 0x836 <__epilogue_restores__+0x20>

00000938 <puts>:
 938:	0f 93       	push	r16
 93a:	1f 93       	push	r17
 93c:	cf 93       	push	r28
 93e:	df 93       	push	r29
 940:	e0 91 de 02 	lds	r30, 0x02DE	; 0x8002de <__iob+0x2>
 944:	f0 91 df 02 	lds	r31, 0x02DF	; 0x8002df <__iob+0x3>
 948:	23 81       	ldd	r18, Z+3	; 0x03
 94a:	21 ff       	sbrs	r18, 1
 94c:	1b c0       	rjmp	.+54     	; 0x984 <puts+0x4c>
 94e:	8c 01       	movw	r16, r24
 950:	d0 e0       	ldi	r29, 0x00	; 0
 952:	c0 e0       	ldi	r28, 0x00	; 0
 954:	f8 01       	movw	r30, r16
 956:	81 91       	ld	r24, Z+
 958:	8f 01       	movw	r16, r30
 95a:	60 91 de 02 	lds	r22, 0x02DE	; 0x8002de <__iob+0x2>
 95e:	70 91 df 02 	lds	r23, 0x02DF	; 0x8002df <__iob+0x3>
 962:	db 01       	movw	r26, r22
 964:	18 96       	adiw	r26, 0x08	; 8
 966:	ed 91       	ld	r30, X+
 968:	fc 91       	ld	r31, X
 96a:	19 97       	sbiw	r26, 0x09	; 9
 96c:	88 23       	and	r24, r24
 96e:	31 f0       	breq	.+12     	; 0x97c <puts+0x44>
 970:	09 95       	icall
 972:	89 2b       	or	r24, r25
 974:	79 f3       	breq	.-34     	; 0x954 <puts+0x1c>
 976:	df ef       	ldi	r29, 0xFF	; 255
 978:	cf ef       	ldi	r28, 0xFF	; 255
 97a:	ec cf       	rjmp	.-40     	; 0x954 <puts+0x1c>
 97c:	8a e0       	ldi	r24, 0x0A	; 10
 97e:	09 95       	icall
 980:	89 2b       	or	r24, r25
 982:	19 f0       	breq	.+6      	; 0x98a <puts+0x52>
 984:	8f ef       	ldi	r24, 0xFF	; 255
 986:	9f ef       	ldi	r25, 0xFF	; 255
 988:	02 c0       	rjmp	.+4      	; 0x98e <puts+0x56>
 98a:	8d 2f       	mov	r24, r29
 98c:	9c 2f       	mov	r25, r28
 98e:	df 91       	pop	r29
 990:	cf 91       	pop	r28
 992:	1f 91       	pop	r17
 994:	0f 91       	pop	r16
 996:	08 95       	ret

00000998 <snprintf>:
 998:	ae e0       	ldi	r26, 0x0E	; 14
 99a:	b0 e0       	ldi	r27, 0x00	; 0
 99c:	e1 ed       	ldi	r30, 0xD1	; 209
 99e:	f4 e0       	ldi	r31, 0x04	; 4
 9a0:	2c cf       	rjmp	.-424    	; 0x7fa <__prologue_saves__+0x1c>
 9a2:	0d 89       	ldd	r16, Y+21	; 0x15
 9a4:	1e 89       	ldd	r17, Y+22	; 0x16
 9a6:	8f 89       	ldd	r24, Y+23	; 0x17
 9a8:	98 8d       	ldd	r25, Y+24	; 0x18
 9aa:	26 e0       	ldi	r18, 0x06	; 6
 9ac:	2c 83       	std	Y+4, r18	; 0x04
 9ae:	1a 83       	std	Y+2, r17	; 0x02
 9b0:	09 83       	std	Y+1, r16	; 0x01
 9b2:	97 ff       	sbrs	r25, 7
 9b4:	02 c0       	rjmp	.+4      	; 0x9ba <snprintf+0x22>
 9b6:	80 e0       	ldi	r24, 0x00	; 0
 9b8:	90 e8       	ldi	r25, 0x80	; 128
 9ba:	01 97       	sbiw	r24, 0x01	; 1
 9bc:	9e 83       	std	Y+6, r25	; 0x06
 9be:	8d 83       	std	Y+5, r24	; 0x05
 9c0:	ae 01       	movw	r20, r28
 9c2:	45 5e       	subi	r20, 0xE5	; 229
 9c4:	5f 4f       	sbci	r21, 0xFF	; 255
 9c6:	69 8d       	ldd	r22, Y+25	; 0x19
 9c8:	7a 8d       	ldd	r23, Y+26	; 0x1a
 9ca:	ce 01       	movw	r24, r28
 9cc:	01 96       	adiw	r24, 0x01	; 1
 9ce:	11 d0       	rcall	.+34     	; 0x9f2 <vfprintf>
 9d0:	4d 81       	ldd	r20, Y+5	; 0x05
 9d2:	5e 81       	ldd	r21, Y+6	; 0x06
 9d4:	57 fd       	sbrc	r21, 7
 9d6:	0a c0       	rjmp	.+20     	; 0x9ec <snprintf+0x54>
 9d8:	2f 81       	ldd	r18, Y+7	; 0x07
 9da:	38 85       	ldd	r19, Y+8	; 0x08
 9dc:	42 17       	cp	r20, r18
 9de:	53 07       	cpc	r21, r19
 9e0:	0c f4       	brge	.+2      	; 0x9e4 <snprintf+0x4c>
 9e2:	9a 01       	movw	r18, r20
 9e4:	f8 01       	movw	r30, r16
 9e6:	e2 0f       	add	r30, r18
 9e8:	f3 1f       	adc	r31, r19
 9ea:	10 82       	st	Z, r1
 9ec:	2e 96       	adiw	r28, 0x0e	; 14
 9ee:	e4 e0       	ldi	r30, 0x04	; 4
 9f0:	20 cf       	rjmp	.-448    	; 0x832 <__epilogue_restores__+0x1c>

000009f2 <vfprintf>:
 9f2:	ab e0       	ldi	r26, 0x0B	; 11
 9f4:	b0 e0       	ldi	r27, 0x00	; 0
 9f6:	ee ef       	ldi	r30, 0xFE	; 254
 9f8:	f4 e0       	ldi	r31, 0x04	; 4
 9fa:	f1 ce       	rjmp	.-542    	; 0x7de <__prologue_saves__>
 9fc:	6c 01       	movw	r12, r24
 9fe:	7b 01       	movw	r14, r22
 a00:	8a 01       	movw	r16, r20
 a02:	fc 01       	movw	r30, r24
 a04:	17 82       	std	Z+7, r1	; 0x07
 a06:	16 82       	std	Z+6, r1	; 0x06
 a08:	83 81       	ldd	r24, Z+3	; 0x03
 a0a:	81 ff       	sbrs	r24, 1
 a0c:	bf c1       	rjmp	.+894    	; 0xd8c <vfprintf+0x39a>
 a0e:	ce 01       	movw	r24, r28
 a10:	01 96       	adiw	r24, 0x01	; 1
 a12:	3c 01       	movw	r6, r24
 a14:	f6 01       	movw	r30, r12
 a16:	93 81       	ldd	r25, Z+3	; 0x03
 a18:	f7 01       	movw	r30, r14
 a1a:	93 fd       	sbrc	r25, 3
 a1c:	85 91       	lpm	r24, Z+
 a1e:	93 ff       	sbrs	r25, 3
 a20:	81 91       	ld	r24, Z+
 a22:	7f 01       	movw	r14, r30
 a24:	88 23       	and	r24, r24
 a26:	09 f4       	brne	.+2      	; 0xa2a <vfprintf+0x38>
 a28:	ad c1       	rjmp	.+858    	; 0xd84 <vfprintf+0x392>
 a2a:	85 32       	cpi	r24, 0x25	; 37
 a2c:	39 f4       	brne	.+14     	; 0xa3c <vfprintf+0x4a>
 a2e:	93 fd       	sbrc	r25, 3
 a30:	85 91       	lpm	r24, Z+
 a32:	93 ff       	sbrs	r25, 3
 a34:	81 91       	ld	r24, Z+
 a36:	7f 01       	movw	r14, r30
 a38:	85 32       	cpi	r24, 0x25	; 37
 a3a:	21 f4       	brne	.+8      	; 0xa44 <vfprintf+0x52>
 a3c:	b6 01       	movw	r22, r12
 a3e:	90 e0       	ldi	r25, 0x00	; 0
 a40:	c0 d1       	rcall	.+896    	; 0xdc2 <fputc>
 a42:	e8 cf       	rjmp	.-48     	; 0xa14 <vfprintf+0x22>
 a44:	91 2c       	mov	r9, r1
 a46:	21 2c       	mov	r2, r1
 a48:	31 2c       	mov	r3, r1
 a4a:	ff e1       	ldi	r31, 0x1F	; 31
 a4c:	f3 15       	cp	r31, r3
 a4e:	d8 f0       	brcs	.+54     	; 0xa86 <vfprintf+0x94>
 a50:	8b 32       	cpi	r24, 0x2B	; 43
 a52:	79 f0       	breq	.+30     	; 0xa72 <vfprintf+0x80>
 a54:	38 f4       	brcc	.+14     	; 0xa64 <vfprintf+0x72>
 a56:	80 32       	cpi	r24, 0x20	; 32
 a58:	79 f0       	breq	.+30     	; 0xa78 <vfprintf+0x86>
 a5a:	83 32       	cpi	r24, 0x23	; 35
 a5c:	a1 f4       	brne	.+40     	; 0xa86 <vfprintf+0x94>
 a5e:	23 2d       	mov	r18, r3
 a60:	20 61       	ori	r18, 0x10	; 16
 a62:	1d c0       	rjmp	.+58     	; 0xa9e <vfprintf+0xac>
 a64:	8d 32       	cpi	r24, 0x2D	; 45
 a66:	61 f0       	breq	.+24     	; 0xa80 <vfprintf+0x8e>
 a68:	80 33       	cpi	r24, 0x30	; 48
 a6a:	69 f4       	brne	.+26     	; 0xa86 <vfprintf+0x94>
 a6c:	23 2d       	mov	r18, r3
 a6e:	21 60       	ori	r18, 0x01	; 1
 a70:	16 c0       	rjmp	.+44     	; 0xa9e <vfprintf+0xac>
 a72:	83 2d       	mov	r24, r3
 a74:	82 60       	ori	r24, 0x02	; 2
 a76:	38 2e       	mov	r3, r24
 a78:	e3 2d       	mov	r30, r3
 a7a:	e4 60       	ori	r30, 0x04	; 4
 a7c:	3e 2e       	mov	r3, r30
 a7e:	2a c0       	rjmp	.+84     	; 0xad4 <vfprintf+0xe2>
 a80:	f3 2d       	mov	r31, r3
 a82:	f8 60       	ori	r31, 0x08	; 8
 a84:	1d c0       	rjmp	.+58     	; 0xac0 <vfprintf+0xce>
 a86:	37 fc       	sbrc	r3, 7
 a88:	2d c0       	rjmp	.+90     	; 0xae4 <vfprintf+0xf2>
 a8a:	20 ed       	ldi	r18, 0xD0	; 208
 a8c:	28 0f       	add	r18, r24
 a8e:	2a 30       	cpi	r18, 0x0A	; 10
 a90:	40 f0       	brcs	.+16     	; 0xaa2 <vfprintf+0xb0>
 a92:	8e 32       	cpi	r24, 0x2E	; 46
 a94:	b9 f4       	brne	.+46     	; 0xac4 <vfprintf+0xd2>
 a96:	36 fc       	sbrc	r3, 6
 a98:	75 c1       	rjmp	.+746    	; 0xd84 <vfprintf+0x392>
 a9a:	23 2d       	mov	r18, r3
 a9c:	20 64       	ori	r18, 0x40	; 64
 a9e:	32 2e       	mov	r3, r18
 aa0:	19 c0       	rjmp	.+50     	; 0xad4 <vfprintf+0xe2>
 aa2:	36 fe       	sbrs	r3, 6
 aa4:	06 c0       	rjmp	.+12     	; 0xab2 <vfprintf+0xc0>
 aa6:	8a e0       	ldi	r24, 0x0A	; 10
 aa8:	98 9e       	mul	r9, r24
 aaa:	20 0d       	add	r18, r0
 aac:	11 24       	eor	r1, r1
 aae:	92 2e       	mov	r9, r18
 ab0:	11 c0       	rjmp	.+34     	; 0xad4 <vfprintf+0xe2>
 ab2:	ea e0       	ldi	r30, 0x0A	; 10
 ab4:	2e 9e       	mul	r2, r30
 ab6:	20 0d       	add	r18, r0
 ab8:	11 24       	eor	r1, r1
 aba:	22 2e       	mov	r2, r18
 abc:	f3 2d       	mov	r31, r3
 abe:	f0 62       	ori	r31, 0x20	; 32
 ac0:	3f 2e       	mov	r3, r31
 ac2:	08 c0       	rjmp	.+16     	; 0xad4 <vfprintf+0xe2>
 ac4:	8c 36       	cpi	r24, 0x6C	; 108
 ac6:	21 f4       	brne	.+8      	; 0xad0 <vfprintf+0xde>
 ac8:	83 2d       	mov	r24, r3
 aca:	80 68       	ori	r24, 0x80	; 128
 acc:	38 2e       	mov	r3, r24
 ace:	02 c0       	rjmp	.+4      	; 0xad4 <vfprintf+0xe2>
 ad0:	88 36       	cpi	r24, 0x68	; 104
 ad2:	41 f4       	brne	.+16     	; 0xae4 <vfprintf+0xf2>
 ad4:	f7 01       	movw	r30, r14
 ad6:	93 fd       	sbrc	r25, 3
 ad8:	85 91       	lpm	r24, Z+
 ada:	93 ff       	sbrs	r25, 3
 adc:	81 91       	ld	r24, Z+
 ade:	7f 01       	movw	r14, r30
 ae0:	81 11       	cpse	r24, r1
 ae2:	b3 cf       	rjmp	.-154    	; 0xa4a <vfprintf+0x58>
 ae4:	98 2f       	mov	r25, r24
 ae6:	9f 7d       	andi	r25, 0xDF	; 223
 ae8:	95 54       	subi	r25, 0x45	; 69
 aea:	93 30       	cpi	r25, 0x03	; 3
 aec:	28 f4       	brcc	.+10     	; 0xaf8 <vfprintf+0x106>
 aee:	0c 5f       	subi	r16, 0xFC	; 252
 af0:	1f 4f       	sbci	r17, 0xFF	; 255
 af2:	9f e3       	ldi	r25, 0x3F	; 63
 af4:	99 83       	std	Y+1, r25	; 0x01
 af6:	0d c0       	rjmp	.+26     	; 0xb12 <vfprintf+0x120>
 af8:	83 36       	cpi	r24, 0x63	; 99
 afa:	31 f0       	breq	.+12     	; 0xb08 <vfprintf+0x116>
 afc:	83 37       	cpi	r24, 0x73	; 115
 afe:	71 f0       	breq	.+28     	; 0xb1c <vfprintf+0x12a>
 b00:	83 35       	cpi	r24, 0x53	; 83
 b02:	09 f0       	breq	.+2      	; 0xb06 <vfprintf+0x114>
 b04:	55 c0       	rjmp	.+170    	; 0xbb0 <vfprintf+0x1be>
 b06:	20 c0       	rjmp	.+64     	; 0xb48 <vfprintf+0x156>
 b08:	f8 01       	movw	r30, r16
 b0a:	80 81       	ld	r24, Z
 b0c:	89 83       	std	Y+1, r24	; 0x01
 b0e:	0e 5f       	subi	r16, 0xFE	; 254
 b10:	1f 4f       	sbci	r17, 0xFF	; 255
 b12:	88 24       	eor	r8, r8
 b14:	83 94       	inc	r8
 b16:	91 2c       	mov	r9, r1
 b18:	53 01       	movw	r10, r6
 b1a:	12 c0       	rjmp	.+36     	; 0xb40 <vfprintf+0x14e>
 b1c:	28 01       	movw	r4, r16
 b1e:	f2 e0       	ldi	r31, 0x02	; 2
 b20:	4f 0e       	add	r4, r31
 b22:	51 1c       	adc	r5, r1
 b24:	f8 01       	movw	r30, r16
 b26:	a0 80       	ld	r10, Z
 b28:	b1 80       	ldd	r11, Z+1	; 0x01
 b2a:	36 fe       	sbrs	r3, 6
 b2c:	03 c0       	rjmp	.+6      	; 0xb34 <vfprintf+0x142>
 b2e:	69 2d       	mov	r22, r9
 b30:	70 e0       	ldi	r23, 0x00	; 0
 b32:	02 c0       	rjmp	.+4      	; 0xb38 <vfprintf+0x146>
 b34:	6f ef       	ldi	r22, 0xFF	; 255
 b36:	7f ef       	ldi	r23, 0xFF	; 255
 b38:	c5 01       	movw	r24, r10
 b3a:	38 d1       	rcall	.+624    	; 0xdac <strnlen>
 b3c:	4c 01       	movw	r8, r24
 b3e:	82 01       	movw	r16, r4
 b40:	f3 2d       	mov	r31, r3
 b42:	ff 77       	andi	r31, 0x7F	; 127
 b44:	3f 2e       	mov	r3, r31
 b46:	15 c0       	rjmp	.+42     	; 0xb72 <vfprintf+0x180>
 b48:	28 01       	movw	r4, r16
 b4a:	22 e0       	ldi	r18, 0x02	; 2
 b4c:	42 0e       	add	r4, r18
 b4e:	51 1c       	adc	r5, r1
 b50:	f8 01       	movw	r30, r16
 b52:	a0 80       	ld	r10, Z
 b54:	b1 80       	ldd	r11, Z+1	; 0x01
 b56:	36 fe       	sbrs	r3, 6
 b58:	03 c0       	rjmp	.+6      	; 0xb60 <vfprintf+0x16e>
 b5a:	69 2d       	mov	r22, r9
 b5c:	70 e0       	ldi	r23, 0x00	; 0
 b5e:	02 c0       	rjmp	.+4      	; 0xb64 <vfprintf+0x172>
 b60:	6f ef       	ldi	r22, 0xFF	; 255
 b62:	7f ef       	ldi	r23, 0xFF	; 255
 b64:	c5 01       	movw	r24, r10
 b66:	17 d1       	rcall	.+558    	; 0xd96 <strnlen_P>
 b68:	4c 01       	movw	r8, r24
 b6a:	f3 2d       	mov	r31, r3
 b6c:	f0 68       	ori	r31, 0x80	; 128
 b6e:	3f 2e       	mov	r3, r31
 b70:	82 01       	movw	r16, r4
 b72:	33 fc       	sbrc	r3, 3
 b74:	19 c0       	rjmp	.+50     	; 0xba8 <vfprintf+0x1b6>
 b76:	82 2d       	mov	r24, r2
 b78:	90 e0       	ldi	r25, 0x00	; 0
 b7a:	88 16       	cp	r8, r24
 b7c:	99 06       	cpc	r9, r25
 b7e:	a0 f4       	brcc	.+40     	; 0xba8 <vfprintf+0x1b6>
 b80:	b6 01       	movw	r22, r12
 b82:	80 e2       	ldi	r24, 0x20	; 32
 b84:	90 e0       	ldi	r25, 0x00	; 0
 b86:	1d d1       	rcall	.+570    	; 0xdc2 <fputc>
 b88:	2a 94       	dec	r2
 b8a:	f5 cf       	rjmp	.-22     	; 0xb76 <vfprintf+0x184>
 b8c:	f5 01       	movw	r30, r10
 b8e:	37 fc       	sbrc	r3, 7
 b90:	85 91       	lpm	r24, Z+
 b92:	37 fe       	sbrs	r3, 7
 b94:	81 91       	ld	r24, Z+
 b96:	5f 01       	movw	r10, r30
 b98:	b6 01       	movw	r22, r12
 b9a:	90 e0       	ldi	r25, 0x00	; 0
 b9c:	12 d1       	rcall	.+548    	; 0xdc2 <fputc>
 b9e:	21 10       	cpse	r2, r1
 ba0:	2a 94       	dec	r2
 ba2:	21 e0       	ldi	r18, 0x01	; 1
 ba4:	82 1a       	sub	r8, r18
 ba6:	91 08       	sbc	r9, r1
 ba8:	81 14       	cp	r8, r1
 baa:	91 04       	cpc	r9, r1
 bac:	79 f7       	brne	.-34     	; 0xb8c <vfprintf+0x19a>
 bae:	e1 c0       	rjmp	.+450    	; 0xd72 <vfprintf+0x380>
 bb0:	84 36       	cpi	r24, 0x64	; 100
 bb2:	11 f0       	breq	.+4      	; 0xbb8 <vfprintf+0x1c6>
 bb4:	89 36       	cpi	r24, 0x69	; 105
 bb6:	39 f5       	brne	.+78     	; 0xc06 <vfprintf+0x214>
 bb8:	f8 01       	movw	r30, r16
 bba:	37 fe       	sbrs	r3, 7
 bbc:	07 c0       	rjmp	.+14     	; 0xbcc <vfprintf+0x1da>
 bbe:	60 81       	ld	r22, Z
 bc0:	71 81       	ldd	r23, Z+1	; 0x01
 bc2:	82 81       	ldd	r24, Z+2	; 0x02
 bc4:	93 81       	ldd	r25, Z+3	; 0x03
 bc6:	0c 5f       	subi	r16, 0xFC	; 252
 bc8:	1f 4f       	sbci	r17, 0xFF	; 255
 bca:	08 c0       	rjmp	.+16     	; 0xbdc <vfprintf+0x1ea>
 bcc:	60 81       	ld	r22, Z
 bce:	71 81       	ldd	r23, Z+1	; 0x01
 bd0:	07 2e       	mov	r0, r23
 bd2:	00 0c       	add	r0, r0
 bd4:	88 0b       	sbc	r24, r24
 bd6:	99 0b       	sbc	r25, r25
 bd8:	0e 5f       	subi	r16, 0xFE	; 254
 bda:	1f 4f       	sbci	r17, 0xFF	; 255
 bdc:	f3 2d       	mov	r31, r3
 bde:	ff 76       	andi	r31, 0x6F	; 111
 be0:	3f 2e       	mov	r3, r31
 be2:	97 ff       	sbrs	r25, 7
 be4:	09 c0       	rjmp	.+18     	; 0xbf8 <vfprintf+0x206>
 be6:	90 95       	com	r25
 be8:	80 95       	com	r24
 bea:	70 95       	com	r23
 bec:	61 95       	neg	r22
 bee:	7f 4f       	sbci	r23, 0xFF	; 255
 bf0:	8f 4f       	sbci	r24, 0xFF	; 255
 bf2:	9f 4f       	sbci	r25, 0xFF	; 255
 bf4:	f0 68       	ori	r31, 0x80	; 128
 bf6:	3f 2e       	mov	r3, r31
 bf8:	2a e0       	ldi	r18, 0x0A	; 10
 bfa:	30 e0       	ldi	r19, 0x00	; 0
 bfc:	a3 01       	movw	r20, r6
 bfe:	1d d1       	rcall	.+570    	; 0xe3a <__ultoa_invert>
 c00:	88 2e       	mov	r8, r24
 c02:	86 18       	sub	r8, r6
 c04:	44 c0       	rjmp	.+136    	; 0xc8e <vfprintf+0x29c>
 c06:	85 37       	cpi	r24, 0x75	; 117
 c08:	31 f4       	brne	.+12     	; 0xc16 <vfprintf+0x224>
 c0a:	23 2d       	mov	r18, r3
 c0c:	2f 7e       	andi	r18, 0xEF	; 239
 c0e:	b2 2e       	mov	r11, r18
 c10:	2a e0       	ldi	r18, 0x0A	; 10
 c12:	30 e0       	ldi	r19, 0x00	; 0
 c14:	25 c0       	rjmp	.+74     	; 0xc60 <vfprintf+0x26e>
 c16:	93 2d       	mov	r25, r3
 c18:	99 7f       	andi	r25, 0xF9	; 249
 c1a:	b9 2e       	mov	r11, r25
 c1c:	8f 36       	cpi	r24, 0x6F	; 111
 c1e:	c1 f0       	breq	.+48     	; 0xc50 <vfprintf+0x25e>
 c20:	18 f4       	brcc	.+6      	; 0xc28 <vfprintf+0x236>
 c22:	88 35       	cpi	r24, 0x58	; 88
 c24:	79 f0       	breq	.+30     	; 0xc44 <vfprintf+0x252>
 c26:	ae c0       	rjmp	.+348    	; 0xd84 <vfprintf+0x392>
 c28:	80 37       	cpi	r24, 0x70	; 112
 c2a:	19 f0       	breq	.+6      	; 0xc32 <vfprintf+0x240>
 c2c:	88 37       	cpi	r24, 0x78	; 120
 c2e:	21 f0       	breq	.+8      	; 0xc38 <vfprintf+0x246>
 c30:	a9 c0       	rjmp	.+338    	; 0xd84 <vfprintf+0x392>
 c32:	e9 2f       	mov	r30, r25
 c34:	e0 61       	ori	r30, 0x10	; 16
 c36:	be 2e       	mov	r11, r30
 c38:	b4 fe       	sbrs	r11, 4
 c3a:	0d c0       	rjmp	.+26     	; 0xc56 <vfprintf+0x264>
 c3c:	fb 2d       	mov	r31, r11
 c3e:	f4 60       	ori	r31, 0x04	; 4
 c40:	bf 2e       	mov	r11, r31
 c42:	09 c0       	rjmp	.+18     	; 0xc56 <vfprintf+0x264>
 c44:	34 fe       	sbrs	r3, 4
 c46:	0a c0       	rjmp	.+20     	; 0xc5c <vfprintf+0x26a>
 c48:	29 2f       	mov	r18, r25
 c4a:	26 60       	ori	r18, 0x06	; 6
 c4c:	b2 2e       	mov	r11, r18
 c4e:	06 c0       	rjmp	.+12     	; 0xc5c <vfprintf+0x26a>
 c50:	28 e0       	ldi	r18, 0x08	; 8
 c52:	30 e0       	ldi	r19, 0x00	; 0
 c54:	05 c0       	rjmp	.+10     	; 0xc60 <vfprintf+0x26e>
 c56:	20 e1       	ldi	r18, 0x10	; 16
 c58:	30 e0       	ldi	r19, 0x00	; 0
 c5a:	02 c0       	rjmp	.+4      	; 0xc60 <vfprintf+0x26e>
 c5c:	20 e1       	ldi	r18, 0x10	; 16
 c5e:	32 e0       	ldi	r19, 0x02	; 2
 c60:	f8 01       	movw	r30, r16
 c62:	b7 fe       	sbrs	r11, 7
 c64:	07 c0       	rjmp	.+14     	; 0xc74 <vfprintf+0x282>
 c66:	60 81       	ld	r22, Z
 c68:	71 81       	ldd	r23, Z+1	; 0x01
 c6a:	82 81       	ldd	r24, Z+2	; 0x02
 c6c:	93 81       	ldd	r25, Z+3	; 0x03
 c6e:	0c 5f       	subi	r16, 0xFC	; 252
 c70:	1f 4f       	sbci	r17, 0xFF	; 255
 c72:	06 c0       	rjmp	.+12     	; 0xc80 <vfprintf+0x28e>
 c74:	60 81       	ld	r22, Z
 c76:	71 81       	ldd	r23, Z+1	; 0x01
 c78:	80 e0       	ldi	r24, 0x00	; 0
 c7a:	90 e0       	ldi	r25, 0x00	; 0
 c7c:	0e 5f       	subi	r16, 0xFE	; 254
 c7e:	1f 4f       	sbci	r17, 0xFF	; 255
 c80:	a3 01       	movw	r20, r6
 c82:	db d0       	rcall	.+438    	; 0xe3a <__ultoa_invert>
 c84:	88 2e       	mov	r8, r24
 c86:	86 18       	sub	r8, r6
 c88:	fb 2d       	mov	r31, r11
 c8a:	ff 77       	andi	r31, 0x7F	; 127
 c8c:	3f 2e       	mov	r3, r31
 c8e:	36 fe       	sbrs	r3, 6
 c90:	0d c0       	rjmp	.+26     	; 0xcac <vfprintf+0x2ba>
 c92:	23 2d       	mov	r18, r3
 c94:	2e 7f       	andi	r18, 0xFE	; 254
 c96:	a2 2e       	mov	r10, r18
 c98:	89 14       	cp	r8, r9
 c9a:	58 f4       	brcc	.+22     	; 0xcb2 <vfprintf+0x2c0>
 c9c:	34 fe       	sbrs	r3, 4
 c9e:	0b c0       	rjmp	.+22     	; 0xcb6 <vfprintf+0x2c4>
 ca0:	32 fc       	sbrc	r3, 2
 ca2:	09 c0       	rjmp	.+18     	; 0xcb6 <vfprintf+0x2c4>
 ca4:	83 2d       	mov	r24, r3
 ca6:	8e 7e       	andi	r24, 0xEE	; 238
 ca8:	a8 2e       	mov	r10, r24
 caa:	05 c0       	rjmp	.+10     	; 0xcb6 <vfprintf+0x2c4>
 cac:	b8 2c       	mov	r11, r8
 cae:	a3 2c       	mov	r10, r3
 cb0:	03 c0       	rjmp	.+6      	; 0xcb8 <vfprintf+0x2c6>
 cb2:	b8 2c       	mov	r11, r8
 cb4:	01 c0       	rjmp	.+2      	; 0xcb8 <vfprintf+0x2c6>
 cb6:	b9 2c       	mov	r11, r9
 cb8:	a4 fe       	sbrs	r10, 4
 cba:	0f c0       	rjmp	.+30     	; 0xcda <vfprintf+0x2e8>
 cbc:	fe 01       	movw	r30, r28
 cbe:	e8 0d       	add	r30, r8
 cc0:	f1 1d       	adc	r31, r1
 cc2:	80 81       	ld	r24, Z
 cc4:	80 33       	cpi	r24, 0x30	; 48
 cc6:	21 f4       	brne	.+8      	; 0xcd0 <vfprintf+0x2de>
 cc8:	9a 2d       	mov	r25, r10
 cca:	99 7e       	andi	r25, 0xE9	; 233
 ccc:	a9 2e       	mov	r10, r25
 cce:	09 c0       	rjmp	.+18     	; 0xce2 <vfprintf+0x2f0>
 cd0:	a2 fe       	sbrs	r10, 2
 cd2:	06 c0       	rjmp	.+12     	; 0xce0 <vfprintf+0x2ee>
 cd4:	b3 94       	inc	r11
 cd6:	b3 94       	inc	r11
 cd8:	04 c0       	rjmp	.+8      	; 0xce2 <vfprintf+0x2f0>
 cda:	8a 2d       	mov	r24, r10
 cdc:	86 78       	andi	r24, 0x86	; 134
 cde:	09 f0       	breq	.+2      	; 0xce2 <vfprintf+0x2f0>
 ce0:	b3 94       	inc	r11
 ce2:	a3 fc       	sbrc	r10, 3
 ce4:	10 c0       	rjmp	.+32     	; 0xd06 <vfprintf+0x314>
 ce6:	a0 fe       	sbrs	r10, 0
 ce8:	06 c0       	rjmp	.+12     	; 0xcf6 <vfprintf+0x304>
 cea:	b2 14       	cp	r11, r2
 cec:	80 f4       	brcc	.+32     	; 0xd0e <vfprintf+0x31c>
 cee:	28 0c       	add	r2, r8
 cf0:	92 2c       	mov	r9, r2
 cf2:	9b 18       	sub	r9, r11
 cf4:	0d c0       	rjmp	.+26     	; 0xd10 <vfprintf+0x31e>
 cf6:	b2 14       	cp	r11, r2
 cf8:	58 f4       	brcc	.+22     	; 0xd10 <vfprintf+0x31e>
 cfa:	b6 01       	movw	r22, r12
 cfc:	80 e2       	ldi	r24, 0x20	; 32
 cfe:	90 e0       	ldi	r25, 0x00	; 0
 d00:	60 d0       	rcall	.+192    	; 0xdc2 <fputc>
 d02:	b3 94       	inc	r11
 d04:	f8 cf       	rjmp	.-16     	; 0xcf6 <vfprintf+0x304>
 d06:	b2 14       	cp	r11, r2
 d08:	18 f4       	brcc	.+6      	; 0xd10 <vfprintf+0x31e>
 d0a:	2b 18       	sub	r2, r11
 d0c:	02 c0       	rjmp	.+4      	; 0xd12 <vfprintf+0x320>
 d0e:	98 2c       	mov	r9, r8
 d10:	21 2c       	mov	r2, r1
 d12:	a4 fe       	sbrs	r10, 4
 d14:	0f c0       	rjmp	.+30     	; 0xd34 <vfprintf+0x342>
 d16:	b6 01       	movw	r22, r12
 d18:	80 e3       	ldi	r24, 0x30	; 48
 d1a:	90 e0       	ldi	r25, 0x00	; 0
 d1c:	52 d0       	rcall	.+164    	; 0xdc2 <fputc>
 d1e:	a2 fe       	sbrs	r10, 2
 d20:	16 c0       	rjmp	.+44     	; 0xd4e <vfprintf+0x35c>
 d22:	a1 fc       	sbrc	r10, 1
 d24:	03 c0       	rjmp	.+6      	; 0xd2c <vfprintf+0x33a>
 d26:	88 e7       	ldi	r24, 0x78	; 120
 d28:	90 e0       	ldi	r25, 0x00	; 0
 d2a:	02 c0       	rjmp	.+4      	; 0xd30 <vfprintf+0x33e>
 d2c:	88 e5       	ldi	r24, 0x58	; 88
 d2e:	90 e0       	ldi	r25, 0x00	; 0
 d30:	b6 01       	movw	r22, r12
 d32:	0c c0       	rjmp	.+24     	; 0xd4c <vfprintf+0x35a>
 d34:	8a 2d       	mov	r24, r10
 d36:	86 78       	andi	r24, 0x86	; 134
 d38:	51 f0       	breq	.+20     	; 0xd4e <vfprintf+0x35c>
 d3a:	a1 fe       	sbrs	r10, 1
 d3c:	02 c0       	rjmp	.+4      	; 0xd42 <vfprintf+0x350>
 d3e:	8b e2       	ldi	r24, 0x2B	; 43
 d40:	01 c0       	rjmp	.+2      	; 0xd44 <vfprintf+0x352>
 d42:	80 e2       	ldi	r24, 0x20	; 32
 d44:	a7 fc       	sbrc	r10, 7
 d46:	8d e2       	ldi	r24, 0x2D	; 45
 d48:	b6 01       	movw	r22, r12
 d4a:	90 e0       	ldi	r25, 0x00	; 0
 d4c:	3a d0       	rcall	.+116    	; 0xdc2 <fputc>
 d4e:	89 14       	cp	r8, r9
 d50:	30 f4       	brcc	.+12     	; 0xd5e <vfprintf+0x36c>
 d52:	b6 01       	movw	r22, r12
 d54:	80 e3       	ldi	r24, 0x30	; 48
 d56:	90 e0       	ldi	r25, 0x00	; 0
 d58:	34 d0       	rcall	.+104    	; 0xdc2 <fputc>
 d5a:	9a 94       	dec	r9
 d5c:	f8 cf       	rjmp	.-16     	; 0xd4e <vfprintf+0x35c>
 d5e:	8a 94       	dec	r8
 d60:	f3 01       	movw	r30, r6
 d62:	e8 0d       	add	r30, r8
 d64:	f1 1d       	adc	r31, r1
 d66:	80 81       	ld	r24, Z
 d68:	b6 01       	movw	r22, r12
 d6a:	90 e0       	ldi	r25, 0x00	; 0
 d6c:	2a d0       	rcall	.+84     	; 0xdc2 <fputc>
 d6e:	81 10       	cpse	r8, r1
 d70:	f6 cf       	rjmp	.-20     	; 0xd5e <vfprintf+0x36c>
 d72:	22 20       	and	r2, r2
 d74:	09 f4       	brne	.+2      	; 0xd78 <vfprintf+0x386>
 d76:	4e ce       	rjmp	.-868    	; 0xa14 <vfprintf+0x22>
 d78:	b6 01       	movw	r22, r12
 d7a:	80 e2       	ldi	r24, 0x20	; 32
 d7c:	90 e0       	ldi	r25, 0x00	; 0
 d7e:	21 d0       	rcall	.+66     	; 0xdc2 <fputc>
 d80:	2a 94       	dec	r2
 d82:	f7 cf       	rjmp	.-18     	; 0xd72 <vfprintf+0x380>
 d84:	f6 01       	movw	r30, r12
 d86:	86 81       	ldd	r24, Z+6	; 0x06
 d88:	97 81       	ldd	r25, Z+7	; 0x07
 d8a:	02 c0       	rjmp	.+4      	; 0xd90 <vfprintf+0x39e>
 d8c:	8f ef       	ldi	r24, 0xFF	; 255
 d8e:	9f ef       	ldi	r25, 0xFF	; 255
 d90:	2b 96       	adiw	r28, 0x0b	; 11
 d92:	e2 e1       	ldi	r30, 0x12	; 18
 d94:	40 cd       	rjmp	.-1408   	; 0x816 <__epilogue_restores__>

00000d96 <strnlen_P>:
 d96:	fc 01       	movw	r30, r24
 d98:	05 90       	lpm	r0, Z+
 d9a:	61 50       	subi	r22, 0x01	; 1
 d9c:	70 40       	sbci	r23, 0x00	; 0
 d9e:	01 10       	cpse	r0, r1
 da0:	d8 f7       	brcc	.-10     	; 0xd98 <strnlen_P+0x2>
 da2:	80 95       	com	r24
 da4:	90 95       	com	r25
 da6:	8e 0f       	add	r24, r30
 da8:	9f 1f       	adc	r25, r31
 daa:	08 95       	ret

00000dac <strnlen>:
 dac:	fc 01       	movw	r30, r24
 dae:	61 50       	subi	r22, 0x01	; 1
 db0:	70 40       	sbci	r23, 0x00	; 0
 db2:	01 90       	ld	r0, Z+
 db4:	01 10       	cpse	r0, r1
 db6:	d8 f7       	brcc	.-10     	; 0xdae <strnlen+0x2>
 db8:	80 95       	com	r24
 dba:	90 95       	com	r25
 dbc:	8e 0f       	add	r24, r30
 dbe:	9f 1f       	adc	r25, r31
 dc0:	08 95       	ret

00000dc2 <fputc>:
 dc2:	0f 93       	push	r16
 dc4:	1f 93       	push	r17
 dc6:	cf 93       	push	r28
 dc8:	df 93       	push	r29
 dca:	fb 01       	movw	r30, r22
 dcc:	23 81       	ldd	r18, Z+3	; 0x03
 dce:	21 fd       	sbrc	r18, 1
 dd0:	03 c0       	rjmp	.+6      	; 0xdd8 <fputc+0x16>
 dd2:	8f ef       	ldi	r24, 0xFF	; 255
 dd4:	9f ef       	ldi	r25, 0xFF	; 255
 dd6:	2c c0       	rjmp	.+88     	; 0xe30 <fputc+0x6e>
 dd8:	22 ff       	sbrs	r18, 2
 dda:	16 c0       	rjmp	.+44     	; 0xe08 <fputc+0x46>
 ddc:	46 81       	ldd	r20, Z+6	; 0x06
 dde:	57 81       	ldd	r21, Z+7	; 0x07
 de0:	24 81       	ldd	r18, Z+4	; 0x04
 de2:	35 81       	ldd	r19, Z+5	; 0x05
 de4:	42 17       	cp	r20, r18
 de6:	53 07       	cpc	r21, r19
 de8:	44 f4       	brge	.+16     	; 0xdfa <fputc+0x38>
 dea:	a0 81       	ld	r26, Z
 dec:	b1 81       	ldd	r27, Z+1	; 0x01
 dee:	9d 01       	movw	r18, r26
 df0:	2f 5f       	subi	r18, 0xFF	; 255
 df2:	3f 4f       	sbci	r19, 0xFF	; 255
 df4:	31 83       	std	Z+1, r19	; 0x01
 df6:	20 83       	st	Z, r18
 df8:	8c 93       	st	X, r24
 dfa:	26 81       	ldd	r18, Z+6	; 0x06
 dfc:	37 81       	ldd	r19, Z+7	; 0x07
 dfe:	2f 5f       	subi	r18, 0xFF	; 255
 e00:	3f 4f       	sbci	r19, 0xFF	; 255
 e02:	37 83       	std	Z+7, r19	; 0x07
 e04:	26 83       	std	Z+6, r18	; 0x06
 e06:	14 c0       	rjmp	.+40     	; 0xe30 <fputc+0x6e>
 e08:	8b 01       	movw	r16, r22
 e0a:	ec 01       	movw	r28, r24
 e0c:	fb 01       	movw	r30, r22
 e0e:	00 84       	ldd	r0, Z+8	; 0x08
 e10:	f1 85       	ldd	r31, Z+9	; 0x09
 e12:	e0 2d       	mov	r30, r0
 e14:	09 95       	icall
 e16:	89 2b       	or	r24, r25
 e18:	e1 f6       	brne	.-72     	; 0xdd2 <fputc+0x10>
 e1a:	d8 01       	movw	r26, r16
 e1c:	16 96       	adiw	r26, 0x06	; 6
 e1e:	8d 91       	ld	r24, X+
 e20:	9c 91       	ld	r25, X
 e22:	17 97       	sbiw	r26, 0x07	; 7
 e24:	01 96       	adiw	r24, 0x01	; 1
 e26:	17 96       	adiw	r26, 0x07	; 7
 e28:	9c 93       	st	X, r25
 e2a:	8e 93       	st	-X, r24
 e2c:	16 97       	sbiw	r26, 0x06	; 6
 e2e:	ce 01       	movw	r24, r28
 e30:	df 91       	pop	r29
 e32:	cf 91       	pop	r28
 e34:	1f 91       	pop	r17
 e36:	0f 91       	pop	r16
 e38:	08 95       	ret

00000e3a <__ultoa_invert>:
 e3a:	fa 01       	movw	r30, r20
 e3c:	aa 27       	eor	r26, r26
 e3e:	28 30       	cpi	r18, 0x08	; 8
 e40:	51 f1       	breq	.+84     	; 0xe96 <__ultoa_invert+0x5c>
 e42:	20 31       	cpi	r18, 0x10	; 16
 e44:	81 f1       	breq	.+96     	; 0xea6 <__ultoa_invert+0x6c>
 e46:	e8 94       	clt
 e48:	6f 93       	push	r22
 e4a:	6e 7f       	andi	r22, 0xFE	; 254
 e4c:	6e 5f       	subi	r22, 0xFE	; 254
 e4e:	7f 4f       	sbci	r23, 0xFF	; 255
 e50:	8f 4f       	sbci	r24, 0xFF	; 255
 e52:	9f 4f       	sbci	r25, 0xFF	; 255
 e54:	af 4f       	sbci	r26, 0xFF	; 255
 e56:	b1 e0       	ldi	r27, 0x01	; 1
 e58:	3e d0       	rcall	.+124    	; 0xed6 <__ultoa_invert+0x9c>
 e5a:	b4 e0       	ldi	r27, 0x04	; 4
 e5c:	3c d0       	rcall	.+120    	; 0xed6 <__ultoa_invert+0x9c>
 e5e:	67 0f       	add	r22, r23
 e60:	78 1f       	adc	r23, r24
 e62:	89 1f       	adc	r24, r25
 e64:	9a 1f       	adc	r25, r26
 e66:	a1 1d       	adc	r26, r1
 e68:	68 0f       	add	r22, r24
 e6a:	79 1f       	adc	r23, r25
 e6c:	8a 1f       	adc	r24, r26
 e6e:	91 1d       	adc	r25, r1
 e70:	a1 1d       	adc	r26, r1
 e72:	6a 0f       	add	r22, r26
 e74:	71 1d       	adc	r23, r1
 e76:	81 1d       	adc	r24, r1
 e78:	91 1d       	adc	r25, r1
 e7a:	a1 1d       	adc	r26, r1
 e7c:	20 d0       	rcall	.+64     	; 0xebe <__ultoa_invert+0x84>
 e7e:	09 f4       	brne	.+2      	; 0xe82 <__ultoa_invert+0x48>
 e80:	68 94       	set
 e82:	3f 91       	pop	r19
 e84:	2a e0       	ldi	r18, 0x0A	; 10
 e86:	26 9f       	mul	r18, r22
 e88:	11 24       	eor	r1, r1
 e8a:	30 19       	sub	r19, r0
 e8c:	30 5d       	subi	r19, 0xD0	; 208
 e8e:	31 93       	st	Z+, r19
 e90:	de f6       	brtc	.-74     	; 0xe48 <__ultoa_invert+0xe>
 e92:	cf 01       	movw	r24, r30
 e94:	08 95       	ret
 e96:	46 2f       	mov	r20, r22
 e98:	47 70       	andi	r20, 0x07	; 7
 e9a:	40 5d       	subi	r20, 0xD0	; 208
 e9c:	41 93       	st	Z+, r20
 e9e:	b3 e0       	ldi	r27, 0x03	; 3
 ea0:	0f d0       	rcall	.+30     	; 0xec0 <__ultoa_invert+0x86>
 ea2:	c9 f7       	brne	.-14     	; 0xe96 <__ultoa_invert+0x5c>
 ea4:	f6 cf       	rjmp	.-20     	; 0xe92 <__ultoa_invert+0x58>
 ea6:	46 2f       	mov	r20, r22
 ea8:	4f 70       	andi	r20, 0x0F	; 15
 eaa:	40 5d       	subi	r20, 0xD0	; 208
 eac:	4a 33       	cpi	r20, 0x3A	; 58
 eae:	18 f0       	brcs	.+6      	; 0xeb6 <__ultoa_invert+0x7c>
 eb0:	49 5d       	subi	r20, 0xD9	; 217
 eb2:	31 fd       	sbrc	r19, 1
 eb4:	40 52       	subi	r20, 0x20	; 32
 eb6:	41 93       	st	Z+, r20
 eb8:	02 d0       	rcall	.+4      	; 0xebe <__ultoa_invert+0x84>
 eba:	a9 f7       	brne	.-22     	; 0xea6 <__ultoa_invert+0x6c>
 ebc:	ea cf       	rjmp	.-44     	; 0xe92 <__ultoa_invert+0x58>
 ebe:	b4 e0       	ldi	r27, 0x04	; 4
 ec0:	a6 95       	lsr	r26
 ec2:	97 95       	ror	r25
 ec4:	87 95       	ror	r24
 ec6:	77 95       	ror	r23
 ec8:	67 95       	ror	r22
 eca:	ba 95       	dec	r27
 ecc:	c9 f7       	brne	.-14     	; 0xec0 <__ultoa_invert+0x86>
 ece:	00 97       	sbiw	r24, 0x00	; 0
 ed0:	61 05       	cpc	r22, r1
 ed2:	71 05       	cpc	r23, r1
 ed4:	08 95       	ret
 ed6:	9b 01       	movw	r18, r22
 ed8:	ac 01       	movw	r20, r24
 eda:	0a 2e       	mov	r0, r26
 edc:	06 94       	lsr	r0
 ede:	57 95       	ror	r21
 ee0:	47 95       	ror	r20
 ee2:	37 95       	ror	r19
 ee4:	27 95       	ror	r18
 ee6:	ba 95       	dec	r27
 ee8:	c9 f7       	brne	.-14     	; 0xedc <__ultoa_invert+0xa2>
 eea:	62 0f       	add	r22, r18
 eec:	73 1f       	adc	r23, r19
 eee:	84 1f       	adc	r24, r20
 ef0:	95 1f       	adc	r25, r21
 ef2:	a0 1d       	adc	r26, r0
 ef4:	08 95       	ret

00000ef6 <_exit>:
 ef6:	f8 94       	cli

00000ef8 <__stop_program>:
 ef8:	ff cf       	rjmp	.-2      	; 0xef8 <__stop_program>
